#+TITLE:     My Emacs Configuration
#+EMAIL:     harrybournis@gmail.com
#+AUTHOR:    Harry Bournis
#+STARTUP: content
#+TODO: TODO WAITING DISABLED | DONE
#+LANGUAGE:  en
#+PROPERTY: header-args :tangle init.el :comments org
#+OPTIONS: author:nil date:nil toc:nil title:nil e:nil
#+LaTeX_HEADER: \pagenumbering{gobble}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \geometry{a4paper, margin=20mm}
#+LaTeX_HEADER: \usepackage[cache=false]{minted}
#+LaTeX_HEADER: \usemintedstyle{trac}
#+LaTeX_HEADER: \setminted{breaklines}


* Prerequisites
- [[http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack][ag ("the silver searcher")]] for searching
- [[http://git-scm.com/][git]]
- [[https://www.gnupg.org/][gnupg]] for encryption
- [[http://www.latex-project.org/][latex]] and [[http://pygments.org/][pygments]] to pdf export with syntax highlighting
- [[http://aspell.net/][GNU aspell]] for spell checking
- [[https://github.com/julienXX/terminal-notifier][Terminal Notifier]] for notifications on Mac

* Packages Setup
** Repositories

the elpa repositories from where the packages are fetched.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu"          . "https://elpa.gnu.org/packages/")
                           ("org"          . "https://orgmode.org/elpa/")
                           ("melpa"        . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/"))
        package-user-dir (concat (file-name-directory (or load-file-name buffer-file-name)) "elpa"))
#+END_SRC

** Security
#+BEGIN_SRC emacs-lisp
  (setq network-security-level 'high)
#+END_SRC
** use-package & bind-key

#+BEGIN_SRC emacs-lisp
    ;; avoid problems with files newer than their byte-compiled counterparts
    ;; it's better a lower startup than load an outdated and maybe bugged package
    (setq load-prefer-newer t)
    ;; initialize the packages and create the packages list if not exists
    (package-initialize)
    (when (not package-archive-contents)
      (package-refresh-contents))

    ;; install use-package if not exists
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))
    (require 'bind-key)                ;; if you use any :bind variant
#+END_SRC

** IS-MAC/IS-LINUX
Determine whether the system is mac or linux

#+BEGIN_SRC emacs-lisp
  (defconst IS-MAC   (eq system-type 'darwin))
  (defconst IS-LINUX (eq system-type 'gnu/linux))
#+END_SRC
* Variables
Variables are set here that are used in the configuration below

#+BEGIN_SRC emacs-lisp
  (setq org-main-file-location-var   "~/Dropbox/org/stuff.org"
        org-mobile-file-location-var "~/Dropbox/org/mobile/mobile_notes.org"
        org-gcal-file-location-var   "~/Dropbox/org/gcal.org"
        org-agenda-files-var         '(
                                     "~/Dropbox/org/stuff.org"
                                     "~/Dropbox/org/mobile/mobile_notes.org"
                                     "~/Dropbox/org/gcal.org"
                                ;;   "~/Dropbox/org/my-tasks.org"
                                     "~/Dropbox/org/mobile/album.org"
                                     )
        default-font-var             "SauceCodePro Nerd Font Mono"
        ;; default-font-var             "BigBlue_TerminalPlus Nerd Font Mono"
        ;; default-font-var             "ProFontIIx Nerd Font Mono"
        fallback-font-var            "Courier New"
        unicode-font-var             "Unifont"
        default-font-size-var        "15"
        alternate-font-size-var      "11"
        )
#+END_SRC
* Built-in Settings
** General
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        initial-scratch-message nil
        visible-bell nil
        apropos-do-all t                        ;; apropos commands perform more extensive searches than default
        large-file-warning-threshold 100000000  ;; warn only when opening files bigger than 100mb
        ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#F2804F")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))

  ;; (setq visible-bell nil)
  ;; (setq ring-bell-function (lambda ()
  ;; (invert-face 'mode-line)
  ;; (run-with-timer 0.1 nil 'invert-face 'mode-line)))

  ;; have your emacs window always show your system-name and the full
  ;; path of the buffer you're currently editing
  (setq frame-title-format (list (format "%s %%s: %%j " (system-name)) '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

  ;; disable toolbar, scrollbar, menubar (only when not in osx)
  (and (fboundp 'menu-bar-mode)
       (not (eq system-type 'darwin))
       (menu-bar-mode -1))
  (dolist (mode '(tool-bar-mode scroll-bar-mode))
    (when (fboundp mode) (funcall mode -1)))

  ;; replace yes/no questions with y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; show the empty lines at the end (bottom) of the buffer
  (toggle-indicate-empty-lines)

  ;; disable blinking cursor
  (blink-cursor-mode -1)

  ;; make sure that utf-8 is used everywhere.
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-language-environment    'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (prefer-coding-system        'utf-8)
  (set-input-method nil)

  ;; always indent with spaces and 2 spaces
  (setq-default indent-tabs-mode  nil
                default-tab-width 2
                c-default-style "linux"
                c-basic-offset 2)

  ;; show the matching parenthesis when the cursor is above one of them.
  (setq show-paren-delay 0)
  (show-paren-mode t)

  ;; set column number mode to true
  (column-number-mode t)

  ;; set cmd to control in mac
  (setq mac-command-modifier 'control)

  ;; Open .symlink files in sh-mode
  (add-to-list 'auto-mode-alist '("\\.symlink\\'" . sh-mode))

  ;; text wrapping at 80 columns by default (only text)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (setq-default fill-column 80)

  ;; cleanup whitespace on save
  (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; set line numbers on for every buffer
  ;; Disabled in favor of nlinum. See below in packages.
  ;; (global-linum-mode t)

  ;; set line spacing
  (setq-default line-spacing 0.2)

  ;; Highlight current line
  (when window-system
    (global-hl-line-mode))

  ;; open fish for shell
  ;; (setq explicit-shell-file-name "usr/local/bin/fish")

  ;; set the calendar to my country and city's calendar standards
  (setq-default calendar-week-start-day  1
                calendar-latitude        40.6
                calendar-longitude       22.9
                calendar-location-name   "Thessaloniki, Greece")

  ;; sets the default user's information properly.
  (setq user-full-name    "harry bournis"
        user-mail-address "harrybournis@gmail.com")

  ;; set a custom file for customize to keep init.el clean
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'no-error)

  ;; save all backups to a single folder to avoid clutter
  (setq backup-directory-alist '(("." . "~/.emacs.d/etc/backups")))

  ;; Automatically refresh buffers that changed on disk
  (global-auto-revert-mode t)

  ;; check if history file exists, otherwise create it
  ;; (unless (file-exists-p "~/.emacs.d/etc/savehist")
  ;; (with-temp-buffer (write-file "~/.emacs.d/etc/savehist")))

  ;; (setq savehist-file "~/.emacs.d/etc/savehist")
  ;; (savehist-mode 1)
  ;; (setq history-length t)
  ;; (setq history-delete-duplicates t)
  ;; (setq savehist-save-minibuffer-history 1)
  ;; (setq savehist-additional-variables
  ;;       '(kill-ring
  ;;         regexp-search-ring))

#+END_SRC

** Encryption

#+BEGIN_SRC emacs-lisp
  ;; Don't require password each time on enryption with symmetric cyphers
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  (setf epa-pinentry-mode 'loopback)
#+END_SRC
* Packages
** Common
*** evil-mode
Vim emulation. It is extended with various packages that provide existing Vim
functionalities. Bellow is a list of the Emacs package with the functionality
it provides in parentheses:

- [[https://github.com/emacs-evil/evil-surround][Evil Surround]]          (surround.vim)
- [[https://github.com/emacs-evil/evil-surround][Evil Lion]]              (vim-lion)
- [[https://github.com/redguardtoo/evil-matchit][Evil Matchit]]           (matchit.vim)
- [[https://github.com/cofi/evil-numbers][Evil Numbers]]           (increment/decrement binary, octal, decimal and hex numbers)
- [[https://github.com/redguardtoo/evil-nerd-commenter][Evil NERD Commenter]]    (The NERD Commenter)
- [[https://github.com/ninrod/evil-string-inflection][Evil String inflection]] (Convert between camelCase, kebab-case, snake_case and UPPER_CASE)

Although Evil mode does a wonderful job of emulating Vim keybinginds when
editing files, in the rest of the Emacs modes (and there are a lot) I find
myself stuck with Emacs' keybindings. Fortunately, there are a number of
packages that aim to bring Vim-sensible keybindings to the rest of them.

I use [[https://github.com/Somelauw/evil-org-mode][evil-org-mode]] mainly for the Org Agenda keybindings and the great
context-aware functionality it adds to the <return> key. For example, if you are
on a list item, pressing it will add a new list item bellow, including a
checkbox, if it is a checklist.. I found the rest of the keybindings distracting.

[[https://github.com/jojojames/evil-collection][Evil Collection]] aims to bring evil mode to every Emacs mode eventually. It has
keybindings for many modes, but I felt that I should enable it for a particular
mode only when it is needed.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :pin melpa-stable
    :init
    ;; Disable evil integration for evil collection to work correctly
    (setq evil-want-integration nil)
    :config

    (evil-mode t)
    ;; This is a collection of Evil bindings for the parts of Emacs that Evil does
    ;; not cover properly by default, such as help-mode, M-x calendar, Eshell and more.
    (use-package evil-collection
      :ensure t
      :after evil
      :init
      (setq evil-want-integration nil)
      (defcustom evil-collection-mode-list
        `(eshell
          calendar
          custom
          cus-theme
          debbugs
          debug
          diff-mode
          dired
          doc-view
          edebug
          emms
          eval-sexp-fu
          flycheck
          ggtags
          help
          ibuffer
          image
          image+
          info
          man
          (package-menu package)
          (pdf pdf-view)
          )
        "The list of modes which will be evilified by `evil-collection-init'.
        Elements are either target mode symbols or lists which `car' is the
        mode symbol and `cdr' the packages to register.
        By default, `minibuffer' is not included because many users find
        this confusing. It will be included if
        `evil-collection-setup-minibuffer' is set to t."
        :type '(repeat (choice symbol sexp))
        :group 'evil-collection)
      (evil-collection-init))


    ;; evil surround
    (use-package evil-surround
      :ensure t
      :after evil
      :config
      (global-evil-surround-mode))

    ;; indents to a similar level elements on similar lines
    ;; e.g. all '=' in variable assignments
    (use-package evil-lion
      :ensure t
      :after evil
      :config
      (evil-lion-mode))

    ;; press % to move between opening and closing tag in any language
    (use-package evil-matchit
      :ensure t
      :after evil
      :config
      (global-evil-matchit-mode t))

    ;; increment / decrement binary, octal, decimal and hex literals
    (use-package evil-numbers
      :ensure t
      :after evil
      :config
      (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
      (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

    ;; Nerd commenter emulation
    (use-package evil-nerd-commenter
      :ensure t
      :after evil)


    ;; Org mode key bindings for evil mode
    (use-package evil-org
      :ensure t
      :after (evil org)
      :diminish
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (evil-org-set-key-theme '(return))
                  (require 'evil-org-agenda)
                  (evil-org-agenda-set-keys))))

    ;; Changes case of variables (camelCase, kebab-case, snake_case and UPPER_CASE)
    (use-package evil-string-inflection
      :ensure t
      :after evil
      :pin melpa-stable)


    ;; Make ediff evil
    (use-package evil-ediff
      :ensure t
      :after evil
      :defer t)

    ;; Scroll faster with C-e and C-y
    (define-key evil-normal-state-map "\C-e" (lambda () (interactive) (evil-scroll-line-down 2)))
    (define-key evil-normal-state-map "\C-y" (lambda () (interactive) (evil-scroll-line-up 2)))

    ;; g h takes you to the previous heading and
    ;; g H takes you to one heading up
    (evil-define-key 'motion org-mode-map
      (kbd "g h") 'org-previous-visible-heading
      (kbd "g H") 'outline-up-heading)

    ;; Remap tab to org-cycle in normal mode
    ;; (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
    ;; (evil-define-key 'normal org-mode-map (kbd "S-<tab>") #'org-global-cycle)

    ;; Disable evil mode in shell mode
    (evil-set-initial-state 'shell-mode 'emacs)

    ;; Save and quit ingoring mistakes from keeping shift pressed down
    (evil-ex-define-cmd "Q"  'evil-quit)
    (evil-ex-define-cmd "W"  'evil-write)
    (evil-ex-define-cmd "Wq" 'evil-save-and-close)
    (evil-ex-define-cmd "wQ" 'evil-save-and-close)
    (evil-ex-define-cmd "WQ" 'evil-save-and-close)

    ;; Does not replace clipboard copy with the text selected while in visual mode
    (fset 'evil-visual-update-x-selection 'ignore)
    )
#+END_SRC
*** general.el
Improvement on evil-leader. Specify mutliple leaders.

#+BEGIN_SRC emacs-lisp
    (use-package general
      :ensure t
      :config
      (setq general-override-states '(emacs
                                      hybrid
                                      normal
                                      visual
                                      motion
                                      operator))
      (general-evil-setup t)
      (general-override-mode)

      ;; In order for Space to work everywhere. "" nil is used to unbind it first.
      (general-create-definer basic-nav-leader :prefix "SPC" :keymaps 'override :states '(normal visual motion) :non-normal-prefix "C-SPC")
      (basic-nav-leader "" nil
                        "b"       'list-buffers
                        "f"       'list-buffers
                        "TAB"     'mode-line-other-buffer
                        "x"       'execute-extended-command
                        "o"       'occur
                        "<up>"    'windmove-up
                        "<down>"  'windmove-down
                        "<right>" 'windmove-right
                        "<left>"  'windmove-left
                        "k"       'windmove-up
                        "j"       'windmove-down
                        "l"       'windmove-right
                        "h"       'windmove-left
                        "0"       'delete-window
                        "1"       'delete-other-windows
                        "2"       'split-window-below
                        "3"       'split-window-right
                        "d"       'delete-window
                        "h"       'split-window-below
                        "v"       'split-window-right
                        "|"       'toggle-window-split
                        "p"       'projectile-find-file
                        "PP"      'projectile-switch-project
                        "Pt"      'projectile-find-test-file
                        "Po"      'projectile-find-other-file
                        "s"       'counsel-projectile-ag
                        "="       'toggle-light-dark-theme
                        "t"       'org-todo
                        "ns"      'hbournis/create-scratch-buffer
                        "c"       'cfw:open-org-calendar
                        ";"       'evilmi-jump-items
                        "SPC"     (lambda () (interactive) (find-file org-main-file-location-var))
                        "a"       (lambda () (interactive) (find-file org-mobile-file-location-var))
                        "!"       (lambda () (interactive) (load-file "~/.emacs.d/init.el"))
                        "m"       (lambda () (interactive) (find-file "~/.emacs.d/init.org")))

      (general-create-definer extra-tools-leader :prefix "'" :keymaps 'override :states '(normal visual))
      (extra-tools-leader "`"   'shell
                          "v"   'org-cliplink
                          "p"   'hbournis/insert-url-as-org-link
                          "l"   'hbournis/org-make-word-link-from-clipboard
                          "c"   'hbournis-position-to-kill-ring
                          "g"   'magit-status
                          "/"   'evilnc-comment-or-uncomment-lines             ; Un/Comment current line
                          "\\"  'sp-unwrap-sexp
                          "["   'wrap-with-parens
                          "]"   'org-align-all-tags-right
                          "fn"  'flycheck-next-error
                          "fp"  'flycheck-previous-error
                          "fl"  'flycheck-list-errors
                          "j"   (lambda() (interactive) (insert "* ") (backward-char 1))
                          "*"   (lambda() (interactive) (forward-char 1) (insert " ⭐")))

      (general-create-definer extra-tools-alternate-leader :prefix "' '" :keymaps 'override :states '(normal visual))
      (extra-tools-alternate-leader
                          "/l"  'evilnc-quick-comment-or-uncomment-to-the-line ; Type the number of line you want commented first
                          "/c"  'evilnc-copy-and-comment-lines                 ; Copy down and comment line
                          "/p"  'evilnc-comment-or-uncomment-paragraphs        ; Un/Comment paragraph
                          "/r"  'comment-or-uncomment-region                   ; Un/Comment selection
                          "/v"  'evilnc-toggle-invert-comment-line-by-line     ; Toggle invert comment status flag
                          "[["  'wrap-with-brackets
                          "[("  'wrap-with-parens
                          "[{"  'wrap-with-braces
                          "['"  'wrap-with-single-quotes
                          "[\"" 'wrap-with-double-quotes
                          "[`"  'wrap-with-back-quotes))
#+END_SRC
*** org-mode
the best thing in emacs/computer science.

#+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :pin org
      :config
      ;; enable org-bullets
      (use-package org-bullets
        :ensure t
        :config
        (setq org-bullets-bullet-list '("◉" "○" "✹" "◈" "⚇" "⚈" "⚉" "♁" "⊖" "⊗" "⊘"))
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))

      ;; Load org-collector
      (add-to-list 'load-path "~/.emacs.d/lisp/org-collector")

      (setq org-src-fontify-natively t               ;; Use language's syntax highlighting in code blocks
            org-src-tab-acts-natively t
            org-src-window-setup 'current-window     ;; Don't open new window when editing code blocks
            org-todo-keywords '((sequence "TODO(t)" "DOING(i!)" "WAITING(w@/!)" "SOMEDAY(s)" "|" "DONE(d!)" "CANCELED(c@)"))
            ;; org-todo-keyword-faces '(("TODO"        . "red")
            ;;                          ("DOING"       . "yellow")
            ;;                          ("WAITING"     . "#7453ef")
            ;;                          ("DONE"        . (:foreground "green" :weight bold)))
            org-enforce-todo-dependencies t          ;; Parent can't be DONE until all children are

            org-startup-indented t                   ;; indent on startup
            org-indent-indentation-per-level 2       ;; indent each level by 2
            org-list-indent-offset 2                 ;; indent lists by 2
            org-display-inline-images t              ;; display images in org by default
            org-hide-emphasis-markers t              ;; hide bold, italics etc markers
            org-tags-column (- (window-total-width)) ;; make tags align at right window width
            org-latex-compiler "xelatex"             ;; the only one working for greek (i think?)
            org-log-into-drawer t                    ;; save logs in the drawer of current item
            org-clock-into-drawer "CLOCKING"         ;; name the clock drawer clocking
            org-log-reschedule (quote note)          ;; take a note in the log when rescheduling
            org-blank-before-new-entry (quote ((heading . t) (plain-list-item . auto)))
            org-directory (expand-file-name "~/Dropbox/org/")
            org-agenda-files org-agenda-files-var
            org-agenda-span 10                       ;; org agenda shows 10 days
            org-agenda-start-on-weekday nil          ;; org agenda does not start from beggining of week
            org-agenda-start-day "-2d"               ;; org agenda starts 2 days before today
            org-agenda-window-setup "only-frame"     ;; open a new full screen frame for org agenda
            org-babel-do-load-languages
            (quote (org-babel-load-languages (quote ((emacs-lisp . t)
                                                     (ruby . t)
                                                     (python . t)
                                                     (haskell . t)
                                                     (js . t)
                                                     (shell . t)
                                                     (r . t)))))
            org-export-backends (quote (ascii
                                        html
                                        icalendar
                                        latex
                                        md
                                        odt))
            org-modules '(org-bbdb
                          org-docview
                          org-info
                          org-w3m
                          org-protocol
                          org-bibtex
                          org-collector)

            org-lowest-priority ?D
            org-default-priority ?D

            ;; custom colors for priorities
            org-priority-faces '((?A . (:foreground "red" :weight bold))
                                 (?B . (:foreground "orange"))
                                 (?C . (:foreground "yellow"))
                                 (?D . (:foreground "green"))))

      ;; display week numbers in org calendar
      (copy-face font-lock-constant-face 'calendar-iso-week-face)
      (set-face-attribute 'calendar-iso-week-face nil :height 0.7)
      (setq calendar-intermonth-text
            '(propertize
              (format "%2d"
                      (car
                       (calendar-iso-from-absolute
                        (calendar-absolute-from-gregorian (list month day year)))))
              'font-lock-face 'calendar-iso-week-face))

      (define-key org-mode-map (kbd "C-k") nil)

      ;; Used for the protocol link see below
      (defun transform-square-brackets-to-round-ones(string-to-transform)
        "Transforms [ into ( and ] into ), other chars left unchanged."
        (concat
         (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
        )

      (setq org-capture-templates `(
                                    ("a" "Google Calendar Event" entry (file  org-gcal-file-location-var)
                                     "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                                    ("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
                                     "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                                    ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
                                     "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
                                    ("b" "Book" entry (file+headline ,(concat org-directory "books.org")
                                                                     ,(format "%s" (format-time-string "%Y")))
                                     "* TO_READ %^{Title}\n:LOGBOOK:\n- Added on %U\n:END:
                                           \n** Suggested by:\n- %?\n** Description\n\n** Links\n- \n\n"
                                     :empty-lines 1)
                                    ))

      (setq org-agenda-custom-commands '(("c" "Startup Agenda"
                                          (
                                           (tags "PRIORITY=\"A\""
                                                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                                  (org-agenda-overriding-header "High-priority unfinished tasks:")))
                                           (agenda "")
                                           (tags "PRIORITY=\"B\""
                                                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                                  (org-agenda-overriding-header "Mid-priority unfinished tasks:")))
                                          (tags "PRIORITY=\"C\""
                                                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))))))

      ;; Type <el to add an emacs-lisp code block
      (add-to-list 'org-structure-template-alist
                   '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

      ;; Show only the time when a note is added, instead of 'Note taken on..'
      (setq org-log-note-headings (assq-delete-all 'note org-log-note-headings))
      (add-to-list 'org-log-note-headings '(note . "%t"))

      ;; Keep inherited tags on archived headings.
      ;; source: https://orgmode.org/worg/org-hacks.html
      (defadvice org-archive-subtree
          (before add-inherited-tags-before-org-archive-subtree activate)
        "add inherited tags before org-archive-subtree"
        (org-set-tags-to (org-get-tags-at)))
      )
#+END_SRC

**** org-fancy-priorities
Display org priorities as custom strings

#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :diminish
    :hook
    (org-mode . org-fancy-priorities-mode)
    (cfw:calendar-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '((?A . "❗")
                                      (?B . "⬆")
                                      (?C . "⬇")
                                      (?D . "☕")
                                      (?1 . "❗")
                                      (?2 . "⮬")
                                      (?3 . "⮮")
                                      (?4 . "☠"))))
#+END_SRC
*** nlinum
Better performance in line numbers?

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t
    :config
    ;; (global-nlinum-mode)
    )
#+END_SRC
*** DISABLED nlinum-relative
Relative line numbers

#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :ensure t
    :config
    (nlinum-relative-setup-evil)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    (setq nlinum-relative-redisplay-delay 0)
    (global-nlinum-relative-mode))
#+END_SRC
*** flycheck
Syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :init (global-flycheck-mode))
#+END_SRC
*** flyspell
Spell checking. Needs the aspell program installed.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell")
#+END_SRC
*** DISABLED helm
Completion

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :defer t
    :demand t ;; override defer otherwise define-key are not working
    :pin melpa-stable
    :diminish ;;helm-mode
    :init
    (require 'helm-config)
    :config
    (use-package helm-ag
      :ensure t
      :pin melpa-stable
      :bind
      (("C-c hag"  . helm-ag)
       ("C-c hat"  . helm-ag-this-file)))

    (use-package helm-swoop
      :ensure t
      :pin melpa-stable
      :bind
      (("C-c hs" . helm-swoop)))

    (use-package helm-descbinds
      :ensure t
      :pin melpa-stable
      :bind
      (("C-h b" . helm-descbinds)))

    (setq helm-idle-delay 0.0                 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01          ; this actually updates things reeeelatively quickly.
          helm-move-to-line-cycle-in-source t ; cycle after reaching end or beginning
          helm-scroll-amount 8                ; scroll 8 lines on M-<next>/M-<prior>
          helm-autoresize-max-height 20
          helm-autoresize-min-height 0
          helm-autoresize-mode t              ; autoresize to fit candidates
          helm-ff-file-name-history-use-recentf t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t
          helm-candidate-number-limit 100
          helm-split-window-in-side-p t
          ;; Fuzzy matching
          helm-mode-M-x-fuzzy-match t
          helm-recentf-fuzzy-match t
          helm-completion-in-region-fuzzy-match t
          helm-mode-fuzzy-match t)
    (define-key global-map [remap find-file] 'helm-find-files)
    (define-key global-map [remap occur] 'helm-occur)
    (define-key global-map [remap list-buffers] 'helm-buffers-list)
    (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
    (helm-mode t)
    :bind
    (("M-x"     . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("C-x f"   . helm-recentf)
     ("C-x C-b" . helm-buffers-list)
     ("M-y"     . helm-show-kill-ring)
     ("C-x C-r" . helm-mini)))
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :config
    (ivy-mode 1)
    ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
    (setq ivy-use-virtual-buffers t)
    ;; number of result lines to display
    ;; (setq ivy-height 10)
    ;; does not count candidates
    (setq ivy-count-format "(%d/%d) ")
    ;; no regexp by default
    ;; (setq ivy-initial-inputs-alist nil)
    ;; configure regexp engine.
    ;; (setq ivy-re-builders-alist
    ;;   '((t   . ivy--regex-ignore-order)))
    ;; Set ivy for completion in projectile
    (setq projectile-completion-system 'ivy)
    (define-key global-map [remap list-buffers] 'ivy-switch-buffer)
    (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
    (global-set-key (kbd "C-s") 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x f") 'counsel-recentf))
#+END_SRC
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :pin melpa-stable
    :config
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode)))
#+END_SRC
*** company
Autocompletion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish
    :pin melpa-stable
    :hook
    (after-init . global-company-mode)
    :config
    ;; Disable autocompletion in org files
    (setq company-global-modes '(not org-mode))
    ;; Change keybindings for navigating results
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
    :bind
    (("C-;" . company-complete)))
#+END_SRC
*** undo tree mode
visualize undo

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :pin melpa-stable
    :config
    (require 'smartparens-config)
    (add-hook 'emacs-lisp-mode-hook 'smartparens-strict-mode)
    (add-hook 'js-mode-hook 'smartparens-strict-mode)
    (add-hook 'html-mode-hook 'smartparens-strict-mode)
    (add-hook 'ruby-mode-hook 'smartparens-strict-mode)
    (add-hook 'python-mode-hook 'smartparens-strict-mode)
    (add-hook 'sh-mode-hook 'smartparens-strict-mode)

    (use-package evil-smartparens
      :ensure t
      :config
      (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))
#+END_SRC
*** recentf
open recently closed files

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure t
    :config
    (setq recentf-saved-items 100
          recentf-max-menu-items 15
          recentf-save-file "~/.emacs.d/etc/recentf"
          recentf-exclude '("commit_msg" "commit_editmsg"))
    ;; periodically save list
    ;; (run-at-time nil (* 5 60) 'recentf-save-list)
    )
#+END_SRC
*** windmove

#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :ensure t)
#+END_SRC

*** DISABLED ace-window
move between windows by pressing a key. Disabled in favor of windmove mapped to
<leader> hjkl.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (set-face-attribute 'aw-leading-char-face nil :foreground "deep sky blue" :weight 'bold :height 2.0)
    (set-face-attribute 'aw-mode-line-face nil :inherit 'mode-line-buffer-id :foreground "lawn green")
    (setq aw-keys   '(?a ?s ?d ?f ?j ?k ?l)
          aw-dispatch-always t
          aw-dispatch-alist
          '((?x aw-delete-window     "ace - delete window")
            (?c aw-swap-window       "ace - swap window")
            (?n aw-flip-window)
            (?h aw-split-window-vert "ace - split vert window")
            (?v aw-split-window-horz "ace - split horz window")
            (?m delete-other-windows "ace - maximize window")
            (?g delete-other-windows)
            (?b balance-windows)
            (?u winner-undo)
            (?r winner-redo)))
    (ace-window-display-mode t))
#+END_SRC

*** desktop
Save emacs session

#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :ensure t
    :config
    (setq desktop-path '("~/.emacs.d/etc/")
          desktop-dirname "~/.emacs.d/etc/"
          desktop-base-file-name "emacs-desktop"
          desktop-globals-to-save
          (append '((extended-command-history . 50)
                    (file-name-history . 200)
                    (grep-history . 50)
                    (compile-history . 50)
                    (minibuffer-history . 100)
                    (query-replace-history . 100)
                    (read-expression-history . 100)
                    (regexp-history . 100)
                    (regexp-search-ring . 100)
                    (search-ring . 50)
                    (shell-command-history . 50)
                    tags-file-name
                    register-alist)))
    (desktop-save-mode t))
#+END_SRC
*** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :pin melpa-stable
    :config
    (use-package evil-magit
      :ensure t
      :pin melpa-stable))
#+END_SRC
*** ag

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :config
    (setq ag-highlight-search t
          ag-reuse-window t))
#+END_SRC
*** which-key
Display the keys available after pressing C-x for example.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer t
    :diminish
    :config
    ;;(setq which-key-idle-delay 0.2)
    ;;(which-key-setup-side-window-right-bottom)
    (which-key-mode))
#+END_SRC
*** dtrt-indent
guesses the correct indentation

#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :ensure t
    :hook (diminish 'dtrt-indent-mode)
    :config
    (dtrt-indent-mode t))
#+END_SRC
*** DISABLED beacon-mode
highlights cursor after a jump. Disabled in favor of ~global-hl-line-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode t))
#+END_SRC
*** lorem-ipsum
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC
*** rainbow-mode
shows the color of hex color codes as their background

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :defer t
    :diminish
    :config
    ;; enable it by default in org mode
    ;; (defun rainbow-mode-hook ()
      ;; (rainbow-mode t))
    ;; (add-hook 'org-mode-hook 'rainbow-mode-hook)
    )
#+END_SRC
*** DISABLED emojify
Show emojis

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :config
    disabled by default
    (global-emojify-mode nil))
#+end_src
*** diminish
hide specific modes from the modeline

#+begIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))

    (diminish 'auto-fill-function)
    (diminish 'auto-revert-mode))
#+END_SRC
*** exec-path-from-shell
Get environment variables from the shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
*** org-cliplink
Pretty-copy links from the browser to org with title instead of just url

#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :ensure t
    :config
    (global-set-key (kbd "C-c p b") 'org-cliplink))
#+END_SRC
*** org-gcal
Google calendar integration with org mode. Sync both ways. There is currently a
bug where events created in Emacs get duplicated in Google Calendar.

#+BEGIN_SRC emacs-lisp
  ;; Load api keys for google calendar API

  ;; Only load org-gcal if the .api-keys file is present. Prompt user to rename the
  ;; .api-keys-sample file to .api-keys and fill in their info.
  (if (file-exists-p (concat user-emacs-directory ".api-keys"))
      (progn
        (load (concat user-emacs-directory ".api-keys"))

        (use-package org-gcal
          :ensure t
          :config
          (setq org-gcal-client-id     api-keys-org-gcal-client-id
                org-gcal-client-secret api-keys-org-gcal-client-secret
                org-gcal-file-alist    `((,api-keys-org-gcal-email . ,org-gcal-file-location-var)))
          (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
          (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))))
    (display-warning '(init-file) "org-gcal not activated. .api-keys file is missing. Rename .api-keys-sample to .api-keys and reload." :error)
    )
#+END_SRC
*** calfw
Calendar framework

#+BEGIN_SRC emacs-lisp
  (use-package calfw
    :ensure t
    :pin melpa-stable
    :init
    (use-package calfw-org
      :ensure t
      :pin melpa-stable)

    (use-package calfw-gcal
      :ensure t
      :config
      (require 'calfw-gcal))

    :config
    (require 'calfw-org))
#+END_SRC
*** ranger
Emulates ranger in emacs. Replaces dired when browsing folders.

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t
    :config
    (setq ranger-override-dired 'ranger
          ranger-show-hidden t
          ranger-modify-header t
          ranger-preview-file t
          ranger-max-preview-size 10
          ranger-dont-show-binary t
          ranger-cleanup-on-disable t
          ranger-excluded-extensions '("mkv" "iso" "mp4" "mp3" "avi"))
    (ranger-override-dired-mode t))
#+END_SRC
*** DISABLED pdf-tools
Disabled for now because it requires extra packages to be installed in the
system in order to work.
#+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :pin melpa-stable
      :config
      (pdf-tools-install))
#+END_SRC
*** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC
** Programming Language Specific
*** HTML/CSS
**** emmet-mode
Use C-j to expand.

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    ;; Autostart on any markup modes and CSS
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC
*** Markdown
**** markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :pin melpa-stable
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
*** YAML
**** yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)
                                  '("\\.yaml\\'" . yaml-mode))

    ;;  Unlike python-mode, this mode follows the Emacs convention of not
    ;; binding the ENTER key to `newline-and-indent'.  To get this
    ;; behavior, add the key definition to `yaml-mode-hook':
    (add-hook 'yaml-mode-hook
              '(lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+END_SRC
*** Ruby
**** DISABLED projectile-rails
#+BEGIN_SRC emacs-lisp
  (use-package projectile-rails
    :ensure t
    :require projectile
    :pin melpa-stable
    (projectile-rails-global-mode))
#+END_SRC
**** DISABLED rspec-mode
Enhancements to ruby-mode for RSpec files.

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :ensure t)
#+END_SRC
**** DISABLED bundler
Interact with bundler with Emacs

#+BEGIN_SRC emacs-lisp
  (use-package bundler
    :ensure t)
#+END_SRC
*** JavaScript
**** DISABLED company-tern
JavaScript auto-completion

#+BEGIN_SRC emacs-lisp
  (use-package company-tern
    :ensure t
    :require company
    :pin melpa-stable
    :config
    (add-to-list 'company-backends 'company-tern))
#+END_SRC
**** js2-mode
Improved JavaScript editing mode

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :pin melpa-stable
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+END_SRC
*** Haskell
**** intero
Complete development mode for Haskell

#+BEGIN_SRC emacs-lisp
  (use-package intero
    :ensure t
    :pin melpa-stable
    :config
    (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC
*** R & Julia
**** ESS (Emacs Spearks Statistics)
[[http://ess.r-project.org/][ESS]] provides modes for R and Julia. When I tried to install it from master it
was broken, so melpa-stable should be preferred.

#+BEGIN_SRC emacs-lisp
    (use-package ess
      :ensure t
      :pin melpa-stable)
#+END_SRC
* Font and Theme
** Fonts
SourceCodePro is my default font.
Execute ~(print (font-family-list))~ to get a list of all available fonts and how
Emacs expects you to write them.

#+BEGIN_SRC emacs-lisp

  ;; Turn off antialiasing for BigBlue Terminal Font
  ;; (setq mac-allow-anti-aliasing nil)

  ;; Something to do with resolution
  (if (member default-font-var (font-family-list))
      (cond (IS-MAC
             (set-face-attribute 'default nil :font (concat default-font-var "-" default-font-size-var)))
            (IS-LINUX
             (set-face-attribute 'default nil :font (concat default-font-var "-" alternate-font-size-var))))
    (set-face-attribute 'default nil :font (concat fallback-font-var "-" default-font-size-var)))

  ;; Set a font with great support for Unicode Symbols to fallback in
  ;; those case where certain Unicode glyphs are missing in the current
  ;; font.
  (when (member unicode-font-var (font-family-list))
    (set-fontset-font t 'unicode (concat unicode-font-var "-" default-font-size-var) nil 'prepend))
#+END_SRC
** Themes
*** Color Scheme
First I set two built-in themes, in case downloading the custom themes fails.
Currently using [[https://github.com/ideasman42/emacs-inkpot-theme][inkpot-theme]] for dark theme, and [[https://github.com/john2x/flatui-theme.el][flatui]] for light theme.
Other interesting themes: [[https://github.com/jonathanchu/atom-one-dark-theme][atom-one-dark-theme]], [[https://github.com/owainlewis/emacs-color-themes][sublime themes]], [[https://github.com/steckerhalter/grandshell-theme][grandshell-theme]], [[https://github.com/steckerhalter/grandshell-theme][badwolf-theme]].

#+BEGIN_SRC emacs-lisp
  (setq light-theme-var 'tango)
  (setq dark-theme-var  'tsdh-dark)

  (use-package doom-themes
    :ensure t
    :config
    (require 'doom-themes)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic nil) ; if nil, italics is universally disabled

    (setq dark-theme-var 'doom-one)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )

  (use-package flatui-theme
    :ensure t
    :config
    (setq light-theme-var 'flatui))

  ;; Add the default theme in the load path
  (add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/default-theme-clean")
#+END_SRC

*** Modeline
**** powerline
[[https://github.com/milkypostman/powerline][Github]]
[[https://github.com/AnthonyDiGirolamo/airline-themes][Airline Themes]]

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (use-package airline-themes
      :ensure t
      :config
      ;; (load-theme 'airline-doom-one)
      (setq light-theme-modeline-var 'airline-silver)
      (setq dark-theme-modeline-var 'airline-simple)
      ;; (load-theme dark-theme-modeline-var)
      ))
#+END_SRC
**** DISABLED telephone-line
[[https://github.com/dbordak/telephone-line][Github]]

#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-right
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-height 24
          telephone-line-evil-use-short-tag t)
    (telephone-line-evil-config))
#+END_SRC
**** DISABLED spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
#+END_SRC
*** Theme Functions
#+BEGIN_SRC emacs-lisp
  (defun switch-theme (theme)
    "This interactive call is taken from `load-theme'
    Seen at: https://www.reddit.com/r/emacs/comments/30b67j/how_can_you_reset_emacs_to_the_default_theme/cprkyl0/
    It first loads the default clean Emacs theme, then disables all themes, and loads the specified THEME."
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapcar 'symbol-name
                                       (custom-available-themes))))))
    (load-theme 'default-theme-clean)
    (mapcar #'disable-theme custom-enabled-themes)
    (load-theme theme t))

  (defun toggle-light-dark-theme ()
    "Toggle between the selected dark and light themes."
    (interactive)
    (if (get 'toggle-light-dark-theme 'light-theme-loaded)
        (load-dark-theme)
      (load-light-theme))
    (put 'toggle-light-dark-theme 'light-theme-loaded (not (get 'toggle-light-dark-theme 'light-theme-loaded))))

  (defun load-dark-theme ()
    "Load the specified dark theme.  It uses the variables dark-theme-var, dark-theme-modeline-var.
      Also sets some faces for org-checkbox, strings, org TODO items and evil mode cursors. "
    (switch-theme dark-theme-var)
    (load-theme dark-theme-modeline-var)

    (set-face-attribute 'org-checkbox nil
                        :bold 'normal
                        :box '(:line-width 1 :color "dim gray" :style nil)
                        :foreground "gray"
                        :background nil)

    ;; (set-face-attribute 'org-checkbox-statistics-todo nil
    ;;                     :foreground "#ff6c6b")

    (set-face-attribute 'font-lock-string-face nil
                        :background "#404040"
                        :foreground "#ffcd8b")

    (set-face-attribute 'org-level-1 nil
                        :background "#23272e")

    (set-face-background 'fringe "#23272e")

    (set-face-attribute 'org-headline-done nil
                        :foreground "#767F87")

    (set-face-attribute 'org-agenda-dimmed-todo-face nil
                        :foreground nil)

    (set-face-attribute 'org-property-value nil
                        :foreground "white")

    (setq org-priority-faces '((?A . (:foreground "#ff6c6b" :weight bold))
                               (?B . (:foreground "orange"))
                               (?C . (:foreground "yellow"))
                               (?D . (:foreground "green"))))

    (set-face-attribute 'org-agenda-date          nil :height 1.1)
    (set-face-attribute 'org-agenda-date-today    nil :height 1.1)
    (set-face-attribute 'org-agenda-date-weekend  nil :height 1.1)
    (set-face-attribute 'org-agenda-structure     nil :height 1.1)

    ;; (setq org-todo-keyword-faces '(("TODO"        . "red")
    ;;                                ("DOING"       . "yellow")
    ;;                                ("WAITING"     . "#7453ef")
    ;;                                ("DONE"        . (:foreground "green" :weight bold))))
    (setq evil-emacs-state-cursor    '("red" box))
    (setq evil-normal-state-cursor   '("white" box))
    (setq evil-visual-state-cursor   '("orange" box))
    (setq evil-insert-state-cursor   '("cyan" box))
    (setq evil-replace-state-cursor  '("red" box))
    (setq evil-operator-state-cursor '("red" box))
    (doom-themes-org-config))

  (defun load-light-theme ()
    "Load the specified light theme.
          It uses the variables light-theme-var, light-theme-modeline-var.
          Also sets some faces for org-checkbox, strings, org TODO items and evil
          mode cursors."
    (switch-theme light-theme-var)
    (load-theme light-theme-modeline-var)

    (set-face-attribute 'org-checkbox nil
                        :box nil
                        :bold 'normal
                        :background nil)

    (set-face-attribute 'font-lock-string-face nil
                        :background nil
                        :foreground "#0a74b9")

    (set-face-attribute 'org-property-value nil
                        :foreground "black")

    (setq org-todo-keyword-faces '(("TODO"        . (:foreground "#e74c3c" :weight bold))
                                   ("DOING"       . (:foreground "#2980b9" :weight bold))
                                   ("WAITING"     . (:foreground "#8e44ad" :weight bold))
                                   ("DONE"        . (:foreground "green" :weight bold))))

    (setq evil-emacs-state-cursor    '("red" box))
    (setq evil-normal-state-cursor   '("#1abc9c" box))
    (setq evil-visual-state-cursor   '("orange" box))
    (setq evil-insert-state-cursor   '("#9b59b6" box))
    (setq evil-replace-state-cursor  '("red" box))
    (setq evil-operator-state-cursor '("red" box)))
#+END_SRC
*** Load Theme
#+BEGIN_SRC emacs-lisp
  (load-dark-theme)
  ;; (add-hook 'after-init-hook (lambda ()
  ;;                              (put 'toggle-light-dark-theme 'light-theme-loaded t)
  ;;                              (toggle-light-dark-theme)
  ;;                              )
  ;;           )

  ;; (put 'toggle-light-dark-theme 'light-theme-loaded t)
  ;; (toggle-light-dark-theme)
#+END_SRC

* Custom Functions
** Toggle Window Split
Toggle between horizontal and vertical split. [[https://www.emacswiki.org/emacs/ToggleWindowSplit][Source]]

#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    ;; Toggle the placement of windows between horizontal and vertical split
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
             (car next-win-edges))
               (<= (cadr this-win-edges)
             (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
           (car (window-edges (next-window))))
        'split-window-horizontally
      'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))
#+END_SRC
** Align org mode tags on the right
I want to align the org mode tags on the right of the screen, which is a
relative value. However, org-align-all-tags depends on the org-tags-column variable.
For some reason setting org-tags-column in the init file does not work. Although the code
is valid, when I check the value of the variable it is -80. However, if evaluate
the block and check again, the value is set correctly. At the moment I see no
workaround except to set org-tags-column immediatelly before calling
org-align-all-tags. This also means that it will be relative to the window
width at the moment I want to align them, and not at startup.

#+BEGIN_SRC emacs-lisp
  (defun org-align-all-tags-right ()
    ;; Align org tags to the right of the screen. Calculates it according to the
    ;; window-total-width property.
    (interactive)
    (setq org-tags-column (+ 5 (- (window-total-width))))
    (org-align-all-tags))
#+END_SRC
** Check if cliboard data is a URL
Helper function for ~hbournis/insert-url-as-org-link~ and
~hbournis/org-make-word-link-from-clipboard.~ Returns true if url is a valid
URL. Returns false if it is not a URL, or if it is an org-mode formatted link.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/cliboard-contains-url-p (url)
    ;; Returns true if url is a valid URL. Returns false
    ;; if it is not a URL, or if it is an org-mode formatted
    ;; link.
    (let ((url-pattern  "\\(http[s]?://\\|www\\.\\)")
          (url-org-pattern "\\([[]+\\)"))
      (and (not (string-match url-org-pattern url)) (string-match url-pattern url))))
#+END_SRC
** Paste URL from clipboard in org mode format
Insert a URL from clipboard in org mode format and place the cursor in insert
mode to complete the link text. Originally seen [[https://emacs.stackexchange.com/a/3287][here]]. The original snippet
matched URLs that were already formatted as org mode links, leading to really
broken links being inserted. This is a common case since when you delete a link
it is stored in the register. I added a second regular expression that checks
whether the URL in the clipboard starts with ~[~.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/insert-url-as-org-link ()
    "If there's a URL on the clipboard, insert it as an org-mode
  link in the form of [[url][*]], leave point at * and enter insert mode."
    (interactive)
    (let ((link (substring-no-properties (x-get-selection 'CLIPBOARD))))
      (save-match-data
        (if (hbournis/cliboard-contains-url-p link)
            (progn
              (insert (concat " [[" link "][]]"))
              (backward-char 2)
              (evil-insert 1))
          (error "No URL on the clipboard")))))
#+END_SRC
** Paste URL from clipboard using the word at point as link text
Takes the word that the cursor in on, and replaces it with an org-mode link to
the URL in the clipboard. If there is no word at the cursor point, it inserts
the link with the URL as text. Returns an error if there is no URL at the
clipboard. I wanted to make it work with visual selection, but I maybe in the
future.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/org-make-word-link-from-clipboard ()
    ;; Takes the word that the cursor in on, and replaces it with an org-mode
    ;; link to the URL in the clipboard. If there is no word at the cursor point,
    ;; it inserts the link with the URL as text. Returns an error if there is
    ;; no URL at the clipboard.
    (interactive)
    (let ((link (substring-no-properties (x-get-selection 'CLIPBOARD)))
          ;; Specify the bounds of the region in order to delete it
          (bounds (if (use-region-p)
                      (cons (region-beginning) (region-end))
                    (bounds-of-thing-at-point 'symbol)))
          ;; If there is no word at point, then use the link as URL
          (text (or (thing-at-point 'symbol) link)))

      ;; Check if link is a URL and that it is not already in org mode format,
      ;; else throw an error
      (if (hbournis/cliboard-contains-url-p link)
          (progn
            ;; If bounds exist, delete the word to replace it with the link
            (if bounds
                (delete-region (car bounds) (cdr bounds)))

            ;; Insert the link with the text in org mode link format
            (insert (concat "[[" link "][" text "]]")))
        (error "There is no URL at the clipboard."))))
#+END_SRC
** Copy to clipboard link to current file and current line
#+BEGIN_SRC emacs-lisp
  (defun hbournis-position-to-kill-ring ()
    "Copy to the kill ring a string in the format \"file-name:line-number\"
      for the current buffer's file name, and the line number at point.
      Originally seen: https://stackoverflow.com/a/10682397"
    (interactive)
    (let ((linum (save-restriction (widen) (line-number-at-pos))))
      (kill-new
       (format "[[file:%s::%d][⮴\"%s\":%d]]"
               (buffer-file-name)
               linum
               (file-name-nondirectory (buffer-file-name))
               linum))
      (message "Copied link to position")))
#+END_SRC
** Smartparens wrap-with- functions
For each pair character, generate a function called ~wrap-with-<pair name>~. [[https://ebzzry.io/en/emacs-pairs/][Source]]
#+BEGIN_SRC emacs-lisp
  ;; Source: https://ebzzry.io/en/emacs-pairs/
  (defmacro def-pairs (pairs)
    `(progn
       ,@(cl-loop for (key . val) in pairs
                  collect
                  `(defun ,(read (concat
                                  "wrap-with-"
                                  (prin1-to-string key)
                                  "s"))
                       (&optional arg)
                     (interactive "p")
                     (sp-wrap-with-pair ,val)))))

  (def-pairs ((paren . "(")
              (bracket . "[")
              (brace . "{")
              (single-quote . "'")
              (double-quote . "\"")
              (back-quote . "`")))
#+END_SRC
** Transform org date to simple year-month-day string
#+BEGIN_SRC emacs-lisp
  (defun hbournis/org-date-to-simple-string (date)
    "Transform an org date to a simple year-month-day format"
    (substring (format "%S" date) 1 11))
#+END_SRC
** Recreate scratch buffer
A simple function from [[https://www.emacswiki.org/emacs/RecreateScratchBuffer][Emacs wiki]] to recreate the scratch buffer

#+BEGIN_SRC emacs-lisp
  (defun hbournis/create-scratch-buffer nil
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
#+END_SRC
** DISABLED org-fancy-priorities
For development only.
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p (concat user-emacs-directory "lisp/org-fancy-priorities/org-fancy-priorities.el"))
      (progn
        (add-to-list 'load-path "~/.emacs.d/lisp/org-fancy-priorities/")
        (require 'org-fancy-priorities)
        (setq org-fancy-priorities-list '((?A . "❗")
                                          (?B . "⬆")
                                          (?C . "⬇")
                                          (?D . "☕")
                                          (?1 . "❗")
                                          (?2 . "⮬")
                                          (?3 . "⮮")
                                          (?4 . "☠")))
        (add-hook 'org-mode-hook 'org-fancy-priorities-mode)
        (diminish 'org-fancy-priorities-mode)))
#+END_SRC
** Terminal Notifier
[[https://zhongweiy.github.io/blog/2016/02/03/solve-error-emacs-not-compiled-with-dbus-support/][Source]]

#+BEGIN_SRC emacs-lisp
  ;; Terminal notifier
  ;; requires 'brew install terminal-notifier'
  ;; stolen from erc-notifier

  (defvar terminal-notifier-command (executable-find "terminal-notifier") "The path to terminal-notifier.")

  ;; (terminal-notifier-notify "Emacs notification" "Something amusing happened")

  (defun terminal-notifier-notify (title message)
    "Show a message with
  terminal-notifier-command
  ."
    (start-process "terminal-notifier"
                   "terminal-notifier"
                   terminal-notifier-command
                   "-title" title
                   "-message" message
                   "-sound" "default"
                   "-activate" "org.gnu.Emacs"))

  (defun timed-notification (time msg)
    (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
    (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Emacs" msg)) msg))

  (setq org-show-notification-handler
        (lambda (msg) (timed-notification nil msg)))
#+END_SRC
* Shortcuts
global shortcuts

#+BEGIN_SRC emacs-lisp
  (global-set-key   (kbd "C-c w")  'browser-url-at-point)
  (global-unset-key (kbd "C-k"))
  (global-unset-key (kbd "C-S-k"))
  (global-set-key   (kbd "C-S-k")  (lambda () (interactive) (kill-this-buffer) (delete-other-windows)))
  (global-set-key   (kbd "C-c a")  'org-agenda)
#+END_SRC
* ENV variables

#+BEGIN_SRC emacs-lisp
  ;; For pdf-tools to work in mac
  (setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
#+END_SRC
* Autostart Org Agenda
If at least one org agenda file exists, show the agenda on startup. Otherwise it
gets really annoying when setting Emacs up at a new computer that does not have
all your files yet.

Also reload all agenda files before before showing the agenda, since they might
have been edited from the mobile app.

#+BEGIN_SRC emacs-lisp
  (let (result)
    (if (dolist (e org-agenda-files result)
          (if (file-exists-p e) (setq result t)))
        (setq initial-buffer-choice (lambda ()
                                      (dolist (file-name org-agenda-files-var)
                                        (let ((buf (find-buffer-visiting file-name)))
                                          (if buf
                                              (with-current-buffer buf
                                                (when (and (buffer-file-name) (file-exists-p (buffer-file-name)))
                                                  (revert-buffer :ignore-auto :noconfirm))))))
                                      (org-agenda nil "c")
                                      (get-buffer "*Org Agenda*")
                                      (delete-other-windows)))))
#+END_SRC
* Start emacs server
Start an emacs server so you can open files from the command line using
emacsclient

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC
* Start fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
