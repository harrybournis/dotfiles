#+AUTHOR: Harry Bournis
#+STARTUP: content
#+TODO: TODO WAITING MAC_ONLY WINDOWS_ONLY LINUX_ONLY UNIX_ONLY NOT_WINDOWS NOT_MAC NOT_LINUX NOT_UNIX WORK_ONLY NOT_WORK DISABLED | DONE
#+PROPERTY: header-args :tangle init.el :comments org

* Prerequisites
- [[http://git-scm.com/][git]]
- [[https://www.gnupg.org/][gnupg]] for encryption
- [[https://github.com/hunspell/hunspell][Hunspell]]
- [[https://github.com/BurntSushi/ripgrep][rigprep]]

* Packages Setup
** Proxy settings
#+BEGIN_SRC emacs-lisp
  (if (and (boundp 'config/proxy-url) config/proxy-url)
      (setq url-proxy-services
            `(("no_proxy" . "^\\(localhost\\|10.*\\)")
              ("http"     . ,config/proxy-url)
              ("https"    . ,config/proxy-url))))
#+END_SRC
** straight.el

#+BEGIN_SRC emacs-lisp
  ;; (setq use-package-compute-statistics t)

  (setq straight-use-package-by-default t
        use-package-expand-minimally t
        use-package-always-ensure nil
        use-package-always-defer t
        straight-check-for-modifications nil
        site-run-file nil
        inhibit-compacting-font-caches t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq use-package-verbose t
        straight-vc-git-default-clone-depth 1)
#+END_SRC
** Security
#+BEGIN_SRC emacs-lisp
  (setq network-security-level 'high
        gnutls-algorithm-priority "normal:-vers-tls1.3"
        url-cookie-untrusted-urls '(".*"))
#+END_SRC
* Variables
Variables are set here that are used in the configuration below

#+BEGIN_SRC emacs-lisp
  (setq hbournis/projects-dir           "~/Documents/projects"
        hbournis/org-main-file          "~/org/stuff.org"
        hbournis/org-book-file          "~/org/books.org"
        hbournis/org-mobile-file        "~/org/mobile_notes.org"
        hbournis/org-album-file         "~/org/album.org"
        hbournis/org-inbox-file         "~/org/Inbox.org"
        hbournis/org-work-file          "~/Documents/work.org"
        hbournis/org-journal-file       "~/org/journal.org.gpg"
        hbournis/recurring-file         "~/org/recurring.org"
        hbournis/bookmarks-file         "~/org/bookmarks.org"
        hbournis/private-bookmarks-file "~/org/private-bookmarks.org.gpg"
        hbournis/org-agenda-files       `(,hbournis/org-main-file
                                          ,hbournis/org-mobile-file
                                          ,hbournis/org-album-file
                                          ,hbournis/org-inbox-file
                                          ,hbournis/recurring-file
                                          ,hbournis/org-work-file)
        hbournis/default-font           "AurulentSansM Nerd Font Mono"
        hbournis/variable-pitch-font    "AurulentSansM Nerd Font Propo"
        hbournis/fallback-font          "Courier New"
        hbournis/unicode-font           "Unifont"
        hbournis/font-size              (if (boundp 'hbournis/font-size) hbournis/font-size 18)
        theme                           'dark)
#+END_SRC
* Built-in Settings
** General
#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
        apropos-do-all t                        ;; apropos commands perform more extensive searches than default
        large-file-warning-threshold 100000000  ;; warn only when opening files bigger than 100mb
        scroll-bar-mode nil
        ring-bell-function 'ignore
        mouse-wheel-tilt-scroll t
        display-line-numbers-type 'relative
        mac-command-modifier 'control
        history-delete-duplicates t
        frame-title-format '("%b - Emacs"))

  ;; always indent with spaces and 2 spaces
  (setq-default indent-tabs-mode  nil
                default-tab-width 2
                c-default-style "linux"
                c-basic-offset 2
                fill-column 80
                line-spacing 0.2)

  ;; replace yes/no questions with y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; show the empty lines at the end (bottom) of the buffer
  (toggle-indicate-empty-lines)

  ;; disable blinking cursor
  (blink-cursor-mode -1)

  ;; taken from doom emacs, set utf-8 everywhere
  (set-language-environment "UTF-8")
  (setq default-input-method nil)
  (if IS-WINDOWS (setq selection-coding-system 'utf-8))
  (set-input-method nil)

  (add-hook 'emacs-lisp-mode-hook 'display-line-numbers-mode)

  (column-number-mode nil)

  ;; remove the fringe indicators at the end of the file
  (set-fringe-style 0)

  ;; Open .symlink files in sh-mode
  (add-to-list 'auto-mode-alist '("\\.symlink\\'" . sh-mode))

  ;; text wrapping at 80 columns by default (only text)
  (add-hook 'text-mode-hook 'auto-fill-mode)

  ;; cleanup whitespace on save
  ;; (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; set a custom file for customize to keep init.el clean
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'no-error t)

  ;; Disable backups, enable auto-save
  (setq create-lockfiles nil
        make-backup-files nil
        version-control t
        backup-by-copying t
        delete-old-versions t
        kept-old-versions 5
        kept-new-versions 5
        auto-save-default t
        auto-save-include-big-deletions t
        backup-directory-alist '(("." . "~/.emacs.d/etc/backups"))
        auto-save-list-file-prefix "~/.emacs.d/etc/auto-save/.saves-")

  ;; Automatically refresh buffers that changed on disk
  (run-with-idle-timer 4 nil (lambda () (global-auto-revert-mode t)))
#+END_SRC
** Encryption

#+BEGIN_SRC emacs-lisp
  ;; Don't require password each time on enryption with symmetric cyphers
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  (setf epa-pinentry-mode 'loopback)

  (if IS-WINDOWS
      (progn
        (setq epg-gpg-home-directory "c:/Users/dfkjlsdf/AppData/Roaming/gnupg")
        (setq epg-gpg-program "c:/Program Files (x86)/GnuPG/bin/gpg.exe")
        (setq epg-gpgconf-program "c:/Program Files (x86)/GnuPG/bin/gpgconf.exe")))
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
  ;; (setq explicit-shell-file-name "/usr/local/bin/zsh")
  (setenv "INSIDE_EMACS" "true")
#+END_SRC
*** open terminal below
#+BEGIN_SRC emacs-lisp
  (defun hbournis/open-terminal ()
    "Open a terminal.  If less than 3 windows, split and open it below.
  Otherwise open it in current window"
    (interactive)
    (if (< (count-windows) 3)
        (progn
          (unless (ignore-errors
                    (split-window-below))
            (progn
              (other-window 1)
              (split-window-below)))
          (other-window 1)))
    (vterm))
#+END_SRC
* Packages
** Common
*** dash
A modern [[https://github.com/magnars/dash.el][list]] API for Emacs.

#+begin_src emacs-lisp
  (use-package dash
    :straight t
    :commands (-flatten -map --map --any? -contains?))
#+end_src
*** s
The long lost Emacs string manipulation [[https://github.com/magnars/s.el][library]].
#+begin_src emacs-lisp
  (use-package s
    :straight t
    :commands (s-match
               s-right
               s-split
               s-lines
               s-chop-prefix
               s-chop-suffix
               s-replace-all
               s-starts-with?
               s-suffix?))
#+end_src
*** org-mode
:PROPERTIES:
:VISIBILITY: folded
:END:
**** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight '(:type git :host github :branch "main" :depth 1 :repo "emacs-straight/org-mode")
    :config
    ;; Element cache makes it slow for some reason
    (setq org-element-cache-persistent nil)

    (add-to-list 'auto-mode-alist '("\\.orgtemplate\\'" . org-mode))

    ;; Copy link to clipboard on right click
    (define-key org-mouse-map (kbd "<mouse-3>")
                (lambda (event)
                  (interactive "e")
                  (goto-char (posn-point (event-start event)))
                  (let* ((context
                          (org-element-lineage (org-element-context) '(link) t))
                         (type (org-element-type context))
                         (value (org-element-property :value context)))
                    (cond
                     ((not type) (user-error "No link found"))
                     ((>= (point)
                          (save-excursion
                            (goto-char (org-element-property :end context))
                            (skip-chars-backward " \t")
                            (point)))
                      (user-error "No link found"))
                     ((eq type 'link) (hbournis/copy-to-clipboard (org-element-property :raw-link context)))
                     (t (user-error "No link found"))))))

    ;; (require 'ob-R)
    ;; (require 'ob-sql)

    (ignore-errors (require 'org-tempo))

    (setq org-src-fontify-natively t               ;; Use language's syntax highlighting in code blocks
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window     ;; Don't open new window when editing code blocks
          org-todo-keywords '((sequence "TODO(t)" "DOING(i!)" "WAITING(w@/!)" "SOMEDAY(s)" "|" "DONE(d!)" "CANCELED(c@)"))
          org-enforce-todo-dependencies t          ;; Parent can't be DONE until all children are

          org-startup-indented t                   ;; indent on startup
          org-indent-indentation-per-level 4       ;; indent each level by
          org-list-indent-offset 2                 ;; indent lists by 2
          org-display-inline-images t              ;; display images in org by default
          org-hide-emphasis-markers t              ;; hide bold, italics etc markers
          org-use-sub-superscripts nil
          org-tags-column (- (window-total-width)) ;; make tags align at right window width
          org-latex-compiler "xelatex"             ;; the only one working for greek (i think?)
          org-log-into-drawer t                    ;; save logs in the drawer of current item
          org-clock-into-drawer "CLOCKING"         ;; name the clock drawer clocking
          org-log-reschedule 'note          ;; take a note in the log when rescheduling
          org-blank-before-new-entry '((heading . t) (plain-list-item . auto))
          org-babel-do-load-languages
          '(org-babel-load-languages '((emacs-lisp . t)
                                      (ruby . t)
                                      (python . t)
                                      (haskell . t)
                                      (js . t)
                                      (shell . t)
                                      (R . t)
                                      (prolog . t)
                                      (clojurescript . t)
                                      (plantuml . t)
                                      (sql . t)))
          org-export-backends '(ascii
                               html
                               icalendar
                               latex
                               md
                               odt)
          org-modules '(ol-bbdb
                        ol-docview
                        ol-info
                        ol-w3m
                        ol-bibtex
                        org-protocol
                        org-collector
                        org-tempo)

          org-lowest-priority ?D
          org-default-priority ?D

          ;; custom colors for priorities
          org-priority-faces '((?A . (:foreground "red" :weight bold))
                               (?B . (:foreground "orange"))
                               (?C . (:foreground "yellow"))
                               (?D . (:foreground "green"))))

    (define-key org-mode-map (kbd "C-k") nil)

    ;; Show only the time when a note is added, instead of 'Note taken on..'
    (setq org-log-note-headings (assq-delete-all 'note org-log-note-headings))
    (add-to-list 'org-log-note-headings '(note . "%t"))

    ;; make ediff fold/unfold sections
    (defun f-ediff-org-showhide (buf command &rest cmdargs)
      "If buffer exists and is orgmode then execute command"
      (when buf
        (when (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
          (save-excursion (set-buffer buf) (apply command cmdargs)))))

    (defun f-ediff-org-unfold-tree-element ()
      "Unfold tree at diff location"
      (f-ediff-org-showhide ediff-buffer-A 'org-reveal)
      (f-ediff-org-showhide ediff-buffer-B 'org-reveal)
      (f-ediff-org-showhide ediff-buffer-C 'org-reveal))

    (defun f-ediff-org-fold-tree ()
      "Fold tree back to top level"
      (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)
      (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)
      (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1))

    (add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
    (add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
    )
#+END_SRC
**** Org-related packages
***** DISABLED org-bullets
Disabled on windows because it makes emacs extremely slow
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :config
    ;; Performance fix for windows
    ;; Source: https://github.com/sabof/org-bullets/issues/11#issuecomment-439228372
    (if IS-WINDOWS
        (setq inhibit-compacting-font-caches t))
    (setq org-bullets-bullet-list '("◉" "○" "✹" "◈" "⚇" "⚈" "⚉" "♁" "⊖" "⊗" "⊘"))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))
#+END_SRC
***** org-collector
#+BEGIN_SRC emacs-lisp
  ;; Load org-collector
  (add-to-list 'load-path "~/.emacs.d/lisp/org-collector")
#+END_SRC
***** org-fancy-priorities
Display org priorities as custom strings

#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :straight t
    :diminish
    :hook
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '((?A . "❗")
                                      (?B . "⬆")
                                      (?C . "⬇")
                                      (?D . "☕")
                                      (?1 . "❗")
                                      (?2 . "⮬")
                                      (?3 . "⮮")
                                      (?4 . "☠"))))
#+END_SRC
***** org-capture-vars
#+BEGIN_SRC emacs-lisp
  ;; Load org-capture-vars
  (add-to-list 'load-path "~/.emacs.d/lisp/org-capture-vars")
  (with-eval-after-load 'org-capture (require 'org-capture-vars))
#+END_SRC
***** org-cliplink
Pretty-copy links from the browser to org with title instead of just url

#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :straight t
    :config
    (global-set-key (kbd "C-c p b") 'org-cliplink))
#+END_SRC
***** org-agenda-property
Display org properties in the agenda buffer

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda-property
    :straight t)
#+END_SRC
***** org-reveal
[[https://github.com/yjwen/org-reveal][Presentations]]

Download reveal.js from [[https://revealjs.com/installation/#basic-setup][here]]. Set the org-reveal-root to the extracted folder (the root).

For code, swith to light theme before exporting, so that htmlize will use it on the code blocks.

You can also create speaker notes with a BEGIN_NOTES and END_NOTES
block. pressing "s" while on the presentation will create new browser window for notes

Use "#+ATTR_REVEAL: :frag t" to reveal parts of the page incrementally.

Some defaults:
#+begin_src
#+REVEAL_INIT_OPTIONS: margin: 0.1, minScale:0.2, maxScale:2.5, transition:'concave'
#+REVEAL_THEME: solarized
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by yjwen. </p>
#+REVEAL_PLUGINS: (notes)
#+REVEAL_TITLE_SLIDE: <h1 class="title">%t</h1><h2 class="author">%a</h2><h3 class="email">%e</h3>
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+end_src

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :straight t
    :config
    ;; Set the root
    ;; (setq org-reveal-root "file:///Users/<user>/reveal.js-master")

    ;; Used for using emacs theme to highligh code
    (use-package htmlize
      :straight t)
    )
#+END_SRC
***** org-kanban
#+begin_src emacs-lisp
  (use-package org-kanban
    :straight t
    :hook (org-after-todo-state-change . hbournis/update-kanban-block)
    :config
    (defun hbournis/update-kanban-block ()
      (if (org-find-dblock "kanban")
          (org-update-dblock))))
#+end_src

***** orgtbl-aggregate
aggregate tables
#+begin_src emacs-lisp
  (use-package orgtbl-aggregate
    :straight t)
#+end_src
***** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :straight t
    :after org
    :hook (org-mode . org-modern-mode)
    :hook (org-agenda-finalize . org-modern-agenda)
    :hook (org-mode . variable-pitch-mode)
    :custom-face
    (org-modern-todo ((t (:background "#C17C00"))))
    :config
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "↯"
     org-modern-star 'replace
     org-modern-replace-stars " "

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string "◀── now ─────────────────────────────────────────────────"))
#+end_src
**** Org custom functions
#+BEGIN_SRC emacs-lisp
  ;; display week numbers in org calendar
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil :height 0.7)
  (setq calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))

  ;; Used for the protocol link see below
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))

  ;; Keep inherited tags on archived headings.
  ;; source: https://orgmode.org/worg/org-hacks.html
  (defadvice org-archive-subtree
      (before add-inherited-tags-before-org-archive-subtree activate)
    "add inherited tags before org-archive-subtree"
    (org-set-tags (org-get-tags)))
#+END_SRC
**** Org Capture
#+BEGIN_SRC emacs-lisp
  (setq hbournis/org-capture-file
        (if WORK?
            hbournis/org-work-file
          hbournis/org-inbox-file))

  (defun hbournis/validate-bookmark-link (url bookmark-file)
    (let ((clipboard url))
      (unless (s-starts-with? "http" clipboard)
        (progn (message "Clipboard does not contain a link.") (org-capture-kill)))
      (if (--any?
           (-contains?
            `(,clipboard
              ,(if (s-suffix? "/" clipboard)
                   (s-chop-suffix "/" clipboard)
                 (concat clipboard "/")))
            it)
           (org-map-entries (lambda () (org-entry-get nil "URL")) "web_bookmarks" `(,bookmark-file)))
          (progn (message "Link already exists.") (org-capture-kill)))))

  (defun hbournis/extract-host (url)
    (s-chop-prefix "www." (url-host (url-generic-parse-url url))))
  (defun hbournis/org-tag-from-host (url)
    (s-replace-all '(("." . "_") ("-" . "_")) (hbournis/extract-host url)))

  (defun hbournis/org-capture-bookmark (bookmark-file)
    "Validate that the link does not already exist in bookmarks."
    (interactive)
    (hbournis/validate-bookmark-link (plist-get org-store-link-plist :link) bookmark-file)

    (goto-char (point-min))
    (re-search-forward "Web"))

  (defun hbournis/org-capture-bookmark-generic ()
    (hbournis/org-capture-bookmark hbournis/bookmarks-file))

  (defun hbournis/org-capture-bookmark-private ()
    (hbournis/org-capture-bookmark hbournis/private-bookmarks-file))

  ;; Bookmarks for Browser
  ;; Bookmark url: javascript: (() => { window.location.href = 'org-protocol://capture?' + new URLSearchParams({ template: 'l', url: window.location.href, title: document.title.replace(/[^a-zA-Z0-9-._~:/?#[\]@!$&'()*+,;=% ]/g, '') || window.location.href, body: window.getSelection() }); })();
  ;; Bookmark private url: javascript: (() => { window.location.href = 'org-protocol://capture?' + new URLSearchParams({ template: 'L', url: window.location.href, title: document.title.replace(/[^a-zA-Z0-9-._~:/?#[\]@!$&'()*+,;=% ]/g, '') || window.location.href, body: window.getSelection() }); })();
  ;; Copy to clipboard:  javascript: (() => { navigator.clipboard.writeText('org-protocol://capture?' + new URLSearchParams({ template: 'L', url: window.location.href, title: document.title.replace(/[^a-zA-Z0-9-._~:/?#[\]@!$&'()*+,;=% ]/g, '') || window.location.href, body: window.getSelection() })).then(() => { console.log('Text copied to clipboard:', text); }).catch(err => { console.error('Failed to copy text: ', err);});})();
  (setq org-capture-templates
        `(
          ("l" "Link" entry
           (file+function hbournis/bookmarks-file hbournis/org-capture-bookmark-generic)
           (file "~/.emacs.d/org-templates/bookmark.orgtemplate")
           :prepend t
           :empty-lines-after 1
           :immediate-finish t)
          ("L" "Private Link" entry
           (file+function hbournis/private-bookmarks-file hbournis/org-capture-bookmark-private)
           (file "~/.emacs.d/org-templates/bookmark.orgtemplate")
           :prepend t
           :empty-lines-after 1
           :immediate-finish t)
          ("b" "Book" entry
           (file+headline hbournis/org-book-file ,(format "%s" (format-time-string "%Y")))
           (file "~/.emacs.d/org-templates/book.orgtemplate") :prepend t)
          ("w" "Work Note" entry
           (file+olp+datetree hbournis/org-work-file "Notes")
           "** %U - %?")))
#+END_SRC
**** Org Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (seq-filter 'file-exists-p hbournis/org-agenda-files)
        org-agenda-span 14                       ;; org agenda shows 10 days
        org-agenda-start-on-weekday nil          ;; org agenda does not start from beggining of week
        org-agenda-start-day "-2d"               ;; org agenda starts 2 days before today
        org-deadline-warning-days 3              ;; Number of days before expiration that it shows in agenda
        org-agenda-window-setup "only-frame"     ;; open a new full screen frame for org agenda
        org-agenda-block-separator 32            ;; disable seperator between agenda sections
        agenda-label-work-tag "Check & Refile"
        agenda-label-inbox "Inbox"
        agenda-label-calendar "10 days"
        agenda-label-priority-a "High-Priority"
        agenda-label-priority-b "Mid-Priority"
        agenda-label-priority-c "Low-Priority"
        agenda-label-priority-d "Other Todos"
        org-agenda-custom-commands '(("c" "Startup Agenda"
                                      (
                                       (tags "-work+.*"
                                             ((org-agenda-files `(,hbournis/org-inbox-file))
                                              (org-agenda-overriding-header agenda-label-inbox)))
                                       (agenda ""
                                               ((org-agenda-overriding-header agenda-label-calendar)))
                                       (tags "PRIORITY=\"A\""
                                             ((org-agenda-files (-remove (apply-partially #'equal hbournis/org-inbox-file)
                                                                         org-agenda-files))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-a)))
                                       (tags "PRIORITY=\"B\""
                                             ((org-agenda-files (-remove (apply-partially #'equal hbournis/org-inbox-file)
                                                                         org-agenda-files))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-b)))
                                       (tags "PRIORITY=\"C\""
                                             ((org-agenda-files (-remove (apply-partially #'equal hbournis/org-inbox-file)
                                                                         org-agenda-files))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-c)))
                                       ))
                                     ("w" "Work Agenda"
                                      (
                                       (tags-todo "capture_notes"
                                                  ((org-agenda-files `(,hbournis/org-work-file))
                                                   (org-agenda-overriding-header agenda-label-work-tag)))
                                       (agenda ""
                                               ((org-agenda-files `(,hbournis/org-work-file))
                                                (org-agenda-overriding-header agenda-label-calendar)))
                                       (tags "-capture_notes+PRIORITY=\"A\""
                                             ((org-agenda-files `(,hbournis/org-work-file))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-a)))
                                       (tags "-capture_notes+PRIORITY=\"B\""
                                             ((org-agenda-files `(,hbournis/org-work-file))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-b)))
                                       (tags "-capture_notes+PRIORITY=\"C\""
                                             ((org-agenda-files `(,hbournis/org-work-file))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-c)))))))
#+END_SRC
**** DISABLED Org roam
#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (use-package emacsql-sqlite-builtin
      :straight '(:type built-in))
    (setq org-roam-database-connector 'sqlite-builtin)
    :commands (org-roam-buffer-toggle
               org-roam-node-find
               org-roam-node-insert
               org-roam-capture)
    :custom
    (org-roam-directory (file-truename "~/org-roam/"))
    :config
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))

    (setq org-roam-mode-sections
          (list #'org-roam-backlinks-section
                #'org-roam-reflinks-section
                #'org-roam-unlinked-references-section))
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    ;;(require 'org-roam-protocol)
    )
#+end_src

**** DISABLED org roam ui
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight t
    :commands (org-roam-ui-open)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t
          org-roam-ui-browser-function 'xwidget-webkit-browse-url))
#+end_src

*** evil-mode
:PROPERTIES:
:VISIBILITY: folded
:END:
**** evil
Vim emulation. It is extended with various packages that provide existing Vim
functionalities. Bellow is a list of the Emacs package with the functionality
it provides in parentheses:

- [[https://github.com/emacs-evil/evil-surround][Evil Surround]]          (surround.vim)
- [[https://github.com/emacs-evil/evil-surround][Evil Lion]]              (vim-lion)
- [[https://github.com/redguardtoo/evil-matchit][Evil Matchit]]           (matchit.vim)
- [[https://github.com/cofi/evil-numbers][Evil Numbers]]           (increment/decrement binary, octal, decimal and hex numbers)
- [[https://github.com/redguardtoo/evil-nerd-commenter][Evil NERD Commenter]]    (The NERD Commenter)
- [[https://github.com/ninrod/evil-string-inflection][Evil String inflection]] (Convert between camelCase, kebab-case, snake_case and UPPER_CASE)

Although Evil mode does a wonderful job of emulating Vim keybinginds when
editing files, in the rest of the Emacs modes (and there are a lot) I find
myself stuck with Emacs' keybindings. Fortunately, there are a number of
packages that aim to bring Vim-sensible keybindings to the rest of them.

I use [[https://github.com/Somelauw/evil-org-mode][evil-org-mode]] mainly for the Org Agenda keybindings and the great
context-aware functionality it adds to the <return> key. For example, if you are
on a list item, pressing it will add a new list item bellow, including a
checkbox, if it is a checklist.. I found the rest of the keybindings distracting.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :demand t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-undo-system 'undo-redo)

    (if (eq theme 'dark)
        (progn
          (setq evil-emacs-state-cursor    '("red" box)
                evil-normal-state-cursor   '("white" box)
                evil-visual-state-cursor   '("orange" box)
                evil-insert-state-cursor   '("cyan" box)
                evil-replace-state-cursor  '("red" box)
                evil-operator-state-cursor '("red" box))
          )
      (progn
        (setq evil-emacs-state-cursor    '("red" box)
              evil-normal-state-cursor   '("#1abc9c" box)
              evil-visual-state-cursor   '("orange" box)
              evil-insert-state-cursor   '("#9b59b6" box)
              evil-replace-state-cursor  '("red" box)
              evil-operator-state-cursor '("red" box))))
    :config
    (evil-mode t)
    ;; Scroll faster with C-e and C-y
    (define-key evil-normal-state-map "\C-e" (lambda () (interactive) (evil-scroll-line-down 2)))
    (define-key evil-normal-state-map "\C-y" (lambda () (interactive) (evil-scroll-line-up 2)))
    (evil-set-initial-state 'sqlite-mode 'emacs)

    ;; g h takes you to the previous heading and
    ;; g H takes you to one heading up
    (evil-define-key 'motion org-mode-map
      (kbd "%")  'evilmi-jump-items
      (kbd "gh") 'org-previous-visible-heading
      (kbd "gH") 'outline-up-heading
      (kbd "gn") 'org-next-visible-heading)

    (evil-define-minor-mode-key 'normal evil-mode "gl" 'evil-lion-left)
    (evil-define-minor-mode-key 'visual evil-mode "gl" 'evil-lion-left)

    ;; Save and quit ingoring mistakes from keeping shift pressed down
    (evil-ex-define-cmd "Q"  'evil-quit)
    (evil-ex-define-cmd "W"  'evil-write)
    (evil-ex-define-cmd "Wq" 'evil-save-and-close)
    (evil-ex-define-cmd "wQ" 'evil-save-and-close)
    (evil-ex-define-cmd "WQ" 'evil-save-and-close)

    ;; Does not replace clipboard copy with the text selected while in visual mode
    (fset 'evil-visual-update-x-selection 'ignore))
#+END_SRC

**** evil-collection
[[https://github.com/jojojames/evil-collection][Evil Collection]] aims to bring evil mode to every Emacs mode eventually. It has
keybindings for many modes, but I felt that I should enable it for a particular
mode only when it is needed.

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :demand t
    :init
    ;; check options in variable evil-collection--supported-modes
    (setq evil-collection-mode-list
          `(eshell
            calendar
            custom
            cus-theme
            deadgrep
            debbugs
            debug
            diff-mode
            dired
            doc-view
            edebug
            ediff
            eshell
            elfeed
            emms
            eval-sexp-fu
            flycheck
            ggtags
            git-timemachine
            help
            ibuffer
            image
            image+
            magit
            neotree
            info
            man
            org-roam
            (package-menu package)
            (pdf pdf-view)
            (term term ansi-term multi-term)
            vdiff
            vc-annotate
            vterm
            xref))
    :config
    (evil-collection-init))
#+END_SRC
**** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :straight t
    :commands (global-evil-surround-mode
               evil-surround-edit
               evil-Surround-edit
               evil-surround-region)
    :config
    (global-evil-surround-mode))
#+END_SRC
**** evil-lion
Indents to a similar level elements on similar lines e.g. all '=' in variable assignments
#+BEGIN_SRC emacs-lisp
  (use-package evil-lion
    :straight t
    :commands (evil-lion-left)
    :config
    (evil-lion-mode))
#+END_SRC
**** evil-matchit
Press % to move between opening and closing tag in any language
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :straight t
    :after evil
    :commands (evilmi-jump-items)
    :config
    (global-evil-matchit-mode t))
#+END_SRC
**** DISABLED evil-numbers
Increment / decrement binary, octal, decimal and hex literals
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :straight t
    :demand t
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
#+END_SRC
**** evil-nerd-commenter
Nerd commenter emulation
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :straight t
    :commands (evilnc-comment-operator
               evilnc-inner-commenter
               evilnc-outer-commenter
               evilnc-comment-or-uncomment-lines))
#+END_SRC
**** evil-org
Org mode key bindings for evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :straight t
    :after org
    :hook (org-mode . evil-org-mode)
    :diminish
    :config
    (evil-org-set-key-theme '(return))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
**** DISABLED evil-string-inflection
Changes case of variables (camelCase, kebab-case, snake_case and UPPER_CASE)
#+BEGIN_SRC emacs-lisp
  (use-package evil-string-inflection
    :straight t
    :demand t
    :after evil)
#+END_SRC
**** Greek Keybindings
Keybindings to allow moving around when writing in Greek

#+BEGIN_SRC emacs-lisp
  ;; Vim Movements
  (define-key evil-normal-state-map "κ" 'evil-previous-visual-line)
  (define-key evil-normal-state-map "ξ" 'evil-next-visual-line)
  (define-key evil-normal-state-map "Ξ" 'evil-join)
  (define-key evil-normal-state-map "λ" 'evil-forward-char)
  (define-key evil-normal-state-map "η" 'evil-backward-char)
  (define-key evil-normal-state-map "ς" 'evil-forward-word-begin)
  (define-key evil-normal-state-map "ε" 'evil-forward-word-end)
  (define-key evil-normal-state-map "β" 'evil-backward-word-end)
  (define-key evil-normal-state-map "ν" 'evil-search-next)
  (define-key evil-normal-state-map "Ν" 'evil-search-previous)
  (define-key evil-normal-state-map "γγ" 'evil-goto-first-line)
  (define-key evil-normal-state-map "Γ" 'evil-goto-line)

  ;; Vim Editing
  (define-key evil-normal-state-map "ι" 'evil-insert)
  (define-key evil-normal-state-map "Ι" 'evil-insert-line)
  (define-key evil-normal-state-map "θ" 'evil-undo)
  (define-key evil-normal-state-map "ω" 'evil-visual-char)
  (define-key evil-normal-state-map "Ω" 'evil-visual-line)
  (define-key evil-normal-state-map (kbd "C-ω") 'evil-visual-block)
  (define-key evil-normal-state-map (kbd "C-ο") 'evil-jump-backward)
  (define-key evil-normal-state-map (kbd "C-ρ") 'evil-redo)

  (define-key evil-normal-state-map "α" 'evil-append)
  (define-key evil-normal-state-map "Α" 'evil-append-line)
  (define-key evil-normal-state-map "ο" 'evil-open-below)
  (define-key evil-normal-state-map "Ο" 'evil-open-above)
  (define-key evil-normal-state-map "ρ" 'evil-replace)
  (define-key evil-normal-state-map "υ" 'evil-yank)
  (define-key evil-normal-state-map "Υ" 'evil-yank-line)
  (define-key evil-normal-state-map "δ" 'evil-org-delete)
  (define-key evil-normal-state-map "Δ" 'evil-delete-line)
  (define-key evil-normal-state-map "ψ" 'evil-change)
  (define-key evil-normal-state-map "Ψ" 'evil-change-line)
  (define-key evil-normal-state-map "χ" 'evil-org-delete-char)
  (define-key evil-normal-state-map "Χ" 'evil-org-delete-backward-char)
  (define-key evil-normal-state-map "π" 'evil-paste-after)
  (define-key evil-normal-state-map "Π" 'evil-paste-before)

  ;; Evil-ex commands
  (evil-ex-define-cmd "ς"  'evil-write)

  ;; Emacs Globals
  (define-key key-translation-map (kbd "C-ψ") (kbd "C-c"))
  (define-key key-translation-map (kbd "C-χ") (kbd "C-x"))
  (define-key key-translation-map (kbd "C-γ") (kbd "C-g"))
  (define-key key-translation-map (kbd "C-ε") (kbd "C-e"))
  (define-key key-translation-map (kbd "C-υ") (kbd "C-y"))
  (define-key key-translation-map (kbd "¨") (kbd ":"))
#+END_SRC
*** general.el
Improvement on evil-leader. Specify mutliple leaders.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :straight t
    :demand t
    :after evil
    :config
    (setq general-override-states '(emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator))
    (general-evil-setup t)
    (general-override-mode)

    ;; Fix general not working in *Messages* buffer
    ;; Source: https://github.com/noctuid/general.el/issues/493
    (general-with 'evil
      (general-add-hook 'post-command-hook
                        (lambda (&rest _)
                          (when (eq major-mode 'messages-buffer-mode)
                            (evil-normalize-keymaps)
                            t))
                        nil
                        nil
                        #'identity))

    (general-define-key
     :prefix "SPC"
     :keymaps 'override
     :states '(normal visual motion)
     :non-normal-prefix "C-SPC"
     :prefix-map 'basic-nav-prefix-map)

    (general-create-definer basic-nav-leader :keymaps 'basic-nav-prefix-map)
    (basic-nav-leader
      "" nil ; In order for Space to work everywhere. "" nil is used to unbind it first.
      "f"         'consult-buffer
      "F"         'consult-buffer-other-window
      "s"         'consult-ripgrep
      "x"         'execute-extended-command
      "e"         'lsp-execute-code-action
      "ESC"       'keyboard-quit
      "k"         'windmove-up
      "j"         'windmove-down
      "l"         'windmove-right
      "h"         'windmove-left
      "K"         'split-window-below
      "J"         'split-window-below-and-switch
      "H"         'split-window-right
      "L"         'split-window-right-and-switch
      "0"         'delete-window
      "1"         'delete-other-windows
      "d"         'delete-window
      "|"         'toggle-window-split
      "w"         'delete-window
      "W"         'delete-other-windows
      "/"         'dirvish-side
      "?"         'hydra-window-deluxe-custom/body
      "p"         'projectile-find-file
      "P"         'projectile-switch-project
      "="         'toggle-light-dark-theme
      "t"         'org-todo
      "ns"        'hbournis/create-scratch-buffer
      "c"         'hbournis/copy-filename-to-clipboard
      "RET"       'xref-find-definitions
      "g"         'hbournis/magit-hydra
      "of"        'org-roam-node-find
      "oi"        'org-roam-node-insert
      "ot"        'org-roam-buffer-toggle
      "og"        'org-roam-ui-open
      "<S-return>" (lambda () (interactive) (split-window-right-and-switch) (hbournis/generic-find-definition))
      "r"         'lsp-find-references
      "SPC"       'hbournis/open-create-main-org-file
      "a"         (lambda () (interactive) (hbournis/open-org-file hbournis/org-mobile-file))
      "!"         (lambda () (interactive) (load-file "~/.dotfiles/emacs.d.symlink/init.el"))
      "m"         (lambda () (interactive) (find-file "~/.dotfiles/emacs.d.symlink/init.org"))
      "i"         (lambda () (interactive) (hbournis/open-org-file hbournis/org-inbox-file))
      "z"         (lambda () (interactive) (hbournis/open-org-file hbournis/org-work-file)))

    (general-define-key
     :prefix "'" :keymaps 'override :states '(normal visual)
     :prefix-map 'extra-tools-prefix-map)

    (general-create-definer extra-tools-leader :keymaps 'extra-tools-prefix-map)
    (extra-tools-leader
      "`"   'hbournis/open-terminal
      "g"   'magit-status
      "/"   'evilnc-comment-or-uncomment-lines             ; Un/Comment current line
      "["   'sp-wrap-round
      "]"   'org-align-all-tags-right
      "\\"  'sp-unwrap-sexp
      "fn"  'flycheck-next-error
      "fp"  'flycheck-previous-error
      "fl"  'flycheck-list-errors
      "i"   'org-toggle-inline-images
      "l"   'cider-ns-refresh
      "d"   'hbournis/generic-open-doc
      "c"   'hbournis/generic-show-repl
      "tf"  'hbournis/generic-run-test-file
      "tt"  'hbournis/generic-run-test-at-point
      "ta"  'hbournis/generic-run-test-all
      "m"   'hbournis/toggle-modeline
      "*"   (lambda() (interactive) (forward-char 1) (insert " ⭐")))

    (general-define-key
     :prefix "' '" :keymaps 'override :states '(normal visual)
     :prefix-map 'extra-tools-alternate-prefix-map)

    (general-create-definer extra-tools-alternate-leader :keymaps 'extra-tools-alternate-prefix-map)
    (extra-tools-alternate-leader
      "lv"  'org-cliplink
      "lp"  'hbournis/insert-url-as-org-link
      "ll"  'hbournis/org-make-word-link-from-clipboard
      "lc"  'hbournis-position-to-kill-ring
      "c"   'org-capture
      "gt"  'git-timemachine-toggle
      "gr"  'git-gutter:revert-hunk
      "gn"  'git-gutter:next-hunk
      "gp"  'git-gutter:previous-hunk
      "gb"  'magit-blame-echo
      "gh"  'magit-log-buffer-file
      "gm"  (lambda () (interactive) (magit-find-file-other-window "master" (format "%s" buffer-file-name)))
      "rf"  'rubocopfmt
      "rb"  'ruby-toggle-block
      "rr"  'projectile-rails-goto-routes
      "rt"  'projectile-rails-find-current-spec
      ))
#+END_SRC
*** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :commands (magit-status magit-blame-echo magit-log-buffer-file)
    :config
    (with-eval-after-load 'magit (evil-collection-magit-init))

    (evil-define-minor-mode-key 'normal 'magit-blame-mode
      (kbd "<return>")  'magit-show-commit)

    (transient-append-suffix 'magit-push "-u"
      '(1 "=s" "Skip gitlab pipeline" "--push-option=ci.skip"))

    (setq magit-blame-echo-style 'headings)

    ;; Source: https://github.com/doomemacs/doomemacs/commit/641cef98480baf7af29eeaa6825044a1c40846d4
    (defun +magit|update-vc ()
      "Update vc in all verson-controlled buffers when magit refreshes."
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (vc-refresh-state))))

    (add-hook 'magit-post-refresh-hook #'+magit|update-vc))
#+END_SRC
*** smerge-mode
Easily resolve git conflicts [[https://github.com/alphapapa/unpackaged.el#smerge-mode][Source]]

#+BEGIN_SRC emacs-lisp
  (use-package smerge-mode
    :after hydra
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (unpackaged/smerge-hydra/body))))
    )
#+END_SRC
*** savehist
#+begin_src emacs-lisp
  (use-package savehist
    :straight '(:type built-in)
    :custom
    (savehist-save-minibuffer-history nil)
    (savehist-autosave-interval nil)
    (savehist-file "~/.emacs.d/etc/savehist")
    (savehist-ignored-variables '(evil-jumps-history projectile-project-command-history))
    (savehist-additional-variables '(corfu-history)))
#+end_src
*** flycheck
Syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :diminish
    :defer 3
    :config
    (setq flycheck-idle-change-delay 1.0
          flycheck-buffer-switch-check-intermediate-buffers t
          flycheck-display-errors-delay 0.25)

    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers '(javascript-jshint json-jsonlint scss scss-lint ruby-reek))
                  flycheck-temp-prefix ".flycheck")

    ;; Set flycheck to only check when saving a file or changin a major mode
    ;; Done mainly for performance on windows
    (if IS-WINDOWS
        (setq flycheck-check-syntax-automatically '(save mode-enable)))

    (if (not (eq theme 'dark))
        (set-face-attribute 'flycheck-error-list-error nil :foreground "blue" ))

    ;; Use local eslint if available https://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
    ;; (defun my/use-eslint-from-node-modules ()
    ;;   (let* ((root (locate-dominating-file
    ;;                 (or (buffer-file-name) default-directory)
    ;;                 "node_modules"))
    ;;          (eslint (and root
    ;;                       (expand-file-name "node_modules/eslint/bin/eslint.js"
    ;;                                         root))))
    ;;     (when (and eslint (file-executable-p eslint))
    ;;       (setq-local flycheck-javascript-eslint-executable eslint))))
    ;; (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

    (global-flycheck-mode))
#+END_SRC
*** UNIX_ONLY flyspell
Spell checking. Needs the aspell program installed.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish
    :config
    (setq ispell-program-name "hunspell"))
#+END_SRC
*** vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :straight t
    :init
    (vertico-mode)

    (define-key vertico-map [escape] 'abort-minibuffers)
    (define-key vertico-map (kbd "<S-return>") 'vertico-exit-input)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)

    ;; (set-face-attribute 'vertico-current nil :background "#7a33b3")

    ;; Configure directory extension.
    (use-package vertico-directory
      :straight nil
      :load-path "straight/build/vertico/extensions"
      :after vertico
      ;; More convenient directory navigation commands
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
    )

  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)

    ;; For confu
    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (text-mode-ispell-word-completion nil)
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src

*** marginalia
#+begin_src emacs-lisp
(use-package marginalia
    :straight t
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
*** orderless
#+begin_src emacs-lisp
  (use-package orderless
      :straight t
      :init
      ;; Configure a custom style dispatcher (see the Consult wiki)
      ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
      ;;       orderless-component-separator #'orderless-escapable-split-on-space)
      (setq completion-styles '(orderless basic)
            completion-category-defaults nil
            completion-category-overrides '((file (styles partial-completion))
                                            (eglot (styles orderless))
                                            (eglot-capf (styles orderless)))))
#+end_src

*** consult
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :commands (consult-ripgrep consult-buffer consult-buffer-other-window)
    :config
    (setq consult-preview-key nil
          consult-buffer-sources '(consult--source-buffer consult--source-bookmark))

    (consult-customize
     consult-buffer :group nil)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src
*** corfu
#+begin_src emacs-lisp
  (defun hbournis/set-corfu-terminal-for-frame (&optional frame)
    (corfu-terminal-mode (if (display-graphic-p frame) -1 1)))

  (use-package corfu
    :straight t
    :hook ((java-mode . corfu-mode)
           (emacs-lisp-mode . corfu-mode))
    :bind (("C-;" . corfu-insert)
           :map corfu-map
           ("TAB" . corfu-next)
           ([tab] . corfu-next)
           ("S-TAB" . corfu-previous)
           ([backtab] . corfu-previous))
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-auto-delay 0.5)
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    ;; :init
    ;; (global-corfu-mode)
    :config
    (keymap-unset corfu-map "RET")
    (corfu-history-mode)
    (savehist-mode))

  (use-package corfu-terminal
    :straight t
    :after corfu
    :defer
    :init
    (add-hook 'corfu-mode-hook 'hbournis/set-corfu-terminal-for-frame))

  (use-package cape
    :straight t
    :defer t
    :commands (cape-dabbrev cape-file cape-elisp-block)
    :bind ("C-c p" . cape-prefix-map)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src
*** wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :straight t
    :commands (wgrep-change-to-wgrep-mode))
#+end_src
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :diminish " P"
    :commands (projectile-switch-project)
    :config
    (setq projectile-globally-ignored-directories (append projectile-globally-ignored-directories '(".stversions" "vendor")))

    (if IS-WINDOWS
        (setq projectile-indexing-method 'alien))

    (projectile-global-mode))
#+END_SRC
*** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-prefer-flymake nil
          lsp-headerline-breadcrumb-enable nil
          lsp-completion-provider :none
          lsp-modeline-diagnostics-enable t
          lsp-idle-delay 1.000 ; performance
          lsp-log-io nil  ; if set to true can cause a performance hit
          lsp-eslint-run "onSave"
          lsp-eslint-auto-fix-on-save nil
          lsp-typescript-preferences-import-module-specifier "relative"
          lsp-yaml-schemas '((Kubernetes . ["/k8s/**/*.yml"]))
          lsp-ruby-lsp-use-bundler nil
          lsp-disabled-clients '(rubocop-ls)
          lsp-eslint-download-url "https://github.com/microsoft/vscode-eslint/releases/download/3.0.5-alpha.1/vscode-eslint-3.0.5.vsix?raw=true")

    (use-package lsp-ui
      :straight t
      :commands lsp-ui-mode
      :config
      (setq lsp-ui-doc-enable nil
            lsp-ui-imenu-enable nil
            lsp-ui-peek-enable nil
            lsp-ui-sideline-enable nil
            lsp-line-ignore-duplicate t))

    (use-package consult-lsp
      :straight t
      :after lsp-mode
      :config
      (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols)))
#+end_src

*** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :custom
    (eglot-events-buffer-config '(:size 0 :format full)) ; performance improvement
    :commands eglot eglot-ensure)

  (use-package flycheck-eglot
    :straight t
    :after (flycheck eglot)
    :custom (flycheck-eglot-exclusive nil)
    :hook (eglot-managed-mode . flycheck-eglot-mode))

  (use-package eglot-booster
    :straight '(:type git :host github :repo "jdtsmith/eglot-booster")
    :after eglot
    :hook (eglot-connect . eglot-booster-mode)
    :config
    ;; use native json since it is faster in emacs 30
    (setq eglot-booster-io-only t))
#+end_src
*** tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :straight t
    :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode)
    :config
    (setq tree-sitter-debug-jump-buttons t
          tree-sitter-debug-highlight-jump-region t))

  (use-package tree-sitter-langs
    :straight t
    :after tree-sitter)

  (use-package treesit-auto
    :straight t
    :defer 1
    :custom
    (treesit-auto-install 'prompt)
    (treesit-auto-langs '(yaml javascript typescript tsx html))
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
*** DISABLED dap-mode
debugger

Not working currently

#+begin_src emacs-lisp
  (use-package dap-mode
    :straight t
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t)
    (dap-tooltip-mode 1)
    (tooltip-mode 1)
    (add-hook 'dap-stopped-hook (lambda (arg) (call-interactively #'dap-hydra)))
    (dap-register-debug-template
     "localhost:5005"
     (list :type "java"
           :request "attach"
           :hostName "localhost"
           :port 5005)
     )
     (dap-auto-configure-mode))

  (use-package dap-java
    :straight nil
    :after (lsp-java)
    :bind
    (("C-c R" . dap-java-run-test-class)
     ("C-c d" . dap-java-debug-test-method)
     ("C-c r" . dap-java-run-test-method))
    :config
    (global-set-key (kbd "<f7>") 'dap-step-in)
    (global-set-key (kbd "<f8>") 'dap-next)
    (global-set-key (kbd "<f9>") 'dap-continue)
    )
#+end_src
*** DISABLED editorconfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :straight t
    :diminish
    :config
    (editorconfig-mode 1))
#+END_SRC
*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :straight t
    :hook ((web-mode
            java-mode)
           . smartparens-mode)
    :hook ((sh-mode
            emacs-lisp-mode)
           . smartparens-strict-mode)
    :diminish
    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode t))

  (use-package evil-smartparens
    :straight t
    :after smartparens
    :diminish
    :init
    (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+END_SRC
*** windmove

#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :straight '(:type built-in)
    :commands (windmove-up windmove-down windmove-left windmove-right))
#+END_SRC

*** DISABLED desktop
Save emacs session

#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :straight t
    :commands (projectile-switch-project)
    :config
    (setq desktop-path '("~/.emacs.d/etc/")
          desktop-dirname "~/.emacs.d/etc/"
          desktop-base-file-name "emacs-desktop"
          desktop-globals-to-save
          (append '((extended-command-history . 50)
                    (file-name-history . 400)
                    (grep-history . 50)
                    (compile-history . 50)
                    (minibuffer-history . 100)
                    (query-replace-history . 100)
                    (read-expression-history . 100)
                    (regexp-history . 100)
                    (regexp-search-ring . 100)
                    (search-ring . 50)
                    (shell-command-history . 50)
                    tags-file-name
                    register-alist)))
    (desktop-save-mode t))
#+END_SRC
*** tab-bar-mode
#+begin_src emacs-lisp
  (setq tab-bar-new-button-show nil
        tab-bar-show nil
        tab-bar-format '(tab-bar-format-tabs)
        tab-bar-close-button-show nil)

  (defun hbournis/tab-exists-p (name)
    (member name (mapcar (lambda (tab) (alist-get 'name tab)) (tab-bar-tabs))))

  (tab-bar-mode)
  (tab-bar-rename-tab "1")

  (mapcar (lambda (tab-name)
            (unless (hbournis/tab-exists-p tab-name)
              (progn
                (tab-bar-new-tab)
                (tab-bar-rename-tab tab-name))))
          '("2" "3"))

  ;; (tab-bar-new-tab)
  ;; (tab-bar-rename-tab "3")
  (tab-bar-switch-to-tab "1")

  (global-set-key   (kbd "C-1")  (lambda () (interactive) (hbournis/switch-to-or-create-tab "1")))
  (global-set-key   (kbd "C-2")  (lambda () (interactive) (hbournis/switch-to-or-create-tab "2")))
  (global-set-key   (kbd "C-3")  (lambda () (interactive) (hbournis/switch-to-or-create-tab "3")))
#+end_src
*** git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :straight t
    :defer 3
    :diminish
    :config
    (setq git-gutter:update-interval 2
          git-gutter:hide-gutter t)
    (global-git-gutter-mode t))
#+END_SRC
*** highlight-indentation
#+begin_src emacs-lisp
  (use-package highlight-indentation
    :straight t
    :hook (yaml-mode . highlight-indentation-current-column-mode))
#+end_src
*** which-key
Display the keys available after pressing C-x for example.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :diminish
    :config
    ;;(setq which-key-idle-delay 0.2)
    ;;(which-key-setup-side-window-right-bottom)
    (which-key-mode))
#+END_SRC
*** DISABLED dtrt-indent
guesses the correct indentation

#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :straight t
    :hook (diminish 'dtrt-indent-mode)
    :config
    (dtrt-indent-mode t))

  ;; (add-hook 'prog-mode-hook #'(lambda ()
  ;;                               (dtrt-indent-mode)
  ;;                               (dtrt-indent-adapt)))
#+END_SRC
*** rainbow-mode
shows the color of hex color codes as their background

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :straight t
    :diminish
    :config
    ;; enable it by default in org mode
    ;; (defun rainbow-mode-hook ()
      ;; (rainbow-mode t))
    ;; (add-hook 'org-mode-hook 'rainbow-mode-hook)
    )
#+END_SRC
*** DISABLED diminish
hide specific modes from the modeline

#+begIN_SRC emacs-lisp
  (use-package diminish
    :straight t
    :config
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))

    (diminish 'auto-fill-function)
    (diminish 'auto-revert-mode)
    (diminish 'eldoc-mode))
#+END_SRC
*** exec-path-from-shell
Get environment variables from the shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :demand t
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
*** dirvish
Improved dired and ranger [[https://github.com/alexluigit/dirvish][replacement]].

#+begin_src emacs-lisp
  (use-package dired
    :straight '(:type built-in)
    :commands (dired-jump
               dired-up-directory
               dired-next-line
               dired-previous-line
               dired-find-file
               dired-do-copy
               dired-do-delete
               dired-create-directory))

  (use-package dired-x
    :straight '(:type built-in)
    :hook (dired-mode . dired-omit-mode)
    :config
    (setq dired-omit-verbose nil
          dired-omit-files (concat dired-omit-files "\\|^\\.DS_Store\\'")))

  (use-package dirvish
    :straight t
    :commands (dired--find-entry dirvish-dired-noselect-a)
    :init
    ;; HACK from doomemacs for lazy load
    (advice-add #'dired--find-file :override #'dirvish--find-entry)
    (advice-add #'dired-noselect :around #'dirvish-dired-noselect-a)
    :bind (:map global-map ([f8] . dirvish-side))
    :config
    (dirvish-override-dired-mode)
    (dirvish-side-follow-mode)
    (setq dirvish-mode-line-format '(:left
                                     (sort file-time " " symlink)
                                     :right
                                     (omit yank index))
          dirvish-attributes '(file-size)
          dirvish-side-attributes nil
          delete-by-moving-to-trash nil
          dired-listing-switches "-l --almost-all --human-readable --group-directories-first --no-group")

    ;; (set-face-attribute 'dirvish-hl-line nil :background "#7a33b3")

    (evil-collection-define-key 'normal 'dirvish-mode-map
      "q"   'dirvish-quit
      "."   'dirvish-layout-toggle
      "h"   'dired-up-directory
      "j"   'dired-next-line
      "k"   'dired-previous-line
      "l"   'dired-find-file
      "a"   'dirvish-quick-access
      "f"   'dirvish-fd
      "s"   'dirvish-quicksort
      "y"   'dirvish-yank-menu
      "Y"   'dired-do-copy
      "d"   'dired-do-delete
      "m"   'dirvish-yank-menu
      "M"   'dired-do-rename
      "t"   'hbournis/dired-toggle-mark
      "<S-return>" 'dired-find-file-other-window
      [tab] 'dirvish-subtree-toggle
      "gh"  'dirvish-subtree-up
      "cd"  'dired-create-directory
      "cf"  'hbournis/dired-create-file
      "ww"  'wdired-change-to-wdired-mode))

  (use-package tramp
    :straight '(:type built-in)
    :config
    ;; Enable full-featured Dirvish over TRAMP on certain connections
    ;; https://www.gnu.org/software/tramp/#Improving-performance-of-asynchronous-remote-processes-1.
    (add-to-list 'tramp-connection-properties
                 (list (regexp-quote "/ssh:YOUR_HOSTNAME:")
                       "direct-async-process" t))
    ;; Tips to speed up connections
    (setq tramp-verbose 0)
    (setq tramp-chunksize 2000)
    (setq tramp-use-ssh-controlmaster-options nil))
#+end_src
*** DISABLED pdf-tools
Disabled for now because it requires extra packages to be installed in the
system in order to work.
#+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :straight t
      :config
      (pdf-tools-install))
#+END_SRC
*** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :straight t
    :commands (git-timemachine-toggle)
    :config
    (evil-define-minor-mode-key 'normal 'git-timemachine-mode
      (kbd "<return>")  'git-timemachine-show-commit))
#+END_SRC
*** dumb-jumb
#+begin_src emacs-lisp
  (use-package dumb-jump
    :straight t
    :commands (dumb-jump-go dumb-jump-result-follow)
    :init
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    :config
    (setq dumb-jump-prefer-searcher 'rg
          dumb-jump-aggressive nil
          dumb-jump-selector 'popup))
#+end_src
*** zoxide
#+begin_src emacs-lisp
  (use-package zoxide
    :straight t
    :init
    (evil-define-key 'normal 'global
      "gz"   'dired-jump-with-zoxide)
    :commands (zoxide-open-with))

  (defun dired-jump-with-zoxide (&optional other-window)
    (interactive "P")
    (zoxide-open-with nil (lambda (file) (dired-jump other-window file)) t))
#+end_src
*** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :straight t
    :config
    ;; (require 'hydra-examples)
    (global-set-key (kbd "M-#") 'hydra-windows/body))
#+END_SRC
*** Docker
**** DISABLED docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :straight t
    :config
    (setenv "DOCKER_TLS_VERIFY" "1")
    (setenv "DOCKER_HOST" "tcp://10.11.12.13:2376")
    (setenv "DOCKER_CERT_PATH" "/Users/foo/.docker/machine/machines/box")
    (setenv "DOCKER_MACHINE_NAME" "box"))
#+END_SRC
**** NOT_WINDOWS dockerfile-mode
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC
**** NOT_WINDOWS docker-compose-mode
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :straight t)
#+END_SRC
*** restclient.el
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :straight t
    :mode (("\\.rest\\'" . restclient-mode))
    :hook (restclient-mode . yas-minor-mode)
    :config
    ;; show response in fundamental mode only to speed it up
    (setq restclient-response-size-threshold 0.00001))
#+END_SRC
*** websocket
#+begin_src emacs-lisp
  (use-package websocket
    :straight t)
#+end_src
*** DISABLED eredis
Redis client
#+begin_src emacs-lisp
  (use-package eredis
    :straight t
    :defer t)
#+end_src
*** yasnippet
[[https://github.com/AndreaCrotti/yasnippet-snippets][Snippets]]

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :diminish yas-minor-mode
    :commands (yas-minor-mode-on
               yas-expand
               yas-expand-snippet
               yas-lookup-snippet
               yas-insert-snippet
               yas-new-snippet
               yas-visit-snippet-file
               yas-activate-extra-mode
               yas-deactivate-extra-mode
               yas-maybe-expand-abbrev-key-filter)
    :hook (emacs-lisp-mode . yas-minor-mode)
    :init
    (defvar yas-verbosity 2)
    :config
    (define-key evil-insert-state-map "\C-j" 'yas-expand)
    (yas-reload-all))

  (use-package yasnippet-snippets
    :straight t)
#+END_SRC
*** olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :straight t
    :hook (org-mode . olivetti-mode)
    :config
    (setq-default olivetti-body-width 110)
    (setq-default olivetti-hide-mode-line t))
#+END_SRC
*** DISABLED nswbuff
Go to next/previous buffer in a project-aware context

#+begin_src emacs-lisp
  (use-package nswbuff
    :straight t
    :config
    (setq nswbuff-buffer-list-function #'nswbuff-projectile-buffer-list
          nswbuff-clear-delay 0
          nswbuff-exclude-buffer-regexps '("^ .*" "^\\*.*\\*")))

#+end_src
*** aggressive-indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :custom
    (aggressive-indent-sit-for-time 0.2)
    :config
    ;; (global-aggressive-indent-mode t)
    ;; (add-to-list 'aggressive-indent-excluded-modes '(emacs-lisp-mode web-mode typescript-mode sql-mode python-mode))
    )
#+end_src
*** deadgrep
#+begin_src emacs-lisp
  (use-package deadgrep
    :straight t
    :commands deadgrep
    :bind (("<f5>" . deadgrep)))
#+end_src
*** DISABLED itail
see logs easily

#+begin_src emacs-lisp
  (use-package itail
    :straight t
    :config
    (defun hbournis/tail-file-at-point ()
      "Run itail on the current file in dired."
      (interactive)
      (let ((file-path (dirvish-copy-file-path)))
        (itail file-path))))
#+end_src
*** DISABLED hledger
#+begin_src emacs-lisp
  (use-package hledger-mode
    :straight t
    :mode
    (("\\.hledger\\'" . hledger-mode))
    :config
    ;; Provide the path to you journal file.
    ;; The default location is too opinionated.
    ;; (setq hledger-jfile "/Users/....hledger.journal")

    ;; (add-to-list 'company-backends 'hledger-company)
    )
#+end_src

*** WINDOWS_ONLY eat (emulate a terminal)
#+begin_src emacs-lisp
  (use-package eat
    :straight t
    :commands (eat eshell)
    :config
    ;;(evil-set-initial-state 'eat-mode 'emacs)
    (setq eat-kill-buffer-on-exit t
          eat-enable-mouse t
          eshell-visual-commands '()
          eat-term-name "xterm-256color")

    (eat-eshell-mode))
#+end_src

*** UNIX_ONLY vterm
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :commands (vterm vterm-other-window)
    :custom (vterm-kill-buffer-on-exit t))
#+end_src
*** gptel
#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :commands (gptel gptel-menu gptel-send)
    :config
    (setq gptel-log-level 'info
          gptel-default-mode 'org-mode)

    (if (boundp 'gptel-local)
        (funcall gptel-local)))
#+end_src
*** fireplace
#+begin_src emacs-lisp
(use-package fireplace
  :straight t)
#+end_src

*** my-hydras
#+begin_src emacs-lisp
  (use-package my-hydras
    :straight '(:type built-in)
    :demand t
    :load-path "lisp/my-hydras")
#+end_src
*** pomidor
#+begin_src emacs-lisp
  (use-package pomidor
    ; :bind (("<f12>" . pomidor))
    :hook (pomidor-mode . (lambda ()
                            (display-line-numbers-mode -1) ; Emacs 26.1+
                            (setq left-fringe-width 0 right-fringe-width 0)
                            (setq left-margin-width 2 right-margin-width 0)
                            ;; force fringe update
                            (set-window-buffer nil (current-buffer))))
    :config (setq pomidor-sound-tick nil
                  pomidor-sound-tack nil
                  pomidor-play-sound-file (lambda (file)
                                            (start-process "my-pomidor-play-sound"
                                                           nil
                                                           "say" "ding"))))
#+end_src
** Programming Language Specific
*** File Formats
**** JSON
#+begin_src emacs-lisp
  (use-package jsonian
    :straight t
    :custom
    (jsonian-no-so-long-mode)
    :config
    (evil-define-key '(normal visual) jsonian-mode-map
      "gh" 'jsonian-enclosing-item))
#+end_src
**** CSV
#+begin_src emacs-lisp
  (use-package csv-mode
    :straight t)
#+end_src
**** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :hook (markdown-mode . flyspell-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
**** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode
    (("\\.yml?\\'" . yaml-mode)
     ("\\.yaml\\'" . yaml-mode))
    :hook
    ((yaml-mode . display-line-numbers-mode)
    (yaml-mode . tree-sitter-mode))
    :config
    ;;  Unlike python-mode, this mode follows the Emacs convention of not
    ;; binding the ENTER key to `newline-and-indent'.  To get this
    ;; behavior, add the key definition to `yaml-mode-hook':
    (add-hook 'yaml-mode-hook
              #'(lambda ()
                  (define-key yaml-mode-map "\C-m" 'newline-and-indent))))

  (use-package yaml-pro
    :straight t
    :after yaml-mode
    :hook ((yaml-mode . yaml-pro-ts-mode))
    :bind (:map yaml-pro-ts-mode-map
                ("M-<right>" . 'yaml-pro-ts-indent-subtree)
                ("M-<left>" . 'yaml-pro-ts-unindent-subtree)
                ("M-<up>" . 'yaml-pro-ts-move-subtree-up)
                ("M-<down>" . 'yaml-pro-ts-move-subtree-down))
    :config
    (evil-define-key '(normal motion) yaml-pro-ts-mode-map
      "gH" 'yaml-pro-ts-up-level
      "gh" 'yaml-pro-ts-up-level
      "gn" 'yaml-pro-ts-next-subtree
      "gp" 'yaml-pro-ts-prev-subtree))
#+END_SRC
*** HTML/CSS
**** html-ts-mode
#+begin_src emacs-lisp
  (use-package html-ts-mode
    :straight nil
    :hook
    (html-ts-mode . lsp)
    (html-ts-mode . yas-minor-mode)
    (html-ts-mode . corfu-mode))
#+end_src
**** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :straight t
    :init
    (define-derived-mode astro-mode web-mode "astro")
    :mode
    (("\\.tsx\\'" . web-mode)
     ("\\.vue\\'" . web-mode)
     ("\\.jsx\\'" . web-mode)
     ("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.astro\\'" . astro-mode)
     ("\\.djhtml\\'" . web-mode))
    :hook
    (web-mode . display-line-numbers-mode)
    (html-mode . display-line-numbers-mode)
    (astro-mode . lsp)
    :config
    (setq web-mode-enable-css-colorization t
          web-mode-enable-auto-pairing t
          web-mode-enable-comment-keywords t
          web-mode-enable-current-element-highlight t
          web-mode-enable-auto-indentation nil

          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-block-padding 2
          web-mode-comment-style 2))
#+END_SRC

**** DISABLED emmet-mode
Use C-j to expand.

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :straight t
    :config
    ;; Autostart on any markup modes and CSS
    (define-key emmet-mode-keymap [tab] 'emmet-expand-line)
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC
**** DISABLED Improving the JSX syntax-hightlighting in web-mode
I don't even remember what this is

#+BEGIN_SRC emacs-lisp
;; for better jsx syntax-highlighting in web-mode
;; - courtesy of Patrick @halbtuerke
(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
    (let ((web-mode-enable-part-face nil))
      ad-do-it)
    ad-do-it))
#+END_SRC
**** DISABLED haml-mode
#+begin_src emacs-lisp
  (use-package haml-mode
    :straight t
    :hook
    (haml-mode . display-line-numbers-mode)
    :config
    (add-to-list 'auto-mode-alist '("\\.hamlc\\'" . haml-mode)))
#+end_src
*** JavaScript
Some guides:
- https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html
- https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html

**** js-mode
#+begin_src emacs-lisp
  (use-package js2-mode
    :straight t
    :mode (("\\.js[mx]?\\'" . js-ts-mode))
    :hook
    (js-ts-mode . js2-mode)
    (js-ts-mode . display-line-numbers-mode)
    (js-ts-mode . lsp-deferred)
    (js-ts-mode . corfu-mode)
    (js-ts-mode . smartparens-strict-mode)
    (js-ts-mode . yas-minor-mode)
    :config
    (setq js-indent-level 2
          js-jsx-indent-level 2
          js-ts-mode-hook js-mode-hook))
#+end_src

**** typescript-mode
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :straight t
    :hook
    ((typescript-ts-mode tsx-ts-mode) . display-line-numbers-mode)
    ((typescript-ts-mode tsx-ts-mode) . lsp-deferred)
    ((typescript-ts-mode tsx-ts-mode) . corfu-mode)
    ((typescript-ts-mode tsx-ts-mode) . smartparens-strict-mode)
    ((typescript-ts-mode tsx-ts-mode) . yas-minor-mode)
    :config
    ;; (add-to-list 'aggressive-indent-excluded-modes '(typescript-ts-mode))
    (setq typescript-ts-mode-hook typescript-mode-hook
          typescript-indent-level 2))
#+END_SRC

**** nodejs-repl
#+begin_src emacs-lisp
  (use-package nodejs-repl
    :straight t
    :hook (js-ts-mode . nodejs-repl-minor-mode))
#+end_src
**** DISABLED jest-test-mode
#+begin_src emacs-lisp
  (use-package jest-test-mode
    :ensure t
    :defer t
    :commands jest-test-mode
    :hook (typescript-mode)
    :config
    (setq jest-test-command-string "pnpm %s exec jest %s --verbose --detectOpenHandles %s"))
#+end_src
**** DISABLED mocha
Customized for jest [[https://github.com/scottaj/mocha.el/issues/3#issuecomment-318919735][Source]]

#+BEGIN_SRC emacs-lisp
  (use-package mocha
    :straight t
    :commands (mocha-test-project
               mocha-debug-project
               mocha-test-file
               mocha-debug-file
               mocha-test-at-point
               mocha-debug-at-point)
    :config
    ;; Clear up stray ansi escape sequences.
    (defvar jj*--mocha-ansi-escape-sequences
      ;; https://emacs.stackexchange.com/questions/18457/stripping-stray-ansi-escape-sequences-from-eshell
      (rx (or
           "^[\\[[0-9]+[a-z]"
           "�[1A"
           "�[999D")))

    (defun jj*--mocha-compilation-filter ()
      "Filter function for compilation output."
      (ansi-color-apply-on-region compilation-filter-start (point-max))
      (save-excursion
        (goto-char compilation-filter-start)
        (while (re-search-forward jj*--mocha-ansi-escape-sequences nil t)
          (replace-match ""))))

    (advice-add 'mocha-compilation-filter :override 'jj*--mocha-compilation-filter)

    ;; https://github.com/scottaj/mocha.el/issues/3
    (defcustom mocha-jest-command "node_modules/jest/bin/jest.js --colors"
      "The path to the jest command to run."
      :type 'string
      :group 'mocha)

    (defun mocha-generate-command--jest-command (debug &optional filename testname)
      "Generate a command to run the test suite with jest.
  If DEBUG is true, then make this a debug command.
  If FILENAME is specified run just that file otherwise run
  MOCHA-PROJECT-TEST-DIRECTORY.
  IF TESTNAME is specified run jest with a pattern for just that test."
      (let ((target (if testname (concat " --testNamePattern \"" testname "\"") ""))
            (path (if (or filename mocha-project-test-directory)
                      (concat " --testPathPattern \""
                              (if filename filename mocha-project-test-directory)
                              "\"" " --config=\"jest.config.ts\"")
                    ""))
            (node-command
             (concat mocha-which-node
                     (if debug (concat " --debug=" mocha-debug-port) ""))))
        (concat node-command " "
                mocha-jest-command
                target
                path)))

    (advice-add 'mocha-generate-command
                :override 'mocha-generate-command--jest-command))
#+END_SRC
**** DISABLED svelte
#+begin_src emacs-lisp
  (use-package svelte-mode
    :straight t
    :hook ((svelte-mode . lsp-deferred)
           (svelte-mode . smartparens-strict-mode))
    :mode (("\\.svelte\\'" . svelte-mode)))
#+end_src
*** PureScript
**** DISABLED purescript-mode
#+BEGIN_SRC emacs-lisp
  (use-package purescript-mode
    :straight t
    :hook (purescript-mode . display-line-numbers-mode))
#+END_SRC
**** DISABLED psc-ide
#+BEGIN_SRC emacs-lisp
  (use-package psc-ide
    :straight t
    :config
    (add-hook 'purescript-mode-hook
              (lambda ()
                (psc-ide-mode)
                ;; (company-mode)
                (flycheck-mode)
                (turn-on-purescript-indentation))))
#+END_SRC
*** Java
**** NOT_WINDOWS java-mode (CC mode)
#+BEGIN_SRC emacs-lisp
  (defun hbournis/java-style-hook ()
    (setq indent-tabs-mode nil
          c-basic-offset 4
          default-tab-width 4
          c-default-style "linux"))

  (add-hook 'java-mode-hook 'hbournis/java-style-hook)
  (add-hook 'java-mode-hook 'display-line-numbers-mode)
#+END_SRC
**** DISABLED lsp-java
#+begin_src emacs-lisp
  (use-package lsp-java
    :straight t
    :after lsp-mode
    :hook ((java-mode . lsp-deferred)
           (java-mode . lsp-lens-mode)
           (java-mode . lsp-java-boot-lens-mode))
    :config
    (require 'lsp-java-boot))
#+end_src
*** Kotlin
**** kotlin-mode
#+begin_src emacs-lisp
  (use-package kotlin-mode
    :straight t
    :hook
    (kotlin-mode . tree-sitter-mode)
    :config
    (setq lsp-kotlin-compiler-jvm-target "17"))
#+end_src
*** Ruby
**** ruby-mode
#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :straight t
    :mode "\\.\\(?:a?rb\\|aslsx\\)\\'"
    :mode "/\\(?:Brew\\|Fast\\)file\\'"
    :hook ((ruby-mode . display-line-numbers-mode)
           (ruby-mode . lsp)
           (ruby-mode . yas-minor-mode)
           (ruby-mode . smartparens-strict-mode)
           (ruby-mode . aggressive-indent-mode)
           (ruby-mode . evil-matchit-mode)
           (ruby-mode . corfu-mode))
    :config
    (setq ruby-insert-encoding-magic-comment nil))
#+END_SRC
**** MAC_ONLY inf-ruby
#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby
    :straight t
    :config
    (setq inf-ruby-console-environment "development"))
#+END_SRC
**** MAC_ONLY projectile-rails
#+BEGIN_SRC emacs-lisp
  (use-package projectile-rails
    :straight t
    :after projectile
    :hook ((ruby-mode inf-ruby-mode projectile-rails-server-mode) . projectile-rails-mode)
    :diminish)
#+END_SRC
**** MAC_ONLY rspec-mode
Enhancements to ruby-mode for RSpec files.

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :straight t
    :hook ruby-mode
    :general (:keymaps 'rspec-compilation-mode-map "r" 'rspec-rerun)
    :config
    (inf-ruby-switch-setup)

    (setq compilation-scroll-output t
          rspec-use-spring-when-possible nil
          rspec-allow-multiple-compilation-buffers t
          rspec-spec-command "rspec --fail-fast")

    (eval-after-load 'rspec-mode '(rspec-install-snippets)))
#+END_SRC
**** MAC_ONLY minitest-mode
#+BEGIN_SRC emacs-lisp
  (use-package minitest
    :straight t
    :hook (ruby-mode . minitest-mode)
    :config
    (setq minitest-use-rails t))
#+END_SRC
**** MAC_ONLY bundler
Interact with bundler with Emacs

#+BEGIN_SRC emacs-lisp
  (use-package bundler
    :straight t
    :after ruby-mode)
#+END_SRC
**** MAC_ONLY rubocop
#+BEGIN_SRC emacs-lisp
  (use-package rubocop
    :straight t
    :hook (ruby-mode . rubocop-mode)
    :config)
#+END_SRC

**** MAC_ONLY ruby-json-to-hash
#+begin_src emacs-lisp
  (use-package ruby-json-to-hash
    :straight t
    :after ruby-mode)
#+end_src
*** Python
**** python-mode
#+begin_src emacs-lisp
  (use-package python-mode
    :straight '(:type built-in)
    :hook ((python-mode . lsp)
           (python-mode . corfu-mode)
           (python-mode . smartparens-strict-mode))
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    (python-indent-guess-indent-offset-verbose nil)
    :bind
    (:map python-mode-map
          ("M-<left>" . python-indent-shift-left)
          ("M-<right>" . python-indent-shift-right))
    :config
    (setopt python-indent-guess-indent-offset-verbose nil)
    (setq python-ts-mode-hook python-mode-hook))
#+end_src

**** lsp-pyright
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :straight t
    :after lsp-mode
    :custom
    ;; (lsp-pyright-auto-import-completions nil)
    (lsp-pyright-typechecking-mode "off")
    :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))
  ;; (fk/async-process
  ;;  "npm outdated -g | grep pyright | wc -l" nil
  ;;  (lambda (process output)
  ;;    (pcase output
  ;;      ("0\n" (message "Pyright is up to date."))
  ;;      ("1\n" (message "A pyright update is available.")))))

#+end_src
*** Haskell
**** DISABLED intero
[[https://github.com/chrisdone/intero][Deprecated]]
replace with: https://github.com/jyp/dante

#+BEGIN_SRC emacs-lisp
  (use-package intero
    :straight t
    :config
    (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC
*** R & Julia
**** DISABLED ESS (Emacs Spearks Statistics)
[[http://ess.r-project.org/][ESS]] provides modes for R and Julia. When I tried to install it from master it
was broken, so melpa-stable should be preferred.

#+BEGIN_SRC emacs-lisp
    (use-package ess
      :straight t)
#+END_SRC
*** Prolog
**** DISABLED Prolog-mode
#+BEGIN_SRC emacs-lisp
(setq prolog-system 'swi)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+END_SRC
**** DISABLED Ediprolog
"[[https://github.com/triska/ediprolog][ediprolog]] lets you interact with SWI-Prolog in all Emacs buffers. You can
consult Prolog programs and evaluate embedded queries."

#+BEGIN_SRC emacs-lisp
  (use-package ediprolog
    :straight t
    :config
    (global-set-key [f10] 'ediprolog-dwim))
#+END_SRC
**** DISABLED ob-prolog
Org-babel support for prolog.

#+BEGIN_SRC emacs-lisp
  (use-package ob-prolog
    :straight t)
#+END_SRC
*** Clojure/ClojureScript
**** DISABLED clojure-mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :straight t
    :hook ((clojure-mode . display-line-numbers-mode)
           (clojure-mode . smartparens-strict-mode)
           (clojurescript-mode . smartparens-strict-mode))
    :config
    ;; (require 'flycheck-clj-kondo)

    ;; Start cider in test env in order to run tests
    ;; Source: https://stackoverflow.com/questions/18304271/how-do-i-choose-switch-leiningen-profiles-with-emacs-nrepl
    (defun cider-jack-in-test-env ()
      (interactive)
      (let ((lein-params "with-profile +test repl :headless"))
        (message "lein-params set to: %s" lein-params)
        (set-variable 'cider-lein-parameters lein-params)
        (cider-jack-in '()))))

#+END_SRC
**** DISABLED cider
CIDER extends Emacs with support for interactive programming in Clojure.

#+begin_src emacs-lisp
  (use-package cider
    :straight t
    :config
    (setq cider-repl-history-file "~/.emacs.d/cider-history"))
#+end_src
**** DISABLED flycheck-clojure
#+begin_src emacs-lisp
  (use-package flycheck-clojure
    :straight t
    :config
    (use-package flycheck-pos-tip
      :straight t
      :config
      (with-eval-after-load 'flycheck
        (flycheck-pos-tip-mode)))
    (use-package flycheck-clj-kondo
      :straight t)
    (eval-after-load 'flycheck '(flycheck-clojure-setup))
    (eval-after-load 'flycheck
      '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
    (eval-after-load 'flycheck
      (dolist (checker '(clj-kondo-clj clj-kondo-cljs clj-kondo-cljc clj-kondo-edn))
        (setq flycheck-checkers (cons checker (delq checker flycheck-checkers))))))
#+end_src
**** DISABLED ob-clojurescript
#+BEGIN_SRC emacs-lisp
  (use-package ob-clojurescript
    :straight t)
#+END_SRC
*** Latex
**** NOT_WORK Auctex
#+BEGIN_SRC emacs-lisp
  (use-package tex
  :straight auctex
  :defer t)
#+END_SRC
**** DISABLED latex-preview-pane
#+BEGIN_SRC emacs-lisp
  (use-package latex-preview-pane
    :straight t
    :config
    (latex-preview-pane-enable))
#+END_SRC

*** typst
**** NOT_WORK typst tree-sitter mode
#+begin_src  emacs-lisp
  (use-package typst-ts-mode
    :straight '(:type git :host codeberg :repo "meow_king/typst-ts-mode")
    :mode (("\\.typ\\'" . typst-ts-mode))
    :hook ((typst-ts-mode . corfu-mode)
           (typst-ts-mode . smartparens-mode)
           (typst-ts-mode . eglot-ensure))
    :custom
    (typst-ts-watch-options "--open --font-path fonts")
    (typst-ts-compile-options "--font-path fonts")
    (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory))
    (typst-ts-mode-enable-raw-blocks-highlight t)
    :config
    (keymap-set typst-ts-mode-map "C-c C-c" #'typst-ts-tmenu)
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   `((typst-ts-mode) .
                     ,(eglot-alternatives `(,typst-ts-lsp-download-path
                                            "tinymist"
                                            "typst-lsp"))))))
#+end_src
*** go
**** DISABLED go mode
#+begin_src emacs-lisp
  (use-package go-mode
    :straight t
    :hook ((go-mode . display-line-numbers-mode)
           (go-mode . lsp)
           (go-mode . smartparens-strict-mode))
    :config
    (add-hook 'go-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                          #'gofmt-before-save
                          nil t))))
#+end_src
* Font and Theme
** Fonts
Execute ~(print (font-family-list))~ to get a list of all available fonts and how

#+BEGIN_SRC emacs-lisp
  ;; Turn off antialiasing for BigBlue Terminal Font
  ;; (setq mac-allow-anti-aliasing nil)

  (defun hbournis/update-font ()
    "Re-set the font and font size according to the platform."
    (let ((font (if (member hbournis/default-font (font-family-list))
                    hbournis/default-font
                  hbournis/fallback-font))
          (fallback (if (member hbournis/variable-pitch-font (font-family-list))
                        hbournis/variable-pitch-font
                      hbournis/fallback-font))
          (unicode hbournis/unicode-font)
          (font-size hbournis/font-size))

      (defun hbournis/format-font (font size)
        (concat font "-" (number-to-string size)))

      (set-face-attribute 'default nil :font (hbournis/format-font font font-size))
      (set-face-attribute 'fixed-pitch nil :font (hbournis/format-font font font-size))
      (set-face-attribute 'variable-pitch nil :font (hbournis/format-font font font-size))

      (if (member unicode (font-family-list))
          (set-fontset-font t 'unicode (hbournis/format-font unicode font-size) nil 'prepend))))

  (hbournis/update-font)
#+END_SRC
** Mode line
#+begin_src emacs-lisp
  (use-package custom-mode-line
    :straight '(:type built-in)
    :load-path "~/.emacs.d/lisp/custom-mode-line"
    :demand t
    :config
    (custom-mode-line-mode))
#+end_src
** Themes
#+begin_src emacs-lisp
  (defun hbournis/load-dark-theme ()
    "Load the specified dark theme.  It uses the variables dark-theme-var, dark-theme-modeline-var.
        Also sets some faces for org-checkbox, strings, org TODO items and evil mode cursors. "

    (use-package hasliberg-theme
      :straight '(:type git :host github :repo "rytswd/hasliberg-theme")
      :demand t
      :custom
      (hasliberg-theme-dark-or-light 'dark)
      :config
      (set-face-attribute 'tab-bar-tab-inactive nil
                          :box nil
                          :background 'unspecified
                          :foreground (hasliberg-theme-hex-for 'subtle-200))

    (load-theme 'hasliberg t))

    ;; (use-package spaceink-theme
    ;;   :straight '(:type git :host github :repo "bcardoso/spaceink-theme")
    ;;   :demand t
    ;;   :init
    ;;   (add-to-list 'custom-theme-load-path (concat user-emacs-directory
    ;;   "/straight/build/spaceink-theme/")))

    ;; (load-theme 'spaceink t)
    )

  (defun hbournis/load-light-theme ()
    (use-package flatui-theme
      :straight t)

    (load-theme 'flatui t)

    (set-face-attribute 'tab-bar-tab nil
                        :box nil
                        :foreground "#16A085"
                        :background 'unspecified)
    (set-face-attribute 'tab-bar-tab-inactive nil
                        :box nil
                        :foreground "#BDC3C7"
                        :background 'unspecified)
    (set-face-attribute 'font-lock-string-face nil
                        :background nil
                        :foreground "#0a74b9")
    (set-face-attribute 'line-number nil
                        :background "#ecf0f1")
    (set-face-attribute 'mode-line nil
                        :background "#dfe4ea"
                        :box nil)
    (set-face-attribute 'mode-line-inactive nil
                        :box nil
                        :background "#ecf0f1")
    (set-face-attribute 'magit-section-highlight nil
                        :background "#dfe4ea")
    (set-face-attribute 'magit-section-heading nil
                        :foreground "#8E44AD")
    (set-face-attribute 'magit-branch-local nil
                        :foreground "#2980B9")
    (set-face-attribute 'magit-branch-remote nil
                        :foreground "#27AE60")
    (set-face-attribute 'magit-diff-context nil
                        :background "grey20"))
#+end_src
** Load theme
#+begin_src emacs-lisp
  (hbournis/load-dark-theme)
#+end_src
* Custom Functions
** Call with prefix
#+begin_src emacs-lisp
  (defun hbournis/call-with-prefix (func &optional prefix)
    (interactive)
    (let ((current-prefix-arg (or prefix '(1))))
      (call-interactively func)))
#+end_src
** Toggle Window Split
Toggle between horizontal and vertical split. [[https://www.emacswiki.org/emacs/ToggleWindowSplit][Source]]

#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    ;; Toggle the placement of windows between horizontal and vertical split
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
             (car next-win-edges))
               (<= (cadr this-win-edges)
             (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
           (car (window-edges (next-window))))
        'split-window-horizontally
      'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))
#+END_SRC
** Align org mode tags on the right
I want to align the org mode tags on the right of the screen, which is a
relative value. However, org-align-all-tags depends on the org-tags-column variable.
For some reason setting org-tags-column in the init file does not work. Although the code
is valid, when I check the value of the variable it is -80. However, if evaluate
the block and check again, the value is set correctly. At the moment I see no
workaround except to set org-tags-column immediatelly before calling
org-align-all-tags. This also means that it will be relative to the window
width at the moment I want to align them, and not at startup.

#+BEGIN_SRC emacs-lisp
  (defun org-align-all-tags-right ()
    ;; Align org tags to the right of the screen. Calculates it according to the
    ;; window-total-width property.
    (interactive)
    (setq org-tags-column (+ 5 (- (window-total-width))))
    (org-align-all-tags))
#+END_SRC
** Copy to clipboard
#+begin_src emacs-lisp
  (defun hbournis/copy-to-clipboard (string)
    (kill-new string)
    (message (concat "Copied to clipboard: " string)))
#+end_src
** Copy file name to clipboard
#+begin_src emacs-lisp
  (defun hbournis/copy-filename-to-clipboard ()
    (interactive)
    (hbournis/copy-to-clipboard (format "%s" buffer-file-name)))
#+end_src
** Check if cliboard data is a URL
Helper function for ~hbournis/insert-url-as-org-link~ and
~hbournis/org-make-word-link-from-clipboard.~ Returns true if url is a valid
URL. Returns false if it is not a URL, or if it is an org-mode formatted link.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/cliboard-contains-url-p (url)
    ;; Returns true if url is a valid URL. Returns false
    ;; if it is not a URL, or if it is an org-mode formatted
    ;; link.
    (let ((url-pattern  "\\(http[s]?://\\|www\\.\\)")
          (url-org-pattern "\\([[]+\\)"))
      (and (not (string-match url-org-pattern url)) (string-match url-pattern url))))
#+END_SRC
** Paste URL from clipboard in org mode format
Insert a URL from clipboard in org mode format and place the cursor in insert
mode to complete the link text. Originally seen [[https://emacs.stackexchange.com/a/3287][here]]. The original snippet
matched URLs that were already formatted as org mode links, leading to really
broken links being inserted. This is a common case since when you delete a link
it is stored in the register. I added a second regular expression that checks
whether the URL in the clipboard starts with ~[~.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/insert-url-as-org-link ()
    "If there's a URL on the clipboard, insert it as an org-mode
  link in the form of [[url][*]], leave point at * and enter insert mode."
    (interactive)
    (let ((link (substring-no-properties (x-get-selection 'CLIPBOARD))))
      (save-match-data
        (if (hbournis/cliboard-contains-url-p link)
            (progn
              (insert (concat "[[" link "][]]"))
              (backward-char 2)
              (evil-insert 1))
          (error "No URL on the clipboard")))))
#+END_SRC
** Paste URL from clipboard using the word at point as link text
Takes the word that the cursor in on, and replaces it with an org-mode link to
the URL in the clipboard. If there is no word at the cursor point, it inserts
the link with the URL as text. Returns an error if there is no URL at the
clipboard. I wanted to make it work with visual selection, but I maybe in the
future.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/org-make-word-link-from-clipboard ()
    ;; Takes the word that the cursor in on, and replaces it with an org-mode
    ;; link to the URL in the clipboard. If there is no word at the cursor point,
    ;; it inserts the link with the URL as text. Returns an error if there is
    ;; no URL at the clipboard.
    (interactive)
    (let ((link (substring-no-properties (x-get-selection 'CLIPBOARD)))
          ;; Specify the bounds of the region in order to delete it
          (bounds (if (use-region-p)
                      (cons (region-beginning) (region-end))
                    (bounds-of-thing-at-point 'symbol)))
          ;; If there is no word at point, then use the link as URL
          (text (or (thing-at-point 'symbol) link)))

      ;; Check if link is a URL and that it is not already in org mode format,
      ;; else throw an error
      (if (hbournis/cliboard-contains-url-p link)
          (progn
            ;; If bounds exist, delete the word to replace it with the link
            (if bounds
                (delete-region (car bounds) (cdr bounds)))

            ;; Insert the link with the text in org mode link format
            (insert (concat "[[" link "][" text "]]")))
        (error "There is no URL at the clipboard."))))
#+END_SRC
** Copy to clipboard link to current file and current line
#+BEGIN_SRC emacs-lisp
  (defun hbournis-position-to-kill-ring ()
    "Copy to the kill ring a string in the format \"file-name:line-number\"
      for the current buffer's file name, and the line number at point.
      Originally seen: https://stackoverflow.com/a/10682397"
    (interactive)
    (let ((linum (save-restriction (widen) (line-number-at-pos))))
      (kill-new
       (format "[[file:%s::%d][⮴\"%s\":%d]]"
               (buffer-file-name)
               linum
               (file-name-nondirectory (buffer-file-name))
               linum))
      (message "Copied link to position")))
#+END_SRC
** Transform org date to simple year-month-day string
#+BEGIN_SRC emacs-lisp
  (defun hbournis/org-date-to-simple-string (date)
    "Transform an org date to a simple year-month-day format"
    (substring (format "%S" date) 1 11))
#+END_SRC
** Recreate scratch buffer
A simple function from [[https://www.emacswiki.org/emacs/RecreateScratchBuffer][Emacs wiki]] to recreate the scratch buffer

#+BEGIN_SRC emacs-lisp
  (defun hbournis/create-scratch-buffer nil
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
#+END_SRC
** Hide ^M in files with DOS line endings
[[https://stackoverflow.com/a/750933][Source]]

#+BEGIN_SRC emacs-lisp
  (defun remove-dos-eol ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))
#+END_SRC
** DISABLED org-fancy-priorities development
For development only.
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p (concat user-emacs-directory "lisp/org-fancy-priorities/org-fancy-priorities.el"))
      (progn
        (add-to-list 'load-path "~/.emacs.d/lisp/org-fancy-priorities/")
        (require 'org-fancy-priorities)
        (setq org-fancy-priorities-list '((?A . "❗")
                                          (?B . "⬆")
                                          (?C . "⬇")
                                          (?D . "☕")
                                          (?1 . "❗")
                                          (?2 . "⮬")
                                          (?3 . "⮮")
                                          (?4 . "☠")))
        (add-hook 'org-mode-hook 'org-fancy-priorities-mode)
        (diminish 'org-fancy-priorities-mode)))
#+END_SRC
** Terminal Notifier
[[https://zhongweiy.github.io/blog/2016/02/03/solve-error-emacs-not-compiled-with-dbus-support/][Source]]

#+BEGIN_SRC emacs-lisp
  ;; Terminal notifier
  ;; requires 'brew install terminal-notifier'
  ;; stolen from erc-notifier

  (defvar terminal-notifier-command (executable-find "terminal-notifier") "The path to terminal-notifier.")

  ;; (terminal-notifier-notify "Emacs notification" "Something amusing happened")

  (defun terminal-notifier-notify (title message)
    "Show a message with
  terminal-notifier-command
  ."
    (start-process "terminal-notifier"
                   "terminal-notifier"
                   terminal-notifier-command
                   "-title" title
                   "-message" message
                   "-sound" "default"
                   "-activate" "org.gnu.Emacs"))

  (defun timed-notification (time msg)
    (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
    (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Emacs" msg)) msg))

  (setq org-show-notification-handler
        (lambda (msg) (timed-notification nil msg)))
#+END_SRC
** DISABLED Refresh agenda when files change on disk
#+BEGIN_SRC emacs-lisp
  (defun inform-revert-modified-file (&optional p1 p2)
    "bdimych custom function"
    (let ((revert-buffer-function nil))
      (revert-buffer p1 p2)
      (message (concat "buffer file name is: " buffer-file-name))
      ;; (if (member buffer-file-name)
      ;;     )
      (if (get-buffer "*Org Agenda*")
          (with-current-buffer "*Org Agenda*"
            (org-agenda-redo)))))

  (setq revert-buffer-function 'inform-revert-modified-file)
#+END_SRC
** Delete empty sections in org agenda
[[https://lists.gnu.org/archive/html/emacs-orgmode/2015-06/msg00266.html][Source]]

#+BEGIN_SRC emacs-lisp
  (defun org-agenda-delete-empty-blocks ()
    "Remove empty agenda blocks.
  A block is identified as empty if there are fewer than 2
  non-empty lines in the block (excluding the line with
  `org-agenda-block-separator' characters)."
    (when org-agenda-compact-blocks
      (user-error "Cannot delete empty compact blocks"))
    (setq buffer-read-only nil)
    (save-excursion
      (goto-char (point-min))
      (let* ((blank-line-re "^\\s-*$")
             (content-line-count (if (looking-at-p blank-line-re) 0 1))
             (start-pos (point))
             (block-re (format "%c\\{10,\\}" org-agenda-block-separator)))
        (while (and (not (eobp)) (forward-line))
          (cond
           ((looking-at-p block-re)
            (when (< content-line-count 2)
              (delete-region start-pos (1+ (point-at-bol))))
            (setq start-pos (point))
            (forward-line)
            (setq content-line-count (if (looking-at-p blank-line-re) 0 1)))
           ((not (looking-at-p blank-line-re))
            (setq content-line-count (1+ content-line-count)))))
        (when (< content-line-count 2)
          (delete-region start-pos (point-max)))
        (goto-char (point-min))
        ;; The above strategy can leave a separator line at the beginning
        ;; of the buffer.
        (when (looking-at-p block-re)
          (delete-region (point) (1+ (point-at-eol))))))
    (setq buffer-read-only t))

  (add-hook 'org-agenda-finalize-hook #'org-agenda-delete-empty-blocks)
#+END_SRC
** Open file in an external program
[[http://batsov.com/articles/2011/11/12/emacs-tip-number-2-open-file-in-external-program/][Source]]

#+BEGIN_SRC emacs-lisp
  (defun prelude-open-with ()
    "Simple function that allows us to open the underlying
  file of a buffer in an external program."
    (interactive)
    (when buffer-file-name
      (shell-command (concat
                      (if (eq system-type 'darwin)
                          "open"
                        (read-shell-command "Open current file with: "))
                      " "
                      buffer-file-name))))

  (global-set-key (kbd "C-c o") 'prelude-open-with)
#+END_SRC
** Insert current time stamp
Just a simple function for when I want the current time stamp inside an org file

#+BEGIN_SRC emacs-lisp
  (defun hbournis/insert-timestamp ()
    "Inserts inactive timestamp with time"
    (interactive)
    (newline-and-indent)
    (insert "⏱⏱⏱ --- ")
    (org-insert-time-stamp (current-time) t t)
    (insert " --- ⏱⏱⏱\n------------------------------------------")
    (newline-and-indent))
#+END_SRC
** kill-window-and-its-windows
[[https://www.emacswiki.org/emacs/misc-cmds.el][Source]]

#+BEGIN_SRC emacs-lisp
  ;; Candidate as a replacement for `kill-buffer', at least when used interactively.
  ;; For example: (define-key global-map [remap kill-buffer] 'kill-buffer-and-its-windows)
  ;;
  ;; We cannot just redefine `kill-buffer', because some programs count on a
  ;; specific other buffer taking the place of the killed buffer (in the window).
  (defun kill-buffer-and-its-windows (buffer)
    "Kill BUFFER and delete its windows.  Default is `current-buffer'.
  BUFFER may be either a buffer or its name (a string)."
    (interactive (list (read-buffer "Kill buffer: " (current-buffer) 'existing)))
    (setq buffer  (get-buffer buffer))
    (if (buffer-live-p buffer)            ; Kill live buffer only.
        (let ((wins  (get-buffer-window-list buffer nil t))) ; On all frames.
          (when (and (buffer-modified-p buffer)
                     (fboundp '1on1-flash-ding-minibuffer-frame))
            (1on1-flash-ding-minibuffer-frame t)) ; Defined in `oneonone.el'.
          (when (kill-buffer buffer)      ; Only delete windows if buffer killed.
            (dolist (win  wins)           ; (User might keep buffer if modified.)
              (when (window-live-p win)
                ;; Ignore error, in particular,
                ;; "Attempt to delete the sole visible or iconified frame".
                (condition-case nil (delete-window win) (error nil))))))
      (when (interactive-p)
        (error "Cannot kill buffer.  Not a live buffer: `%s'" buffer))))
#+END_SRC
** toggle modeline

#+BEGIN_SRC emacs-lisp
  (defun hbournis/toggle-modeline ()
    "Show/hide modeline"
    (interactive)
    (if (get 'hbournis/toggle-modeline 'modeline-status)
        (progn
          (setq mode-line-format (get 'hbournis/toggle-modeline 'modeline-status))
          (put 'hbournis/toggle-modeline 'modeline-status nil))
      (progn
        (put 'hbournis/toggle-modeline 'modeline-status mode-line-format)
        (setq mode-line-format nil)))
    (redraw-frame))
#+END_SRC
** Split and switch to new frame
#+BEGIN_SRC emacs-lisp
  (defun split-window-horizontally-and-switch ()
    (interactive)
    (split-window-horizontally)
    (other-window 1))

  (defun split-window-vertically-and-switch ()
    (interactive)
    (split-window-vertically)
    (other-window 1))

  (defun split-window-below-and-switch ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun split-window-right-and-switch ()
    (interactive)
    (split-window-right)
    (other-window 1))
#+END_SRC
** Copy file name to clipboard
 [[https://stackoverflow.com/a/2417617][Source]]
#+BEGIN_SRC emacs-lisp
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC
** Write file
#+begin_src emacs-lisp
  (defun hbournis/write-file (filename content)
    "Write content to file."
    (with-temp-file filename (insert content)))
#+end_src
** dired create file
[[https://stackoverflow.com/a/18885461][Source]]

#+BEGIN_SRC emacs-lisp
  (defun hbournis/dired-create-file (file)
    "Create a file called FILE. If FILE already exists, signal an error."
    (interactive
     (list (read-file-name "Create file: " (dired-current-directory))))
    (let* ((expanded (expand-file-name file))
           (try expanded)
           (dir (directory-file-name (file-name-directory expanded)))
           new)
      (if (file-exists-p expanded)
          (error "Cannot create file %s: file exists" expanded))
      ;; Find the topmost nonexistent parent dir (variable `new')
      (while (and try (not (file-exists-p try)) (not (equal new try)))
        (setq new try
              try (directory-file-name (file-name-directory try))))
      (when (not (file-exists-p dir))
        (make-directory dir t))
      (write-region "" nil expanded t)
      (when new
        (dired-add-file new)
        (dired-move-to-filename))))
#+END_SRC
** dired-toggle-mark
#+begin_src emacs-lisp
  (defun hbournis/dired-toggle-mark ()
    "If current line is marked then unmark it, otherwise mark it"
    (interactive)
    (let ((marked-files-exist (if (dired-remember-marks (point-min) (point-max)) t nil))
          (file-marked-p (if (member (dired-get-filename) (dired-get-marked-files)) t nil)))
      (call-interactively
       (if (and marked-files-exist file-marked-p)
           'dired-unmark
         'dired-mark))))
#+end_src
** ssh
:PROPERTIES:
:VISIBILITY: folded
:END:
*** ssh to osmc
#+begin_src emacs-lisp
(defun hbournis/ssh-dired-omsc ()
  "Open dired through ssh to local osmc."
  (interactive)
  (dired "/scp:osmc:~"))
#+end_src
** read-only .log files
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.log\\'" . read-only-mode))
#+end_src
** Open org-file if not at work
#+begin_src emacs-lisp
  (defun hbournis/open-org-file (file)
    "Open org file conditionally. Avoid opening them by mistake."
    (cond ((not WORK?)
           (find-file file))
          ((and WORK? (eq file hbournis/org-work-file)) (find-file file))))
#+end_src
** Open/create main org-file
#+begin_src emacs-lisp
  (defun hbournis/open-create-main-org-file ()
    "Open org file conditionally. Avoid opening them by mistake."
    (interactive)
    (cond ((not WORK?)
           (find-file hbournis/org-main-file))
          (WORK?
           (if (file-exists-p hbournis/org-work-file)
               (find-file hbournis/org-work-file)
             (hbournis/write-file
              hbournis/org-work-file
              (string-join
               '("#+STARTUP: show2levels"
                 "#+TODO: BAKCLOG(b) TODO(t) IN_PROGRESS(i!) CODE_REVIEW(c!) DELIVERED(d!) | DONE(o!) CANCELLED(a@)\n"
                 "#+BEGIN: kanban :layout (\"...\" . 50) :range (\"TODO\" . \"DELIVERED\") :match \"todos\" :depth 2"
                 "#+END:\n"
                 "* Todos :todos:"
                 "* Notes")
               "\n"))))))
#+end_src
** Call Language-function according to file_extension
#+begin_src emacs-lisp
  (setq hbournis/test-at-point-map
        #s(hash-table size 6 test eq data (
                                           rspec-mode      rspec-verify-single
                                           minitest-mode   minitest-verify-single
                                           js-mode         mocha-test-at-point
                                           typescript-mode jest-test-run-at-point
                                           web-mode        mocha-test-at-point
                                           clojure-mode    cider-test-run-test)))

  (setq hbournis/test-file-map
        #s(hash-table size 6 test eq data (
                                           rspec-mode      rspec-verify
                                           minitest-mode   minitest-verify
                                           js-mode         mocha-test-file
                                           typescript-mode jest-test-run
                                           web-mode        mocha-test-file
                                           clojure-mode    cider-test-run-ns-tests)))

  (setq hbournis/test-all-map
        #s(hash-table size 7 test eq data (
                                           rspec-mode      rspec-verify-all
                                           ruby-mode       rspec-verify-all
                                           minitest-mode   minitest-verify-all
                                           js-mode         mocha-test-project
                                           typescript-mode jest-test-run-all-tests
                                           web-mode        mocha-test-project
                                           clojure-mode    cider-test-run-project-tests)))

  (setq hbournis/find-definition-map
        #s(hash-table size 4 test eq data (
                                           ruby-mode       lsp-find-definition
                                           typescript-mode lsp-find-definition
                                           java-mode       dumb-jump-go
                                           web-mode        dumb-jump-go)))

  (setq hbournis/open-doc-map
        #s(hash-table size 3 test eq data (
                                           rspec-mode      robe-doc
                                           minitest-mode   robe-doc
                                           clojure-mode    cider-doc)))

  (setq hbournis/show-repl-map
        #s(hash-table size 1 test eq data (
                                           clojure-mode    cider-switch-to-repl-buffer)))

  (defun hbournis/get-generic-lookup-mode ()
    (let ((is-ruby (eq major-mode 'ruby-mode))
          (filename (buffer-file-name)))
      (if is-ruby
          (cond ((string-match-p ".*_spec\\.rb" filename) 'rspec-mode)
                ((string-match-p ".*_test\\.rb" filename) 'minitest-mode)
                (t 'ruby-mode))
        major-mode)))

  (defun hbournis/call-interactively-generic-func (map)
    (if-let ((result (gethash (hbournis/get-generic-lookup-mode) map)))
        (call-interactively result)))

  (defun hbournis/generic-run-test-at-point ()
    "Call the appropriate run test at point function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/test-at-point-map))

  (defun hbournis/generic-run-test-file ()
    "Call the appropriate run test file function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/test-file-map))

  (defun hbournis/generic-run-test-all ()
    "Call the appropriate run all tests function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/test-all-map))

  (defun hbournis/generic-find-definition ()
    "Call the appropriate run all tests function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/find-definition-map))

  (defun hbournis/generic-open-doc ()
    "Show the function documentation depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/open-doc-map))

  (defun hbournis/generic-show-repl ()
    "Show the repl depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/show-repl-map))
#+end_src
** DISABLED TDD mode
#+begin_src emacs-lisp
  (defun hbournis/ruby-test-file-p (&optional file)
    "Returns true if file is a ruby spec file"
    (interactive)
    (let ((filename (or file (buffer-file-name)))
          (ruby-test-suffix "spec.rb"))
      (string-suffix-p ruby-test-suffix filename)))

  (defun hbournis/tdd-split ()
    "Split screen for TDD"
    (interactive)
    (let ((current-file (buffer-file-name))
          (spec-name (rspec-spec-file-for (buffer-file-name)))
          (file-name (rspec-target-file-for (buffer-file-name))))
      (delete-other-windows)
      (if (hbournis/ruby-test-file-p current-file)
          (projectile-rails-find-current-spec))
      (split-window-horizontally)
      (projectile-rails-find-current-spec)
      (hbournis/generic-run-test-file)
      (other-window 1)
      (split-window-below-and-switch)
      (find-file file-name)
      (other-window 1)))
#+end_src
** Kill all buffers except those starting with asterisk
#+begin_src emacs-lisp
  (defun hbournis/kill-buffer-unless-asterisk (buffer)
    "Returns true if the buffer should be killed."
    (unless (string-prefix-p "*" (buffer-name buffer))
      (kill-buffer buffer)))

  (defun hbournis/kill-all-file-buffers ()
    "Kill all buffers if unless they start with asterisk."
    (interactive)
    (mapcar 'hbournis/kill-buffer-unless-asterisk (buffer-list))
    (message "File Buffers killed."))
#+end_src
** DISABLED magit recent branches mine
#+begin_src emacs-lisp
  (defun hbournis/magit-insert-recent-branches nil
    "Insert recent branches to magit."
    (let* ((git-command "git recents")
           (recents (-filter 's-present? (split-string (shell-command-to-string git-command) "\n")))
           (local-branches (magit-refs--format-local-branches))
           (recent-local-branches (-filter
                                   (lambda (e) (--find (string-equal e (-first-item it)) local-branches))
                                   recents)))

      (magit-insert-section (rb "rb")
        (magit-insert-heading "Recent branches")
        (dolist (it-branch recent-local-branches)
          (let ((output (magit-rev-format "%h %s" it-branch)))
            (string-match "^\\([^ ]+\\) \\(.*\\)" output)
            (magit-bind-match-strings (commit summary) output
              (when (and t (equal summary ""))
                (setq summary "(no commit message)"))
              (magit-insert-section (branch it-branch t)
                (insert (propertize commit
                                    'font-lock-face 'magit-hash) ?\s)
                (insert (propertize it-branch
                                    'font-lock-face 'magit-branch-local) ?\s)
                (insert (funcall magit-log-format-message-function
                                 it-branch summary) ?\n))
              )))
        (insert  ?\n))
      ))

    (magit-add-section-hook 'magit-status-sections-hook 'exp-feat/magit-insert-recent-branches 'magit-insert-unpulled-from-upstream)
#+end_src
** Increase/decrease font size
#+begin_src emacs-lisp
  (defun hbournis/transform-font-size (transform-function &optional amount)
    "Increment font size by."
    (let ((amount (if amount amount 1)))
      (mapcar (lambda (variable)
                (let* ((current-value (symbol-value variable))
                       (new-value (apply transform-function `(,current-value ,amount))))
                  (set variable new-value)
                  (message "Font Size: %s" new-value)
                  (hbournis/update-font)
                  (symbol-value variable)))
              '(hbournis/font-size))))

  (defun hbournis/increment-font-size (&optional amount)
    "Increment font size by AMOUNT."
    (interactive)
    (hbournis/transform-font-size '+ amount))

  (defun hbournis/decrement-font-size (&optional amount)
    "Increment font size by AMOUNT."
    (interactive)
    (hbournis/transform-font-size '- amount))
#+end_src
** Switch to tab
#+begin_src emacs-lisp
  (defun hbournis/switch-to-or-create-tab (name)
    (if (hbournis/tab-exists-p name)
        (tab-bar-switch-to-tab name)
      (progn
        (tab-bar-new-tab)
        (tab-bar-rename-tab name))))
#+end_src
** magit-hydra
#+begin_src emacs-lisp
  (setq hbournis/magit-hydra-keys
        '("a" "s" "d" "f" "j" "k" "l" "g" "h" "b" "c" "e" "i" "m" "n"
          "o" "p" "r" "t" "u" "v" "w" "x" "y" "z"))

  (defun hbournis/get-all-git-repos (directory)
    "Get all git repositories in DIRECTORY."
    (let ((result '()))
      (dolist (file (directory-files directory t))
        (when (and (file-directory-p file)
                   (not (string-equal "." (file-name-nondirectory file)))
                   (not (string-equal ".." (file-name-nondirectory file)))
                   (file-exists-p (concat (file-name-as-directory file) ".git")))
          (push file result)))
      result))

  (defun hbournis/generate-magit-hydra (dir-list)
    "Generate a hydra for launching magit at each directory in DIR-LIST."
    (let ((hydra-name (make-symbol "magit-hydra"))
          (docstring "\nMagit Hydra\n")
          (heads '())
          (keys hbournis/magit-hydra-keys))
      (dotimes (index (length dir-list))
        (let* ((dir (nth index dir-list))
               (key (pop keys))
               (func `(magit-status ,dir)))
          (push `(,key ,func) heads)
          (setq docstring (concat docstring "[_" key "_]: " (file-name-nondirectory dir) "\n"))))
      ;; Add "q" key to exit the hydra
      (push '("q" nil "exit" :color blue) heads)
      (eval `(defhydra ,hydra-name (:exit t :hint nil)
               ,docstring
               ,@heads))))

  (defun hbournis/magit-hydra ()
    (interactive)
    "Launch magit hydra by generating it dynamically."
    (hbournis/generate-magit-hydra
     (reverse (hbournis/get-all-git-repos hbournis/projects-dir)))
    (eval '(magit-hydra/body)))
#+end_src
* Shortcuts
global shortcuts

#+BEGIN_SRC emacs-lisp
  (global-set-key   (kbd "C-c w")  'browser-url-at-point)
  (global-unset-key (kbd "C-k"))
  (global-unset-key (kbd "C-S-k"))
  (global-set-key   (kbd "C-S-k")  (lambda () (interactive) (kill-this-buffer) (delete-other-windows)))
  (global-set-key   (kbd "C-c a")  'org-agenda)
#+END_SRC
* DISABLED ENV variables

#+BEGIN_SRC emacs-lisp
  ;; For pdf-tools to work in mac
  (setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
#+END_SRC
* Start emacs server
Start an emacs server so you can open files from the command line using
emacsclient

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC
* DISABLED Autostart Org Agenda
Reload all agenda files before before showing the agenda, since they might
have been edited from the mobile app.

If eyebrowse is installed, switch to the 1st window config, to avoid overriding
the last opened window config.

#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice (lambda ()
                                (dolist (file-name org-agenda-files)
                                  (let ((buf (find-buffer-visiting file-name)))
                                    (if buf
                                        (with-current-buffer buf
                                          (when (buffer-file-name)
                                            (revert-buffer :ignore-auto :noconfirm))))))

                                (hbournis/switch-to-or-create-tab "1")

                                (if WORK?
                                    (org-agenda nil "w")
                                  (org-agenda nil "c"))
                                (get-buffer "*Org Agenda*")
                                (beginning-of-buffer)
                                (get-buffer "*Org Agenda*")))

  (delete-other-windows)
#+END_SRC
* DISABLED Start fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Cleanup startup
#+begin_src emacs-lisp
  (setq debug-on-error nil)

  ;; after started up, reset GC threshold to normal.
  (run-with-idle-timer 4 nil
                       (lambda ()
                         "Clean up gc."
                         (setq gc-cons-threshold (* 16 1024 1024)
                               gc-cons-percentage 0.1)
                         (garbage-collect)))
  ;; (use-package-report)
#+end_src
