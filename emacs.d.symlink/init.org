#+TITLE:     My Emacs Configuration
#+EMAIL:     harrybournis@gmail.com
#+AUTHOR:    Harry Bournis
#+STARTUP: content
#+TODO: TODO WAITING MAC_ONLY WINDOWS_ONLY LINUX_ONLY UNIX_ONLY NOT_WINDOWS NOT_MAC NOT_LINUX NOT_UNIX WORK_ONLY NOT_WORK DISABLED | DONE
#+LANGUAGE:  en
#+PROPERTY: header-args :tangle init.el :comments org
#+OPTIONS: author:nil date:nil toc:nil title:nil e:nil
#+LaTeX_HEADER: \pagenumbering{gobble}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \geometry{a4paper, margin=20mm}
#+LaTeX_HEADER: \usepackage[cache=false]{minted}
#+LaTeX_HEADER: \usemintedstyle{trac}
#+LaTeX_HEADER: \setminted{breaklines}


* Prerequisites
- [[http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack][ag ("the silver searcher")]] for searching
- [[http://git-scm.com/][git]]
- [[https://www.gnupg.org/][gnupg]] for encryption
- [[http://www.latex-project.org/][latex]] and [[http://pygments.org/][pygments]] to pdf export with syntax highlighting
- [[http://aspell.net/][GNU aspell]] for spell checking
- [[https://github.com/julienXX/terminal-notifier][Terminal Notifier]] for notifications on Mac
- [[https://github.com/BurntSushi/ripgrep][rigprep]] for [[https://github.com/alphapapa/magit-todos][magit-todos]]

* Packages Setup
** Load local.el
Load local.el gitignored file if it exists

#+begin_src emacs-lisp
  (let ((local-file (concat user-emacs-directory "local.el")))
    (if (file-exists-p local-file)
        (load local-file)))
#+end_src
** Load .config file
#+begin_src emacs-lisp
  (let ((local-file (concat user-emacs-directory ".config")))
    (if (file-exists-p local-file)
        (load local-file)
      (load (concat user-emacs-directory ".config-sample"))))
#+end_src
** Proxy settings
#+BEGIN_SRC emacs-lisp
  (if config/proxy-url
      (setq url-proxy-services
            `(("no_proxy" . "^\\(localhost\\|10.*\\)")
              ("http"     . ,api-keys/proxy-url)
              ("https"    . ,api-keys/proxy-url))))
#+END_SRC
** Repositories

the elpa repositories from where the packages are fetched.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu"          . "https://elpa.gnu.org/packages/")
                           ("melpa"        . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/"))
        package-user-dir (concat (file-name-directory (or load-file-name buffer-file-name)) "elpa"))
#+END_SRC

** Security
#+BEGIN_SRC emacs-lisp
  (setq network-security-level 'high)
  (setq gnutls-algorithm-priority "normal:-vers-tls1.3")
#+END_SRC
** use-package & bind-key

#+BEGIN_SRC emacs-lisp
  ;; avoid problems with files newer than their byte-compiled counterparts
  ;; it's better a lower startup than load an outdated and maybe bugged package
  (setq load-prefer-newer t)

  (when (not package-archive-contents)
    (package-refresh-contents))

  ;; install use-package if not exists
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)                ;; if you use any :bind variant
#+END_SRC

** IS-MAC/IS-LINUX
Determine whether the system is mac or linux

#+BEGIN_SRC emacs-lisp
  (defconst IS-MAC     (eq system-type 'darwin))
  (defconst IS-LINUX   (eq system-type 'gnu/linux))
  (defconst IS-WINDOWS (eq system-type 'windows-nt))
  (defconst WORK?      (if (getenv "WORK") t nil))
#+END_SRC
* Variables
Variables are set here that are used in the configuration below

#+BEGIN_SRC emacs-lisp
  (setq hbournis/org-main-file             "~/org/stuff.org"
        hbournis/org-book-file             "~/org/books.org"
        hbournis/org-mobile-file           "~/org/mobile_notes.org"
        hbournis/org-album-file            "~/org/album.org"
        hbournis/org-inbox-file            "~/org/Inbox.org"
        hbournis/org-work-file             "~/Documents/work.org"
        hbournis/org-journal-file          "~/org/journal.org.gpg"
        hbournis/recurring-file            "~/org/recurring.org"
        hbournis/org-agenda-files         `(,hbournis/org-main-file
                                            ,hbournis/org-mobile-file
                                            ,hbournis/org-album-file
                                            ,hbournis/org-inbox-file
                                            ,hbournis/recurring-file
                                            ,hbournis/org-work-file)
        hbournis/default-font              "SauceCodePro Nerd Font Mono"
        hbournis/fallback-font             "Courier New"
        hbournis/unicode-font              "Unifont"
        hbournis/mac-font-size             "15"
        hbournis/windows-font-size         "11"
        hbournis/alternate-font-size       "11"
        )
#+END_SRC
* Built-in Settings
** General
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        initial-scratch-message nil
        visible-bell nil
        apropos-do-all t                        ;; apropos commands perform more extensive searches than default
        large-file-warning-threshold 100000000  ;; warn only when opening files bigger than 100mb
        ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#F2804F")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))

  ;; have your emacs window always show your system-name and the full
  ;; path of the buffer you're currently editing
  (setq frame-title-format (list (format "%s %%s: %%j " (system-name)) '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

  ;; disable toolbar, scrollbar, menubar (only when not in osx)
  (and (fboundp 'menu-bar-mode)
       (not (eq system-type 'darwin))
       (menu-bar-mode -1))
  (dolist (mode '(tool-bar-mode scroll-bar-mode))
    (when (fboundp mode) (funcall mode -1)))

  ;; replace yes/no questions with y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; show the empty lines at the end (bottom) of the buffer
  (toggle-indicate-empty-lines)

  ;; disable blinking cursor
  (blink-cursor-mode -1)

  ;; make sure that utf-8 is used everywhere.
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-language-environment    'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (prefer-coding-system        'utf-8)
  (set-input-method nil)

  ;; always indent with spaces and 2 spaces
  (setq-default indent-tabs-mode  nil
                default-tab-width 2
                c-default-style "linux"
                c-basic-offset 2)

  ;; set column number mode to true
  (column-number-mode t)

  ;; set cmd to control in mac
  (setq mac-command-modifier 'control)

  ;; Open .symlink files in sh-mode
  (add-to-list 'auto-mode-alist '("\\.symlink\\'" . sh-mode))

  ;; text wrapping at 80 columns by default (only text)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (setq-default fill-column 80)

  ;; cleanup whitespace on save
  (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; set line spacing
  (setq-default line-spacing 0.2)

  ;; set the calendar to my country and city's calendar standards
  (setq-default calendar-week-start-day  1
                calendar-latitude        40.6
                calendar-longitude       22.9
                calendar-location-name   "Thessaloniki, Greece")

  ;; sets the default user's information properly.
  (setq user-full-name    "harry bournis"
        user-mail-address "harrybournis@gmail.com")

  ;; set a custom file for customize to keep init.el clean
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'no-error)

  ;; save all backups to a single folder to avoid clutter
  (setq backup-directory-alist '(("." . "~/.emacs.d/etc/backups")))
  ;; disable backups for tramp
  (add-to-list 'backup-directory-alist (cons tramp-file-name-regexp nil))

  ;; Automatically refresh buffers that changed on disk
  (global-auto-revert-mode t)

  ;; Undo/Redo changes in window configuration
  ;; Disabled in windows for performance
  (unless IS-WINDOWS
    (when (fboundp 'winner-mode)
      (winner-mode 1)))
#+END_SRC
*** Emacs 26.1 Settings
#+BEGIN_SRC emacs-lisp
  ;; Scroll horizontally using mouse, touchpad and trackbar
  (setq mouse-wheel-tilt-scroll t)

  ;; Native line numbers
  ;; Can be enabled via variable, as a minor mode, or global mode
  ;; Variable
  ;; (setq display-line-numbers 'relative)

  ;; Mode
  (setq display-line-numbers-type 'relative)
  ;; (global-display-line-numbers-mode)

  ;; Enable line numbers for emacs-lisp mode
  (add-hook 'emacs-lisp-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Encryption

#+BEGIN_SRC emacs-lisp
  ;; Don't require password each time on enryption with symmetric cyphers
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  (setf epa-pinentry-mode 'loopback)

  (if IS-WINDOWS
      (progn
        (setq epg-gpg-home-directory "c:/Users/dfkjlsdf/AppData/Roaming/gnupg")
        (setq epg-gpg-program "c:/Program Files (x86)/GnuPG/bin/gpg.exe")
        (setq epg-gpgconf-program "c:/Program Files (x86)/GnuPG/bin/gpgconf.exe")))
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
  ;; open fish for shell
  (setq explicit-shell-file-name "/usr/local/bin/zsh")
  (setenv "INSIDE_EMACS" "true")
#+END_SRC
*** open terminal below
#+BEGIN_SRC emacs-lisp
  (defun hbournis/open-terminal ()
    "Open a terminal.  If less than 3 windows, split and open it below.
  Otherwise open it in current window"
    (interactive)
    (if (< (count-windows) 3)
        (progn
          (unless (ignore-errors
                    (split-window-below))
            (progn
              (other-window 1)
              (split-window-below)))
          (other-window 1)))
    (if IS-WINDOWS
        (eshell)
      ;; (ansi-term explicit-shell-file-name)
      (eshell)))
#+END_SRC
*** Kill the buffer when term exits
#+BEGIN_SRC emacs-lisp
  ;; Kill window when ansi term exits
  ;; Source: https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-term-mode.el
  ;; {{ @see http://emacs-journey.blogspot.com.au/2012/06/improving-ansi-term.html
  ;; kill the buffer when terminal is exited
  (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
    (if (memq (process-status proc) '(signal exit))
        (let ((buffer (process-buffer proc)))
          ad-do-it
            (kill-buffer-and-its-windows buffer))
      ad-do-it))
  (ad-activate 'term-sentinel)

  ;; Kill eshell window on exit
  ;; Source: https://stackoverflow.com/a/51867960
  (defun hbournis/delete-window ()
    (when (not (one-window-p))
      (delete-window)))

  (advice-add 'eshell-life-is-too-much :after 'hbournis/delete-window)
#+END_SRC
*** kill ansiterm without asking on exit
[[https://www.reddit.com/r/emacs/comments/9weic5/how_can_i_disable_ansiterm_prompt/e9k1ggd][Source]]
#+BEGIN_SRC emacs-lisp
  (add-hook 'term-exec-hook
        (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))
#+END_SRC
* Packages
** Common
*** evil-mode
:PROPERTIES:
:VISIBILITY: folded
:END:
**** evil
Vim emulation. It is extended with various packages that provide existing Vim
functionalities. Bellow is a list of the Emacs package with the functionality
it provides in parentheses:

- [[https://github.com/emacs-evil/evil-surround][Evil Surround]]          (surround.vim)
- [[https://github.com/emacs-evil/evil-surround][Evil Lion]]              (vim-lion)
- [[https://github.com/redguardtoo/evil-matchit][Evil Matchit]]           (matchit.vim)
- [[https://github.com/cofi/evil-numbers][Evil Numbers]]           (increment/decrement binary, octal, decimal and hex numbers)
- [[https://github.com/redguardtoo/evil-nerd-commenter][Evil NERD Commenter]]    (The NERD Commenter)
- [[https://github.com/ninrod/evil-string-inflection][Evil String inflection]] (Convert between camelCase, kebab-case, snake_case and UPPER_CASE)

Although Evil mode does a wonderful job of emulating Vim keybinginds when
editing files, in the rest of the Emacs modes (and there are a lot) I find
myself stuck with Emacs' keybindings. Fortunately, there are a number of
packages that aim to bring Vim-sensible keybindings to the rest of them.

I use [[https://github.com/Somelauw/evil-org-mode][evil-org-mode]] mainly for the Org Agenda keybindings and the great
context-aware functionality it adds to the <return> key. For example, if you are
on a list item, pressing it will add a new list item bellow, including a
checkbox, if it is a checklist.. I found the rest of the keybindings distracting.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :pin melpa-stable
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t)
    ;; This is a collection of Evil bindings for the parts of Emacs that Evil does
    ;; not cover properly by default, such as help-mode, M-x calendar, Eshell and more.

    ;; Scroll faster with C-e and C-y
    (define-key evil-normal-state-map "\C-e" (lambda () (interactive) (evil-scroll-line-down 2)))
    (define-key evil-normal-state-map "\C-y" (lambda () (interactive) (evil-scroll-line-up 2)))

    ;; g h takes you to the previous heading and
    ;; g H takes you to one heading up
    (evil-define-key 'motion org-mode-map
      (kbd "g h") 'org-previous-visible-heading
      (kbd "g H") 'outline-up-heading)

    ;; Remap tab to org-cycle in normal mode
    ;; (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
    ;; (evil-define-key 'normal org-mode-map (kbd "S-<tab>") #'org-global-cycle)

    ;; Disable evil mode in shell mode
    ;; (evil-set-initial-state 'shell-mode 'emacs)

    ;; Save and quit ingoring mistakes from keeping shift pressed down
    (evil-ex-define-cmd "Q"  'evil-quit)
    (evil-ex-define-cmd "W"  'evil-write)
    (evil-ex-define-cmd "Wq" 'evil-save-and-close)
    (evil-ex-define-cmd "wQ" 'evil-save-and-close)
    (evil-ex-define-cmd "WQ" 'evil-save-and-close)

    ;; Does not replace clipboard copy with the text selected while in visual mode
    (fset 'evil-visual-update-x-selection 'ignore)
    )
#+END_SRC

**** evil-collection
[[https://github.com/jojojames/evil-collection][Evil Collection]] aims to bring evil mode to every Emacs mode eventually. It has
keybindings for many modes, but I felt that I should enable it for a particular
mode only when it is needed.

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :init
    (defcustom evil-collection-mode-list
      `(eshell
        calendar
        custom
        cus-theme
        deadgrep
        debbugs
        debug
        diff-mode
        dired
        doc-view
        edebug
        elfeed
        emms
        eval-sexp-fu
        flycheck
        ggtags
        git-timemachine
        help
        ibuffer
        image
        image+
        magit
        magit-todos
        neotree
        info
        man
        (package-menu package)
        (pdf pdf-view)
        vc-annotate
        xref
        )
      "The list of modes which will be evilified by `evil-collection-init'.
      Elements are either target mode symbols or lists which `car' is the
      mode symbol and `cdr' the packages to register.
      By default, `minibuffer' is not included because many users find
      this confusing. It will be included if
      `evil-collection-setup-minibuffer' is set to t."
      :type '(repeat (choice symbol sexp))
      :group 'evil-collection)
    :config
    (evil-collection-init))
#+END_SRC
**** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (global-evil-surround-mode))
#+END_SRC
**** evil-lion
Indents to a similar level elements on similar lines e.g. all '=' in variable assignments
#+BEGIN_SRC emacs-lisp
  (use-package evil-lion
    :ensure t
    :after evil
    :config
    (evil-lion-mode))
#+END_SRC
**** evil-matchit
Press % to move between opening and closing tag in any language
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :ensure t
    :after evil
    :config
    (global-evil-matchit-mode t))
#+END_SRC
**** evil-numbers
Increment / decrement binary, octal, decimal and hex literals
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :ensure t
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
#+END_SRC
**** evil-nerd-commenter
Nerd commenter emulation
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :after evil)
#+END_SRC
**** evil-org
Org mode key bindings for evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after (evil org)
    :diminish
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme '(return))
                (require 'evil-org-agenda)
                (evil-org-agenda-set-keys))))
#+END_SRC
**** evil-string-inflection
Changes case of variables (camelCase, kebab-case, snake_case and UPPER_CASE)
#+BEGIN_SRC emacs-lisp
  (use-package evil-string-inflection
    :ensure t
    :after evil
    :pin melpa-stable)
#+END_SRC
**** evil-ediff
Make ediff evil
#+BEGIN_SRC emacs-lisp
  (use-package evil-ediff
    :ensure t
    :after evil
    :defer t)
#+END_SRC
**** Greek Keybindings
Keybindings to allow moving around when writing in Greek

#+BEGIN_SRC emacs-lisp
  ;; Vim Movements
  (define-key evil-normal-state-map "κ" 'evil-previous-visual-line)
  (define-key evil-normal-state-map "ξ" 'evil-next-visual-line)
  (define-key evil-normal-state-map "λ" 'evil-forward-char)
  (define-key evil-normal-state-map "η" 'evil-backward-char)
  (define-key evil-normal-state-map "ς" 'evil-forward-word-begin)
  (define-key evil-normal-state-map "ε" 'evil-forward-word-end)
  (define-key evil-normal-state-map "β" 'evil-backward-word-end)
  (define-key evil-normal-state-map "ν" 'evil-search-next)
  (define-key evil-normal-state-map "Ν" 'evil-search-previous)
  (define-key evil-normal-state-map "γγ" 'evil-goto-first-line)
  (define-key evil-normal-state-map "Γ" 'evil-goto-line)

  ;; Vim Editing
  (define-key evil-normal-state-map "ι" 'evil-insert)
  (define-key evil-normal-state-map "Ι" 'evil-insert-line)
  (define-key evil-normal-state-map "θ" 'undo-tree-undo)
  (define-key evil-normal-state-map "ω" 'evil-visual-char)
  (define-key evil-normal-state-map "Ω" 'evil-visual-line)
  (define-key evil-normal-state-map (kbd "C-ω") 'evil-visual-block)
  (define-key evil-normal-state-map (kbd "C-ο") 'evil-jump-backward)

  (define-key evil-normal-state-map "α" 'evil-append)
  (define-key evil-normal-state-map "Α" 'evil-append-line)
  (define-key evil-normal-state-map "ο" 'evil-open-below)
  (define-key evil-normal-state-map "Ο" 'evil-open-above)
  (define-key evil-normal-state-map "ρ" 'evil-replace)
  (define-key evil-normal-state-map "υ" 'evil-sp-yank)
  (define-key evil-normal-state-map "Υ" 'evil-sp-yank-line)
  (define-key evil-normal-state-map "δ" 'evil-sp-delete)
  (define-key evil-normal-state-map "Δ" 'evil-sp-delete-line)
  (define-key evil-normal-state-map "σ" 'evil-sp-substitute)
  (define-key evil-normal-state-map "Σ" 'evil-sp-change-whole-line)
  (define-key evil-normal-state-map "ψ" 'evil-sp-change)
  (define-key evil-normal-state-map "Ψ" 'evil-sp-change-line)
  (define-key evil-normal-state-map "χ" 'evil-sp-delete-char)
  (define-key evil-normal-state-map "Χ" 'evil-sp-backward-delete-char)
  (define-key evil-normal-state-map "π" 'evil-paste-after)
  (define-key evil-normal-state-map "Π" 'evil-paste-before)

  ;; Evil-ex commands
  (evil-ex-define-cmd "ς"  'evil-write)

  ;; Emacs Globals
  (define-key key-translation-map (kbd "C-ψ") (kbd "C-c"))
  (define-key key-translation-map (kbd "C-χ") (kbd "C-x"))
  (define-key key-translation-map (kbd "C-γ") (kbd "C-g"))
  (define-key key-translation-map (kbd "C-ε") (kbd "C-e"))
  (define-key key-translation-map (kbd "C-υ") (kbd "C-y"))
  (define-key key-translation-map (kbd "¨") (kbd ":"))
#+END_SRC
*** general.el
Improvement on evil-leader. Specify mutliple leaders.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (setq general-override-states '(emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator))
    (general-evil-setup t)
    (general-override-mode)

    ;; In order for Space to work everywhere. "" nil is used to unbind it first.
    (general-create-definer basic-nav-leader :prefix "SPC" :keymaps 'override :states '(normal visual motion) :non-normal-prefix "C-SPC")

    (basic-nav-leader
      "" nil
      "f"         'list-buffers
      "F"         'ivy-switch-buffer-other-window
      "TAB"       'nswbuff-switch-to-next-buffer
      "ESC"       'keyboard-quit
      "<backtab>" 'nswbuff-switch-to-previous-buffer
      "x"         'execute-extended-command
      "k"         'windmove-up
      "j"         'windmove-down
      "l"         'windmove-right
      "h"         'windmove-left
      "K"         'split-window-below
      "J"         'split-window-below-and-switch
      "H"         'split-window-right
      "L"         'split-window-right-and-switch
      "0"         'delete-window
      "1"         'delete-other-windows
      "2"         'split-window-below-and-switch
      "3"         'split-window-right-and-switch
      "d"         'delete-window
      "|"         'toggle-window-split
      "p"         'projectile-find-file
      "s"         'counsel-projectile-ag
      "="         'toggle-light-dark-theme
      "t"         'org-todo
      "ns"        'hbournis/create-scratch-buffer
      "c"         'hbournis/copy-filename-to-clipboard
      "RET"       'hbournis/generic-find-definition
      "r"         'hbournis/lsp-treemacs-references
      "w"         'hydra-window-deluxe-custom/body
      "SPC"       (lambda () (interactive) (hbournis/open-org-file  hbournis/org-main-file))
      "a"         (lambda () (interactive) (hbournis/open-org-file hbournis/org-mobile-file))
      "!"         (lambda () (interactive) (load-file "~/.dotfiles/emacs.d.symlink/init.el"))
      "m"         (lambda () (interactive) (find-file "~/.dotfiles/emacs.d.symlink/init.org"))
      "i"         (lambda () (interactive) (hbournis/open-org-file hbournis/org-inbox-file))
      "z"         (lambda () (interactive) (hbournis/open-org-file hbournis/org-work-file)))

    (general-create-definer extra-tools-leader :prefix "'" :keymaps 'override :states '(normal visual treemacs))
    (extra-tools-leader
      "`"   'hbournis/open-terminal
      "g"   'magit-status
      "/"   'evilnc-comment-or-uncomment-lines             ; Un/Comment current line
      "\\"  'sp-unwrap-sexp
      "["   'wrap-with-parens
      "]"   'org-align-all-tags-right
      "fn"  'flycheck-next-error
      "fp"  'flycheck-previous-error
      "fl"  'flycheck-list-errors
      "i"   'org-toggle-inline-images
      "l"   'cider-ns-refresh
      "d"   'hbournis/generic-open-doc
      "c"   'hbournis/generic-show-repl
      "tf"  'hbournis/generic-run-test-file
      "tt"  'hbournis/generic-run-test-at-point
      "ta"  'hbournis/generic-run-test-all
      "m"   'hbournis/toggle-modeline
      "*"   (lambda() (interactive) (forward-char 1) (insert " ⭐")))

    (general-create-definer extra-tools-alternate-leader :prefix "' '" :keymaps 'override :states '(normal visual))
    (extra-tools-alternate-leader
      "/c"  'evilnc-copy-and-comment-lines                 ; Copy down and comment line
      "lv"  'org-cliplink
      "lp"  'hbournis/insert-url-as-org-link
      "ll"  'hbournis/org-make-word-link-from-clipboard
      "lc"  'hbournis-position-to-kill-ring
      "c"   'org-capture
      "gt"  'git-timemachine-toggle
      "gr"  'git-gutter:revert-hunk
      "gn"  'git-gutter:next-hunk
      "gp"  'git-gutter:previous-hunk
      "gb"  'magit-blame-echo
      "gh"  'magit-log-buffer-file
      "gm"  (lambda () (interactive) (magit-find-file-other-window "master" (format "%s" buffer-file-name)))
      "rf"  'rubocopfmt
      "rb"  'ruby-toggle-block
      "rr"  'projectile-rails-goto-routes
      "rt"  'projectile-rails-find-current-spec
      ;; "t"   'hbournis/insert-timestamp)
      ))
#+END_SRC
*** org-mode
:PROPERTIES:
:VISIBILITY: folded
:END:
**** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin gnu
    :config
    (add-to-list 'auto-mode-alist '("\\.orgtemplate\\'" . org-mode)))
#+END_SRC
**** Org-related packages
***** UNIX_ONLY org-bullets
Disabled on windows because it makes emacs extremely slow
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    ;; Performance fix for windows
    ;; Source: https://github.com/sabof/org-bullets/issues/11#issuecomment-439228372
    (if IS-WINDOWS
        (setq inhibit-compacting-font-caches t))
    (setq org-bullets-bullet-list '("◉" "○" "✹" "◈" "⚇" "⚈" "⚉" "♁" "⊖" "⊗" "⊘"))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))
#+END_SRC
***** org-collector
#+BEGIN_SRC emacs-lisp
  ;; Load org-collector
  (add-to-list 'load-path "~/.emacs.d/lisp/org-collector")
#+END_SRC
***** org-fancy-priorities
Display org priorities as custom strings

#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :diminish
    :hook
    (org-mode . org-fancy-priorities-mode)
    (cfw:calendar-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '((?A . "❗")
                                      (?B . "⬆")
                                      (?C . "⬇")
                                      (?D . "☕")
                                      (?1 . "❗")
                                      (?2 . "⮬")
                                      (?3 . "⮮")
                                      (?4 . "☠"))))
#+END_SRC
***** org-capture-vars
#+BEGIN_SRC emacs-lisp
  ;; Load org-capture-vars
  (add-to-list 'load-path "~/.emacs.d/lisp/org-capture-vars")
  (with-eval-after-load 'org-capture (require 'org-capture-vars))
#+END_SRC
***** org-cliplink
Pretty-copy links from the browser to org with title instead of just url

#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :ensure t
    :config
    (global-set-key (kbd "C-c p b") 'org-cliplink))
#+END_SRC
***** org-agenda-property
Display org properties in the agenda buffer

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda-property
    :ensure t)
#+END_SRC
***** org-reveal
[[https://github.com/yjwen/org-reveal][Presentations]]

Download reveal.js from [[https://revealjs.com/installation/#basic-setup][here]]. Set the org-reveal-root to the extracted folder (the root).

For code, swith to light theme before exporting, so that htmlize will use it on the code blocks.

You can also create speaker notes with a BEGIN_NOTES and END_NOTES
block. pressing "s" while on the presentation will create new browser window for notes

Some defaults:
#+begin_src
#+REVEAL_INIT_OPTIONS: margin: 0.1, minScale:0.2, maxScale:2.5, transition:'concave'
#+REVEAL_THEME: solarized
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by yjwen. </p>
#+REVEAL_PLUGINS: (notes)
#+REVEAL_TITLE_SLIDE: <h1 class="title">%t</h1><h2 class="author">%a</h2><h3 class="email">%e</h3>
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+end_src

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    ;; Set the root
    ;; (setq org-reveal-root "file:///Users/<user>/reveal.js-master")

    ;; Used for using emacs theme to highligh code
    (use-package htmlize
      :ensure t)
    )
#+END_SRC
**** Org Settings
#+BEGIN_SRC emacs-lisp
  (require 'ob-R)
  (require 'ob-sql)

  (ignore-errors
    (require 'org-tempo))

  (setq org-src-fontify-natively t               ;; Use language's syntax highlighting in code blocks
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window     ;; Don't open new window when editing code blocks
        org-todo-keywords '((sequence "TODO(t)" "DOING(i!)" "WAITING(w@/!)" "SOMEDAY(s)" "|" "DONE(d!)" "CANCELED(c@)"))
        org-enforce-todo-dependencies t          ;; Parent can't be DONE until all children are

        org-startup-indented t                   ;; indent on startup
        org-indent-indentation-per-level 2       ;; indent each level by 2
        org-list-indent-offset 2                 ;; indent lists by 2
        org-display-inline-images t              ;; display images in org by default
        org-hide-emphasis-markers t              ;; hide bold, italics etc markers
        org-tags-column (- (window-total-width)) ;; make tags align at right window width
        org-latex-compiler "xelatex"             ;; the only one working for greek (i think?)
        org-log-into-drawer t                    ;; save logs in the drawer of current item
        org-clock-into-drawer "CLOCKING"         ;; name the clock drawer clocking
        org-log-reschedule (quote note)          ;; take a note in the log when rescheduling
        org-blank-before-new-entry (quote ((heading . t) (plain-list-item . auto)))
        org-babel-do-load-languages
        (quote (org-babel-load-languages (quote ((emacs-lisp . t)
                                                 (ruby . t)
                                                 (python . t)
                                                 (haskell . t)
                                                 (js . t)
                                                 (shell . t)
                                                 (R . t)
                                                 (prolog . t)
                                                 (clojurescript . t)
                                                 (plantuml . t)
                                                 (sql . t)
                                                 ))))
        org-export-backends (quote (ascii
                                    html
                                    icalendar
                                    latex
                                    md
                                    odt))
        org-modules '(org-bbdb
                      org-docview
                      org-info
                      org-w3m
                      org-protocol
                      org-bibtex
                      org-collector
                      org-tempo)

        org-lowest-priority ?D
        org-default-priority ?D

        ;; custom colors for priorities
        org-priority-faces '((?A . (:foreground "red" :weight bold))
                             (?B . (:foreground "orange"))
                             (?C . (:foreground "yellow"))
                             (?D . (:foreground "green"))))

  (define-key org-mode-map (kbd "C-k") nil)

  ;; Show only the time when a note is added, instead of 'Note taken on..'
  (setq org-log-note-headings (assq-delete-all 'note org-log-note-headings))
  (add-to-list 'org-log-note-headings '(note . "%t"))
#+END_SRC
**** Org custom functions
#+BEGIN_SRC emacs-lisp
  ;; display week numbers in org calendar
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil :height 0.7)
  (setq calendar-intermonth-text
        '(propertize
          (format "%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))

  ;; Used for the protocol link see below
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform)))

  ;; Keep inherited tags on archived headings.
  ;; source: https://orgmode.org/worg/org-hacks.html
  (defadvice org-archive-subtree
      (before add-inherited-tags-before-org-archive-subtree activate)
    "add inherited tags before org-archive-subtree"
    (org-set-tags (org-get-tags)))
#+END_SRC
**** Org Capture
#+BEGIN_SRC emacs-lisp
  (setq hbournis/org-capture-file
        (if WORK?
            hbournis/org-work-file
          hbournis/org-inbox-file))

  (setq org-capture-templates `(
                                ("p" "Protocol" entry (file+headline hbournis/org-capture-file "Web Capture")
                                 "* %^{Title|[[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]}\nSource: %u, [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE"
                                 :prepend t
                                 :immediate-finish t)
                                ("L" "Protocol Link" entry (file+headline hbournis/org-capture-file "Web Capture")
                                 "* %?[[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n"
                                 :prepend t
                                 :immediate-finish t)
                                ("b" "Book" entry (file+headline hbournis/org-book-file
                                                                 ,(format "%s" (format-time-string "%Y")))
                                 (file "~/.emacs.d/org-templates/book.orgtemplate") :prepend t)
                                ("w" "Work Note" entry (file+datetree
                                                        hbournis/org-work-file)
                                 "** %U - %?")))
#+END_SRC
**** Org Agenda
#+BEGIN_SRC emacs-lisp
  (require 'seq)

  (setq org-agenda-files (seq-filter 'file-exists-p hbournis/org-agenda-files)
        org-agenda-span 14                       ;; org agenda shows 10 days
        org-agenda-start-on-weekday nil          ;; org agenda does not start from beggining of week
        org-agenda-start-day "-2d"               ;; org agenda starts 2 days before today
        org-deadline-warning-days 3              ;; Number of days before expiration that it shows in agenda
        org-agenda-window-setup "only-frame"     ;; open a new full screen frame for org agenda
        org-agenda-block-separator 32            ;; disable seperator between agenda sections
        )

  ;; org agenda label variables
  (setq agenda-label-work-tag "Check & Refile"
        agenda-label-inbox "Inbox"
        agenda-label-calendar "10 days"
        agenda-label-priority-a "High-Priority"
        agenda-label-priority-b "Mid-Priority"
        agenda-label-priority-c "Low-Priority"
        agenda-label-priority-d "Other Todos")

  (setq org-agenda-custom-commands '(("c" "Startup Agenda"
                                      (
                                       (tags "-work+.*"
                                             ((org-agenda-files `(,hbournis/org-inbox-file))
                                              (org-agenda-overriding-header agenda-label-inbox)))
                                       (agenda ""
                                               ((org-agenda-overriding-header agenda-label-calendar)))
                                       (tags "PRIORITY=\"A\""
                                             ((org-agenda-files (remove-if (apply-partially #'equal hbournis/org-inbox-file)
                                                                           org-agenda-files))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-a)))
                                       (tags "PRIORITY=\"B\""
                                             ((org-agenda-files (remove-if (apply-partially #'equal hbournis/org-inbox-file)
                                                                           org-agenda-files))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-b)))
                                       (tags "PRIORITY=\"C\""
                                             ((org-agenda-files (remove-if (apply-partially #'equal hbournis/org-inbox-file)
                                                                           org-agenda-files))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-c)))
                                       ))
                                     ("w" "Work Agenda"
                                      (
                                       (tags-todo "capture_notes"
                                                  ((org-agenda-files `(,hbournis/org-work-file))
                                                   (org-agenda-overriding-header agenda-label-work-tag)))
                                       (agenda ""
                                               ((org-agenda-files `(,hbournis/org-work-file))
                                                (org-agenda-overriding-header agenda-label-calendar)))
                                       (tags "-capture_notes+PRIORITY=\"A\""
                                             ((org-agenda-files `(,hbournis/org-work-file))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-a)))
                                       (tags "-capture_notes+PRIORITY=\"B\""
                                             ((org-agenda-files `(,hbournis/org-work-file))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-b)))
                                       (tags "-capture_notes+PRIORITY=\"C\""
                                             ((org-agenda-files `(,hbournis/org-work-file))
                                              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                              (org-agenda-overriding-header agenda-label-priority-c)))))))
#+END_SRC
*** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-blame-styles
          '((margin
             (margin-format " %C %a" " %s")
             (margin-width . 42)
             (margin-face . magit-blame-margin)
             (margin-body-face magit-blame-dimmed))))

    (evil-define-minor-mode-key 'normal 'magit-blame-mode
      (kbd "<return>")  'magit-show-commit)

    (transient-append-suffix 'magit-push "-u"
      '(1 "=s" "Skip gitlab pipeline" "--push-option=ci.skip"))

    (setq magit-git-executable "/usr/local/bin/git")
    ;; (use-package magit-todos
    ;;   :ensure t
    ;;   :init
    ;;   :config
    ;;   (setq magit-todos-exclude-globs
    ;;         '("/node_modules" "/.git" "/vendor" "/frontend" "/client" "/config"))
    ;;   (magit-todos-mode))
    )
#+END_SRC
*** smerge-mode
Easily resolve git conflicts [[https://github.com/alphapapa/unpackaged.el#smerge-mode][Source]]

#+BEGIN_SRC emacs-lisp
  (use-package smerge-mode
    :after hydra
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (unpackaged/smerge-hydra/body))))
    :config
    (defhydra unpackaged/smerge-hydra
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("ZZ" (lambda ()
              (interactive)
              (save-buffer)
              (bury-buffer))
       "Save and bury buffer" :color blue)
      ("q" nil "cancel" :color blue))

    (set-face-attribute 'smerge-refined-added nil
                        :background "#335533")
    (set-face-attribute 'smerge-lower nil
                        :background "#264026")
    (set-face-attribute 'smerge-refined-removed nil
                        :background "#553333")
    (set-face-attribute 'smerge-upper nil
                        :background "#402626"))
#+END_SRC
*** DISABLED nlinum
Better performance in line numbers?

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t
    :config
    ;; (global-nlinum-mode)
    )
#+END_SRC
*** DISABLED nlinum-relative
Relative line numbers

#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :ensure t
    :hook (purescript-mode . nlinum-relative-mode)
    :config
    ;; (nlinum-relative-setup-evil)
    (setq nlinum-relative-redisplay-delay 0)
    ;; (global-nlinum-relative-mode)
    )
#+END_SRC
*** flycheck
Syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :init (global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers '(javascript-jshint json-jsonlint scss scss-lint ruby-reek)))
    (setq-default flycheck-temp-prefix ".flycheck")
    ;; Set flycheck to only check when saving a file or changin a major mode
    ;; Done mainly for performance on windows
    (if IS-WINDOWS
        (setq flycheck-check-syntax-automatically '(save mode-enable))))
#+END_SRC
**** DISABLED Use local eslint if available
[[https://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable][Source]]

#+BEGIN_SRC emacs-lisp
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC
*** UNIX_ONLY flyspell
Spell checking. Needs the aspell program installed.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish " ✐"
    :config
    (setq ispell-program-name "aspell"))
#+END_SRC
*** DISABLED helm
Completion

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :defer t
    :demand t ;; override defer otherwise define-key are not working
    :pin melpa-stable
    :diminish ;;helm-mode
    :init
    (require 'helm-config)
    :config
    (use-package helm-ag
      :ensure t
      :pin melpa-stable
      :bind
      (("C-c hag"  . helm-ag)
       ("C-c hat"  . helm-ag-this-file)))

    (use-package helm-swoop
      :ensure t
      :pin melpa-stable
      :bind
      (("C-c hs" . helm-swoop)))

    (use-package helm-descbinds
      :ensure t
      :pin melpa-stable
      :bind
      (("C-h b" . helm-descbinds)))

    (setq helm-idle-delay 0.0                 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01          ; this actually updates things reeeelatively quickly.
          helm-move-to-line-cycle-in-source t ; cycle after reaching end or beginning
          helm-scroll-amount 8                ; scroll 8 lines on M-<next>/M-<prior>
          helm-autoresize-max-height 20
          helm-autoresize-min-height 0
          helm-autoresize-mode t              ; autoresize to fit candidates
          helm-ff-file-name-history-use-recentf t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t
          helm-candidate-number-limit 100
          helm-split-window-in-side-p t
          ;; Fuzzy matching
          helm-mode-M-x-fuzzy-match t
          helm-recentf-fuzzy-match t
          helm-completion-in-region-fuzzy-match t
          helm-mode-fuzzy-match t)
    (define-key global-map [remap find-file] 'helm-find-files)
    (define-key global-map [remap occur] 'helm-occur)
    (define-key global-map [remap list-buffers] 'helm-buffers-list)
    (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
    (helm-mode t)
    :bind
    (("M-x"     . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("C-x f"   . helm-recentf)
     ("C-x C-b" . helm-buffers-list)
     ("M-y"     . helm-show-kill-ring)
     ("C-x C-r" . helm-mini)))
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :config
    ;; Required to show the recent commands
    (use-package smex
      :ensure t)

    (use-package wgrep
      :ensure t)

    ;; sort results better
    (use-package flx
      :ensure t)

    (ivy-mode 1)
    ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
    (setq ivy-use-virtual-buffers t)
    ;; number of result lines to display
    ;; (setq ivy-height 10)
    ;; does not count candidates
    (setq ivy-count-format "(%d/%d) ")
    ;; no regexp by default
    ;; (setq ivy-initial-inputs-alist nil)
    ;; configure regexp engine.
    (setq ivy-re-builders-alist
          '((counsel-projectile-find-file . ivy--regex-plus)
            (ivy-switch-buffer . ivy--regex-plus)
            (counsel-projectile-rg . ivy--regex-plus)
            (counsel-rg . ivy--regex-plus)
            (counsel-ag . ivy--regex-plus)
            (t   . ivy--regex-fuzzy)))
    ;; Set ivy for completion in projectile
    (setq projectile-completion-system 'ivy)
    (define-key global-map [remap list-buffers] 'ivy-switch-buffer)
    (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
    (define-key ivy-minibuffer-map (kbd "<S-return>") 'ivy-immediate-done)
    (global-set-key (kbd "C-s") 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x f") 'counsel-recentf))
#+END_SRC
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :pin melpa-stable
    :diminish " P"
    :config
    (setq projectile-mode-line
          (format " [%s]"
                  (projectile-project-name))
          projectile-globally-ignored-directories (append
                                                   projectile-globally-ignored-directories
                                                   '(".stversions" "vendor")))
    (if IS-WINDOWS
        (setq projectile-indexing-method 'alien))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode)))
#+END_SRC
*** company
Autocompletion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish
    :pin melpa-stable
    :hook
    (after-init . global-company-mode)
    :config
    ;; Disable autocompletion in org files
    (setq company-global-modes '(not org-mode)
          company-idle-delay 0.0 ;; default is 0.2
          company-minimum-prefix-length 1)

    ;; Change keybindings for navigating results
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
    :bind
    (("C-;" . company-complete)))
#+END_SRC
*** DISABLED good-scroll
#+begin_src emacs-lisp
  (use-package good-scroll
    :ensure t
    :config
    (good-scroll-mode 1))
#+end_src
*** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (ruby-mode . lsp-deferred)
    :hook (go-mode . lsp-deferred)
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-prefer-flymake nil
          lsp-headerline-breadcrumb-enable nil
          lsp-modeline-diagnostics-enable t
          lsp-idle-delay 0.800 ; performance
          lsp-log-io nil  ; if set to true can cause a performance hit
          )

    (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode
      :config
      (setq lsp-ui-doc-enable nil
            lsp-ui-imenu-enable nil
            lsp-ui-peek-enable nil
            lsp-ui-sideline-enable nil
            lsp-line-ignore-duplicate t))

    (use-package lsp-ivy
      :ensure t
      :commands lsp-ivy-workspace-symbol)

    (use-package lsp-treemacs
      :ensure t
      :commands (lsp-treemacs-errors-list lsp-treemacs-references)
      :config
      (defun hbournis/lsp-treemacs-references ()
        (interactive)
        (hbournis/call-with-prefix 'lsp-treemacs-references))))
#+end_src
*** editorconfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :diminish
    :config
    (editorconfig-mode 1))
#+END_SRC
*** undo tree mode
visualize undo

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t
          undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-tree-history"))
          undo-tree-visualizer-diff t))
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :pin melpa-stable
    :diminish
    :config
    (require 'smartparens-config)
    (add-hook 'emacs-lisp-mode-hook 'smartparens-strict-mode)
    (add-hook 'typescript-mode-hook 'smartparens-mode)
    (add-hook 'web-mode-hook 'smartparens-mode)
    (add-hook 'js-mode-hook 'smartparens-strict-mode)
    ;; (add-hook 'html-mode-hook 'smartparens-strict-mode)
    (add-hook 'ruby-mode-hook 'smartparens-strict-mode)
    (add-hook 'python-mode-hook 'smartparens-strict-mode)
    (add-hook 'sh-mode-hook 'smartparens-strict-mode)
    (add-hook 'clojure-mode-hook 'smartparens-strict-mode)
    (add-hook 'clojurescript-mode-hook 'smartparens-strict-mode)
    (add-hook 'go-mode-hook 'smartparens-strict-mode)
    (add-hook 'svelte-mode-hook 'smartparens-mode)

    (show-smartparens-global-mode t)

    (use-package evil-smartparens
      :ensure t
      :diminish
      :config
      (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))
#+END_SRC
*** recentf
open recently closed files

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure t
    :config
    (setq recentf-saved-items 100
          recentf-max-menu-items 15
          recentf-save-file "~/.emacs.d/etc/recentf"
          recentf-exclude '("commit_msg" "commit_editmsg"))
    ;; periodically save list
    ;; (run-at-time nil (* 5 60) 'recentf-save-list)
    )
#+END_SRC
*** windmove

#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :ensure t)
#+END_SRC

*** DISABLED ace-window
move between windows by pressing a key. Disabled in favor of windmove mapped to
<leader> hjkl.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (set-face-attribute 'aw-leading-char-face nil :foreground "deep sky blue" :weight 'bold :height 2.0)
    (set-face-attribute 'aw-mode-line-face nil :inherit 'mode-line-buffer-id :foreground "lawn green")
    (setq aw-keys   '(?a ?s ?d ?f ?j ?k ?l)
          aw-dispatch-always t
          aw-dispatch-alist
          '((?x aw-delete-window     "ace - delete window")
            (?c aw-swap-window       "ace - swap window")
            (?n aw-flip-window)
            (?h aw-split-window-vert "ace - split vert window")
            (?v aw-split-window-horz "ace - split horz window")
            (?m delete-other-windows "ace - maximize window")
            (?g delete-other-windows)
            (?b balance-windows)
            (?u winner-undo)
            (?r winner-redo)))
    (ace-window-display-mode t))
#+END_SRC

*** desktop
Save emacs session

#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :ensure t
    :config
    (setq desktop-path '("~/.emacs.d/etc/")
          desktop-dirname "~/.emacs.d/etc/"
          desktop-base-file-name "emacs-desktop"
          desktop-globals-to-save
          (append '((extended-command-history . 50)
                    (file-name-history . 400)
                    (grep-history . 50)
                    (compile-history . 50)
                    (minibuffer-history . 100)
                    (query-replace-history . 100)
                    (read-expression-history . 100)
                    (regexp-history . 100)
                    (regexp-search-ring . 100)
                    (search-ring . 50)
                    (shell-command-history . 50)
                    tags-file-name
                    register-alist)))
    (desktop-save-mode t))
#+END_SRC
*** Workgroups/Perspectives/Layouts
**** DISABLED workgroups2
Pros:
+ Saves/Restores state on shutdown
+ Does what i want
Cons:
- Slow startup
- Opens everything from all workgroups
- Does not show current workgroup in powerline
- Breaks powerline and evil mode for some buffers

Would use it if it did not load everything at once and worked with powerline
#+BEGIN_SRC emacs-lisp
  (use-package workgroups2
    :ensure t
    :config
    ;; Change prefix key (before activating WG)
    (setq wg-prefix-key (kbd "C-c z"))

    ;; Change workgroups session file
    (setq wg-use-default-session-file t)
    (setq wg-default-session-file "~/Dropbox/emacs/.emacs_workgroups")
    (setq wg-load-last-workgroup nil)
    (setq wg-open-this-wg nil)

    ;; Set your own keyboard shortcuts to reload/save/switch WGs:
    ;; "s" == "Super" or "Win"-key, "S" == Shift, "C" == Control
    (global-set-key (kbd "<pause>")     'wg-reload-session)
    (global-set-key (kbd "C-S-<pause>") 'wg-save-session)
    (global-set-key (kbd "s-z")         'wg-switch-to-workgroup)
    (global-set-key (kbd "s-/")         'wg-switch-to-previous-workgroup)

    ;; Mode Line changes
    ;; Display workgroups in Mode Line?
    (setq wg-mode-line-display-on t)          ; Default: (not (featurep 'powerline))
    (setq wg-flag-modified t)                 ; Display modified flags as well
    (setq wg-mode-line-decor-left-brace "["
          wg-mode-line-decor-right-brace "]"  ; how to surround it
          wg-mode-line-decor-divider ":")
    (workgroups-mode 1))
#+END_SRC
**** DISABLED perspective-el
Pros:
+ Easy to use, understandable
+ Works well with powerline, shoes all available perspectives
+ Lightweight
Cons:
- Does not persist perspectives on shutdown
- If installed with use-package it does not work (why?), must use package installer
- Will [[https://github.com/nex3/perspective-el/issues/64][potentially break with Emacs 26]]

Would choose it, if it persisted/restored perspectives
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :ensure t
    :config
    (persp-mode))
#+END_SRC
**** DISABLED persp-mode
Pros:
+ Lightweight like perspective
+ Works with powerline
+ Saves/restores previous perspectives
+ can select perspective none
Cons:
- Can't save terminal windows (unlike workgroups2) [[https://github.com/Bad-ptr/persp-mode.el/issues/76][Issue]] (managed to save them,
  but requires custom code see bellow, also opening in Dropbox/org directory)
- Stops showing org-agenda on startup for some reason [[https://github.com/Bad-ptr/persp-mode.el/issues/91][Issue]]
- Shows the album.org file on startup even though i never opened it
- Seems too buggy

#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :ensure t
    :defer 10
    :config
    (setq persp-auto-save-fname "~/Dropbox/emacs/persp-confs")
    (persp-def-buffer-save/load
     :mode 'shell-mode
     :mode-restore-function #'(lambda (_mode) (ansi-term explicit-shell-file-name)) ; or #'identity if you do not want to start shell process
     :tag-symbol 'def-shell
     :save-vars '(major-mode default-directory))
    (persp-mode 1))
#+END_SRC
**** eyebrowse
Pros:
+ Fast, light
+ Depends on desktop for persistence
+ nice modeline indicator
+ shows all available werkgroups
+ Fails gracefully on terminal, showing scratch buffer instead
+ org agenda works at startup
Cons:
- not restoring terminals
- Can't share save file, must share entire desktop save file
- Does not start on the 1st workgroup, starts on the last used, which causes it
  to be overriden by org agenda

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config
    (add-to-list 'window-persistent-parameters '(window-side . writable))
    (add-to-list 'window-persistent-parameters '(window-slot . writable))
    (eyebrowse-mode t))
#+END_SRC
*** git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :diminish
    :config
    (setq git-gutter:update-interval 2
          git-gutter:hide-gutter t)
    (global-git-gutter-mode t))
#+END_SRC
*** gitignore-templates
An Emacs Package for GitHub .gitignore templates

#+BEGIN_SRC emacs-lisp
  (use-package gitignore-templates
    :ensure t)
#+END_SRC
*** ag

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :config
    (setq ag-highlight-search t
          ag-reuse-window t))
#+END_SRC
*** which-key
Display the keys available after pressing C-x for example.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer t
    :diminish
    :config
    ;;(setq which-key-idle-delay 0.2)
    ;;(which-key-setup-side-window-right-bottom)
    (which-key-mode))
#+END_SRC
*** dtrt-indent
guesses the correct indentation

#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :ensure t
    :hook (diminish 'dtrt-indent-mode)
    :config
    (dtrt-indent-mode t))
#+END_SRC
*** DISABLED beacon-mode
highlights cursor after a jump. Disabled in favor of ~global-hl-line-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode t))
#+END_SRC
*** lorem-ipsum
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC
*** rainbow-mode
shows the color of hex color codes as their background

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :defer t
    :diminish
    :config
    ;; enable it by default in org mode
    ;; (defun rainbow-mode-hook ()
      ;; (rainbow-mode t))
    ;; (add-hook 'org-mode-hook 'rainbow-mode-hook)
    )
#+END_SRC
*** DISABLED emojify
Show emojis

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook
    (org-agenda-mode . emojify-mode)
    :config
    (setq agenda-label-work-tag  (concat ":bangbang: " agenda-label-work-tag)
          agenda-label-inbox (concat ":envelope-with-arrow: " agenda-label-inbox)
          agenda-label-calendar (concat ":calendar-spiral: " agenda-label-calendar)
          agenda-label-priority-a (concat ":exclamation: " agenda-label-priority-a)
          agenda-label-priority-b (concat ":warning: " agenda-label-priority-b)
          agenda-label-priority-c (concat ":beer: " agenda-label-priority-c)
          agenda-label-priority-d (concat ":coffee: " agenda-label-priority-d)))
#+end_src
*** diminish
hide specific modes from the modeline

#+begIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))

    (diminish 'auto-fill-function)
    (diminish 'auto-revert-mode)
    (diminish 'eldoc-mode))
#+END_SRC
*** exec-path-from-shell
Get environment variables from the shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
*** calfw
Calendar framework

#+BEGIN_SRC emacs-lisp
  (use-package calfw
    :ensure t
    :pin melpa-stable
    :init
    (use-package calfw-org
      :ensure t
      :pin melpa-stable)

    ;; (use-package calfw-gcal
    ;;   :ensure t
    ;;   :config
    ;;   (require 'calfw-gcal))

    :config
    (require 'calfw-org))
#+END_SRC
*** ranger
Emulates ranger in emacs. Replaces dired when browsing folders.

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t
    :config
    (setq ranger-override-dired 'ranger
          ranger-show-hidden t
          ranger-modify-header t
          ranger-preview-file nil
          ranger-show-literal t
          ranger-max-preview-size 10
          ranger-dont-show-binary t
          ranger-cleanup-on-disable t
          ranger-excluded-extensions '("mkv" "iso" "mp4" "mp3" "avi" "log"))
    (ranger-override-dired-mode t)
    ;; Remap C-h to its normal functionality
    (define-key ranger-mode-map "\C-h k" 'describe-key)
    ;; Create directory with "cd" like in Treemacs
    (define-key ranger-mode-map "cd" (lambda () (interactive) (progn (call-interactively #'dired-create-directory) (ranger-refresh))))
    ;; Create file with "cf" like in Treemacs
    (define-key ranger-mode-map "cf" (lambda () (interactive) (progn (call-interactively #'hbournis/dired-create-file) (ranger-refresh)))))
#+END_SRC
*** DISABLED pdf-tools
Disabled for now because it requires extra packages to be installed in the
system in order to work.
#+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :pin melpa-stable
      :config
      (pdf-tools-install))
#+END_SRC
*** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :config
    (evil-define-minor-mode-key 'normal 'git-timemachine-mode
      (kbd "<return>")  'git-timemachine-show-commit))
#+END_SRC
*** DISABLED neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :pin melpa-stable
    :config
    (global-set-key [f8] 'neotree-toggle))
#+END_SRC
*** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
            treemacs-python-executable          "python3"
            treemacs-file-event-delay           5000
            treemacs-follow-after-init          t
            treemacs-follow-recenter-distance   0.1
            treemacs-goto-tag-strategy          'refetch-index
            treemacs-indentation                2
            treemacs-indentation-string         " "
            treemacs-is-never-other-window      nil
            treemacs-no-png-images              nil
            treemacs-project-follow-cleanup     nil
            treemacs-recenter-after-file-follow nil
            treemacs-recenter-after-tag-follow  nil
            treemacs-show-hidden-files          t
            treemacs-silent-filewatch           nil
            treemacs-silent-refresh             nil
            treemacs-sorting                    'alphabetic-case-insensitive-asc
            treemacs-tag-follow-cleanup         t
            treemacs-tag-follow-delay           1.5
            treemacs-width                      35)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'extended))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ([f8] . treemacs)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)
#+END_SRC
*** dumb-jumb
#+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (setq dumb-jump-selector 'ivy))
#+end_src
*** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :config
    (require 'hydra-examples)

    (defhydra hydra-zoom (global-map "<f2>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out"))

    (defhydra hydra-global-org (:color blue)
      "Org"
      ("t" org-timer-start "Start Timer")
      ("s" org-timer-stop "Stop Timer")
      ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
      ("p" org-timer "Print Timer") ; output timer value to buffer
      ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
      ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
      ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
      ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
      ("l" org-capture-goto-last-stored "Last Capture"))

    (defhydra hydra-window-deluxe-custom (global-map "<f3>")
      "
  Move^^  ^Resize^ ^Split^          ^Switch^
  --------------------------------------------
  _h_ ←   _H_ X←   _v_ertical       _b_uffer
  _j_ ↓   _J_ X↓   _x_ horizontal   _f_ind
  _k_ ↑   _K_ X↑   _z_ undo         _d_elete
  _l_ →   _L_ X→   _Z_ redo         _s_wap
  "
      ("h" windmove-left )
      ("j" windmove-down )
      ("k" windmove-up )
      ("l" windmove-right )
      ("H" hydra-move-splitter-left)
      ("J" hydra-move-splitter-down)
      ("K" hydra-move-splitter-up)
      ("L" hydra-move-splitter-right)
      ("b" helm-mini)
      ("f" helm-find-files)
      ("v" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right))
       )
      ("x" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down))
       )
      ("s" (lambda ()
             (interactive)
             (ace-window 4)
             (add-hook 'ace-window-end-once-hook
                       'hydra-window/body)))
      ("d" delete-window)
      ("z" (progn
             (winner-undo)
             (setq this-command 'winner-undo))
       )
      ("Z" winner-redo)
      )
    (global-set-key (kbd "M-#") 'hydra-windows/body))
#+END_SRC
*** Docker
**** DISABLED docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :config
    (setenv "DOCKER_TLS_VERIFY" "1")
    (setenv "DOCKER_HOST" "tcp://10.11.12.13:2376")
    (setenv "DOCKER_CERT_PATH" "/Users/foo/.docker/machine/machines/box")
    (setenv "DOCKER_MACHINE_NAME" "box"))
#+END_SRC
**** NOT_WINDOWS dockerfile-mode
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC
**** NOT_WINDOWS docker-compose-mode
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :ensure t)
#+END_SRC
*** restclient.el
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.rest\\'" . restclient-mode)))
#+END_SRC
*** yasnippet
[[https://github.com/AndreaCrotti/yasnippet-snippets][Snippets]]

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (add-hook 'tide-mode-hook
              #'(lambda ()
                  (yas-activate-extra-mode 'js-mode)))

    (use-package yasnippet-snippets
      :ensure t)

    (use-package react-snippets
      :ensure t)

    (yas-global-mode 1))
#+END_SRC
*** olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
    :pin melpa-stable
    :config
    (setq-default olivetti-body-width 80)
    (setq-default olivetti-hide-mode-line t))
#+END_SRC
*** MAC_ONLY elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :defer t
    :bind (:map elfeed-search-mode-map
                ("q" . 'kill-this-buffer)
                ("Q" . 'kill-this-buffer)
                ("m" . elfeed-toggle-star)
                ("M" . elfeed-toggle-star))
    :config
    (defalias 'elfeed-toggle-star
      (elfeed-expose #'elfeed-search-toggle-all 'star))

    (use-package elfeed-org
      :ensure t
      :config
      (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))
      (elfeed-org))

    ;; (use-package elfeed-goodies
    ;;   :ensure t
    ;;   :config
    ;;   (elfeed-goodies/setup))

    (use-package elfeed-dashboard
      :ensure t
      :config
      (setq elfeed-dashboard-file "~/org/elfeed-dashboard.org")
      ;; update feed counts on elfeed-quit
      (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links)
      (add-to-list 'evil-emacs-state-modes 'elfeed-dashboard-mode)))
#+END_SRC
*** nswbuff
Go to next/previous buffer in a project-aware context

#+begin_src emacs-lisp
  (use-package nswbuff
    :ensure t
    :config
    (setq nswbuff-buffer-list-function #'nswbuff-projectile-buffer-list
          nswbuff-clear-delay 0
          nswbuff-exclude-buffer-regexps '("^ .*" "^\\*.*\\*")))

#+end_src
*** aggressive-indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode t)
    (add-to-list 'aggressive-indent-excluded-modes '(elisp-mode js2-mode web-mode typescript-mode sql-mode)))
#+end_src
*** csv-mode
#+begin_src emacs-lisp
  (use-package csv-mode
    :ensure t)
#+end_src
*** deadgrep
#+begin_src emacs-lisp
  (use-package deadgrep
    :ensure t
    :config
    (global-set-key (kbd "<f5>") #'deadgrep))
#+end_src
*** itail
see logs easily

#+begin_src emacs-lisp
  (use-package itail
    :ensure t)
#+end_src
** Programming Language Specific
*** HTML/CSS
**** emmet-mode
Use C-j to expand.

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    ;; Autostart on any markup modes and CSS
    (define-key emmet-mode-keymap [tab] 'emmet-expand-line)
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC
**** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    (("\\.html?\\'" . web-mode)
     ("\\.tsx\\'" . web-mode)
     ("\\.vue\\'" . web-mode)
     ("\\.jsx\\'" . web-mode)
     ("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode))
    :hook
    (web-mode . display-line-numbers-mode)
    (html-mode . display-line-numbers-mode)
    :config
    (setq web-mode-enable-css-colorization t
          web-mode-enable-auto-pairing t
          web-mode-enable-comment-keywords t
          web-mode-enable-current-element-highlight t
          web-mode-enable-auto-indentation nil

          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-block-padding 2
          web-mode-comment-style 2)

    (set-face-attribute 'web-mode-function-name-face nil
                        :foreground "#de935f")

    (flycheck-add-mode 'javascript-eslint 'web-mode))
#+END_SRC

**** DISABLED Improving the JSX syntax-hightlighting in web-mode
I don't even remember what this is

#+BEGIN_SRC emacs-lisp
;; for better jsx syntax-highlighting in web-mode
;; - courtesy of Patrick @halbtuerke
(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
    (let ((web-mode-enable-part-face nil))
      ad-do-it)
    ad-do-it))
#+END_SRC
**** haml-mode
#+begin_src emacs-lisp
  (use-package haml-mode
    :ensure t
    :hook
    (haml-mode . display-line-numbers-mode)
    :config
    (add-to-list 'auto-mode-alist '("\\.hamlc\\'" . haml-mode)))
#+end_src
*** JavaScript
Some guides:
- https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html
- https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html

**** js-mode
#+begin_src emacs-lisp
  (setq js-indent-level 2)
#+end_src
**** DISABLED company-tern
JavaScript auto-completion

#+BEGIN_SRC emacs-lisp
  (use-package company-tern
    :ensure t
    :pin melpa-stable
    :hook (js2-mode . tern-mode)
    :config
    (add-to-list 'company-backends 'company-tern))
#+END_SRC
**** DISABLED js2-mode
Improved JavaScript editing mode

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :pin melpa-stable
    :mode (("\\.js\\'" . js2-mode))
    :hook (js2-mode . display-line-numbers-mode))
#+END_SRC
**** DISABLED js2-highlight-vars
#+BEGIN_SRC emacs-lisp
  (use-package js2-highlight-vars
    :ensure t
    :diminish
    :hook
    (js2-mode . js2-highlight-vars-mode))
#+END_SRC
**** DISABLED rjsx-mode
Better syntax highlighting for jsx files

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :hook (rjsx-mode . display-line-numbers-mode)
    :config
    (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode)))
#+END_SRC
**** json-mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC
**** typescript-mode
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :hook
    (typescript-mode . display-line-numbers-mode)
    :config
    (setq typescript-indent-level 2))
#+END_SRC
**** DISABLED tide (typescript)
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    :init
    (setq tide-tsserver-executable "node_modules/typescript/bin/tsserver")
    :after (typescript-mode company flycheck)
    :config
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1)
      (aggressive-indent-mode -1))

    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)

    ;; formats the buffer before saving
    ;; (add-hook 'before-save-hook 'tide-format-before-save)

    (add-hook 'typescript-mode-hook #'setup-tide-mode)
    (add-hook 'typescript-mode-hook 'tide-hl-identifier-mode)

    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))

    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode))
#+END_SRC
**** DISABLED ng2-mode (angular)
#+BEGIN_SRC emacs-lisp
  (use-package ng2-mode
    :ensure t)
#+END_SRC
**** mocha
Customized for jest [[https://github.com/scottaj/mocha.el/issues/3#issuecomment-318919735][Source]]

#+BEGIN_SRC emacs-lisp
  (use-package mocha
    :ensure t
    :commands (mocha-test-project
               mocha-debug-project
               mocha-test-file
               mocha-debug-file
               mocha-test-at-point
               mocha-debug-at-point)
    :config
    ;; Clear up stray ansi escape sequences.
    (defvar jj*--mocha-ansi-escape-sequences
      ;; https://emacs.stackexchange.com/questions/18457/stripping-stray-ansi-escape-sequences-from-eshell
      (rx (or
           "^[\\[[0-9]+[a-z]"
           "�[1A"
           "�[999D")))

    (defun jj*--mocha-compilation-filter ()
      "Filter function for compilation output."
      (ansi-color-apply-on-region compilation-filter-start (point-max))
      (save-excursion
        (goto-char compilation-filter-start)
        (while (re-search-forward jj*--mocha-ansi-escape-sequences nil t)
          (replace-match ""))))

    (advice-add 'mocha-compilation-filter :override 'jj*--mocha-compilation-filter)

    ;; https://github.com/scottaj/mocha.el/issues/3
    (defcustom mocha-jest-command "node_modules/jest/bin/jest.js --colors"
      "The path to the jest command to run."
      :type 'string
      :group 'mocha)

    (defun mocha-generate-command--jest-command (debug &optional filename testname)
      "Generate a command to run the test suite with jest.
  If DEBUG is true, then make this a debug command.
  If FILENAME is specified run just that file otherwise run
  MOCHA-PROJECT-TEST-DIRECTORY.
  IF TESTNAME is specified run jest with a pattern for just that test."
      (let ((target (if testname (concat " --testNamePattern \"" testname "\"") ""))
            (path (if (or filename mocha-project-test-directory)
                      (concat " --testPathPattern \""
                              (if filename filename mocha-project-test-directory)
                              "\"" " --config=\"jest.config.ts\"")
                    ""))
            (node-command
             (concat mocha-which-node
                     (if debug (concat " --debug=" mocha-debug-port) ""))))
        (concat node-command " "
                mocha-jest-command
                target
                path)))

    (advice-add 'mocha-generate-command
                :override 'mocha-generate-command--jest-command))
#+END_SRC
**** jasmine
#+BEGIN_SRC emacs-lisp
  (use-package jasminejs-mode
    :ensure t
    :defer t
    :after yasnippet
    :hook
    ((jasminejs-mode . #'jasminejs-add-snippets-to-yas-snippet-dirs)))
#+END_SRC
**** svelte
#+begin_src emacs-lisp
  (use-package svelte-mode
    :ensure t
    :hook (svelte-mode . lsp-deferred)
    :mode (("\\.svelte\\'" . svelte-mode)))
#+end_src
*** PureScript
**** DISABLED purescript-mode
#+BEGIN_SRC emacs-lisp
  (use-package purescript-mode
    :ensure t
    :hook (purescript-mode . display-line-numbers-mode))
#+END_SRC
**** DISABLED psc-ide
#+BEGIN_SRC emacs-lisp
  (use-package psc-ide
    :ensure t
    :config
    (add-hook 'purescript-mode-hook
              (lambda ()
                (psc-ide-mode)
                (company-mode)
                (flycheck-mode)
                (turn-on-purescript-indentation))))
#+END_SRC
*** Java
**** NOT_WINDOWS java-mode (CC mode)
#+BEGIN_SRC emacs-lisp
  ;; Set indentation to 4 for java
  (setq-default c-basic-offset 4)
#+END_SRC
**** DISABLED eclim
#+BEGIN_SRC emacs-lisp
  (use-package eclim
    :ensure t
    :hook
    (java-mode . eclim-mode)
    (java-mode . display-line-numbers-mode)
    :config
    ;; Set to nil to start eclim outside of emacs
    (setq eclimd-autostart nil)
    (setq help-at-pt-display-when-idle t)
    (setq help-at-pt-timer-delay 0.1)
    (help-at-pt-set-timer)

    (setq eclim-eclipse-dirs '("/Applications/EclipseJEE.app/Contents/Eclipse"))
    (setq eclim-executable  "/Applications/EclipseJEE.app/Contents/Eclipse/plugins/org.eclim_2.7.2/bin/eclim")

    (use-package company-emacs-eclim
      :ensure t
      :config
      (company-emacs-eclim-setup)))
#+END_SRC
*** Markdown
**** markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :pin melpa-stable
    :commands (markdown-mode gfm-mode)
    :hook (markdown-mode . flyspell-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
*** YAML
**** yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :hook
    (yaml-mode . display-line-numbers-mode)
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)
                                  '("\\.yaml\\'" . yaml-mode))

    ;;  Unlike python-mode, this mode follows the Emacs convention of not
    ;; binding the ENTER key to `newline-and-indent'.  To get this
    ;; behavior, add the key definition to `yaml-mode-hook':
    (add-hook 'yaml-mode-hook
              '(lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+END_SRC
*** Ruby
**** ruby-mode
#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :ensure t
    :mode
    (("\\.rbi?\\'" . ruby-mode))
    :config
    (add-hook 'ruby-mode-hook 'display-line-numbers-mode)
    (setq ruby-insert-encoding-magic-comment nil))
#+END_SRC
**** MAC_ONLY inf-ruby
#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby
    :ensure t
    :config
    (setq inf-ruby-console-environment "development")
    (add-hook 'after-init-hook 'inf-ruby-switch-setup))
#+END_SRC
**** MAC_ONLY projectile-rails
#+BEGIN_SRC emacs-lisp
  (use-package projectile-rails
    :ensure t
    :requires projectile
    :pin melpa-stable
    :diminish
    :config
    (projectile-rails-global-mode))
#+END_SRC
**** MAC_ONLY rspec-mode
Enhancements to ruby-mode for RSpec files.

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :ensure t
    :config
    (setq compilation-scroll-output t
          rspec-use-spring-when-possible nil
          rspec-allow-multiple-compilation-buffers t
          rspec-spec-command "rspec --fail-fast")
    (eval-after-load 'rspec-mode '(rspec-install-snippets)))
#+END_SRC
**** MAC_ONLY minitest-mode
#+BEGIN_SRC emacs-lisp
  (use-package minitest
    :ensure t
    :hook (ruby-mode . minitest-mode)
    :config
    (setq minitest-use-rails t))
#+END_SRC
**** MAC_ONLY bundler
Interact with bundler with Emacs

#+BEGIN_SRC emacs-lisp
  (use-package bundler
    :ensure t)
#+END_SRC
**** MAC_ONLY rubocop
#+BEGIN_SRC emacs-lisp
  (use-package rubocop
    :ensure t
    :config
    ;; Load rubocopfmt
    (add-to-list 'load-path "~/.emacs.d/lisp/rubocopfmt.el")
    (require 'rubocopfmt)
    ;; (add-hook 'ruby-mode-hook #'rubocopfmt-mode)
    (diminish 'rubocopfmt-mode)
    ;; Use Gemfile's Rubocop if it exists, otherwise use global
    (setq rubocopfmt-use-bundler-when-possible nil))
#+END_SRC
**** MAC_ONLY robe
#+begin_src emacs-lisp
  (use-package robe
    :ensure t
    :diminish
    :config
    (eval-after-load 'company
      '(push 'company-robe company-backends))
    (global-robe-mode))
#+end_src
*** Haskell
**** DISABLED intero
[[https://github.com/chrisdone/intero][Deprecated]]
replace with: https://github.com/jyp/dante

#+BEGIN_SRC emacs-lisp
  (use-package intero
    :ensure t
    :pin melpa-stable
    :config
    (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC
*** R & Julia
**** DISABLED ESS (Emacs Spearks Statistics)
[[http://ess.r-project.org/][ESS]] provides modes for R and Julia. When I tried to install it from master it
was broken, so melpa-stable should be preferred.

#+BEGIN_SRC emacs-lisp
    (use-package ess
      :ensure t
      :pin melpa-stable)
#+END_SRC
*** Prolog
**** DISABLED Prolog-mode
#+BEGIN_SRC emacs-lisp
(setq prolog-system 'swi)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+END_SRC
**** DISABLED Ediprolog
"[[https://github.com/triska/ediprolog][ediprolog]] lets you interact with SWI-Prolog in all Emacs buffers. You can
consult Prolog programs and evaluate embedded queries."

#+BEGIN_SRC emacs-lisp
  (use-package ediprolog
    :ensure t
    :config
    (global-set-key [f10] 'ediprolog-dwim))
#+END_SRC
**** DISABLED ob-prolog
Org-babel support for prolog.

#+BEGIN_SRC emacs-lisp
  (use-package ob-prolog
    :ensure t)
#+END_SRC
*** Clojure/ClojureScript
**** NOT_WORK clojure-mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :hook
    (clojure-mode . display-line-numbers-mode)
    :config
    (require 'flycheck-clj-kondo)

    ;; Start cider in test env in order to run tests
    ;; Source: https://stackoverflow.com/questions/18304271/how-do-i-choose-switch-leiningen-profiles-with-emacs-nrepl
    (defun cider-jack-in-test-env ()
      (interactive)
      (let ((lein-params "with-profile +test repl :headless"))
        (message "lein-params set to: %s" lein-params)
        (set-variable 'cider-lein-parameters lein-params)
        (cider-jack-in '()))))

#+END_SRC
**** NOT_WORK cider
CIDER extends Emacs with support for interactive programming in Clojure.

#+begin_src emacs-lisp
  (use-package cider
    :ensure t
    :config
    (setq cider-repl-history-file "~/.emacs.d/cider-history"))
#+end_src
**** NOT_WORK flycheck-clojure
#+begin_src emacs-lisp
  (use-package flycheck-clojure
    :ensure t
    :config
    (use-package flycheck-pos-tip
      :ensure t
      :config
      (with-eval-after-load 'flycheck
        (flycheck-pos-tip-mode)))
    (use-package flycheck-clj-kondo
      :ensure t)
    (eval-after-load 'flycheck '(flycheck-clojure-setup))
    (eval-after-load 'flycheck
      '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
    (eval-after-load 'flycheck
      (dolist (checker '(clj-kondo-clj clj-kondo-cljs clj-kondo-cljc clj-kondo-edn))
        (setq flycheck-checkers (cons checker (delq checker flycheck-checkers))))))
#+end_src
**** DISABLED ob-clojurescript
#+BEGIN_SRC emacs-lisp
  (use-package ob-clojurescript
    :ensure t)
#+END_SRC
*** Latex
**** NOT_WINDOWS Auctex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)
#+END_SRC
**** DISABLED latex-preview-pane
#+BEGIN_SRC emacs-lisp
  (use-package latex-preview-pane
    :ensure t
    :config
    (latex-preview-pane-enable))
#+END_SRC
*** PlantUML
**** DISABLED plantuml-mode
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (require 'ob-plantuml) ;; org blocks don't work without this
    (setq org-plantuml-jar-path
          ;; (expand-file-name "/usr/local/Cellar/plantuml/1.2018.5/libexec/plantuml.jar"))
          (expand-file-name "/usr/local/bin/plantuml"))
    (use-package flycheck-plantuml
      :ensure t
      :config
      (flycheck-plantuml-setup)))
#+END_SRC
*** go
**** NOT_WORK go mode
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook
    (go-mode . display-line-numbers-mode)
    :config
    (add-hook 'go-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                          #'gofmt-before-save
                          nil t))))
#+end_src
**** NOT_WORK go-guru
#+begin_src emacs-lisp
  (use-package go-guru
    :ensure t)
#+end_src
* Font and Theme
** Fonts
SourceCodePro is my default font.
Execute ~(print (font-family-list))~ to get a list of all available fonts and how
Emacs expects you to write them.

#+BEGIN_SRC emacs-lisp
  ;; Turn off antialiasing for BigBlue Terminal Font
  ;; (setq mac-allow-anti-aliasing nil)

  ;; Something to do with resolution
  (if (member hbournis/default-font (font-family-list))
      (cond (IS-MAC
             (set-face-attribute 'default nil :font (concat hbournis/default-font "-" hbournis/mac-font-size)))
            (IS-LINUX
             (set-face-attribute 'default nil :font (concat hbournis/default-font "-" hbournis/alternate-font-size)))
            (IS-WINDOWS
             (set-face-attribute 'default nil :font (concat hbournis/default-font "-" hbournis/windows-font-size) :weight 'semi-bold)))

    (cond (IS-WINDOWS
           (set-face-attribute 'default nil :font (concat hbournis/fallback-font "-" hbournis/windows-font-size)))
          (t (set-face-attribute 'default nil :font (concat hbournis/fallback-font "-" hbournis/mac-font-size)))))

  ;; Set a font with great support for Unicode Symbols to fallback in
  ;; those case where certain Unicode glyphs are missing in the current
  ;; font.
  (when (member hbournis/unicode-font (font-family-list))
    (cond (IS-MAC
           (set-fontset-font t 'unicode (concat hbournis/unicode-font "-" hbournis/mac-font-size) nil 'prepend))
          (IS-LINUX
           (set-fontset-font t 'unicode (concat hbournis/unicode-font "-" hbournis/mac-font-size) nil 'prepend))
          (IS-WINDOWS
           (set-fontset-font t 'unicode (concat hbournis/unicode-font "-" hbournis/windows-font-size) nil 'prepend)))
    )
#+END_SRC
** Themes
*** Color Scheme
First I set two built-in themes, in case downloading the custom themes fails.
Currently using [[https://github.com/ideasman42/emacs-inkpot-theme][inkpot-theme]] for dark theme, and [[https://github.com/john2x/flatui-theme.el][flatui]] for light theme.
Other interesting themes: [[https://github.com/jonathanchu/atom-one-dark-theme][atom-one-dark-theme]], [[https://github.com/owainlewis/emacs-color-themes][sublime themes]], [[https://github.com/steckerhalter/grandshell-theme][grandshell-theme]], [[https://github.com/steckerhalter/grandshell-theme][badwolf-theme]].

#+BEGIN_SRC emacs-lisp
  (setq light-theme-var 'tango)
  (setq dark-theme-var  'tsdh-dark)
  (setq light-theme-modeline-var nil)
  (setq dark-theme-modeline-var nil)
  (setq light-theme-overrides-var nil)
  (setq dark-theme-overrides-var nil)

  ;; Used for treemacs
  (use-package doom-themes
    :ensure t
    :config
    (use-package all-the-icons
      :ensure t)
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t
          doom-themes-treemacs-line-spacing 2
          doom-themes-treemacs-theme "doom-colors")
    (doom-themes-treemacs-config))

  ;; Dark theme
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config
    (setq dark-theme-var 'sanityinc-tomorrow-night)
    (setq dark-theme-overrides-var
          '((set-face-attribute 'org-level-1 nil
                                :foreground "#5c9ead")
            (set-face-attribute 'org-level-4 nil
                                :foreground "#f0a202")
            (set-face-attribute 'org-level-2 nil
                                :foreground "#bbbdf6")
            (set-face-attribute 'org-level-3 nil
                                :foreground "#f3b3a6")
            (set-face-attribute 'org-level-5 nil
                                :foreground "#cae7b9")
            (set-face-attribute 'org-level-6 nil
                                :foreground "#3ab795")
            (set-face-attribute 'fringe nil
                                :background "#1d1f21")
            (set-face-attribute 'org-property-value nil
                                :foreground "white")
            (set-face-attribute 'mode-line-inactive nil
                                :box nil
                                :background "#1d1f21")
            (set-face-attribute 'hl-line nil
                                :background "#282a2e")
            (set-face-attribute 'org-checkbox nil
                                :background nil
                                :foreground nil
                                :box nil
                                :weight 'bold)
            ))
    )

  ;; Light theme
  (use-package flatui-theme
    :ensure t
    :config
    (setq light-theme-var 'flatui)
    (setq light-theme-overrides-var
          '((set-face-attribute 'org-checkbox nil
                                :box nil
                                :bold 'normal
                                :background nil)

            (set-face-attribute 'font-lock-string-face nil
                                :background nil
                                :foreground "#0a74b9")

            (set-face-attribute 'org-property-value nil
                                :foreground "black")

            (set-face-attribute 'eyebrowse-mode-line-active nil
                                :foreground "#16a085")

            (set-face-attribute 'eyebrowse-mode-line-inactive nil
                                :foreground "#95a5a6")

            (set-face-attribute 'eyebrowse-mode-line-separator nil
                                :foreground "#95a5a6")

            (set-face-attribute 'eyebrowse-mode-line-delimiters nil
                                :foreground "#95a5a6")

            (set-face-attribute 'org-agenda-date-weekend nil
                                :weight 'normal)

            (set-face-attribute 'magit-section-highlight nil
                                :background "#dfe4ea")

            (set-face-attribute 'magit-section-heading nil
                                :foreground "#8E44AD")

            (set-face-attribute 'magit-branch-local nil
                                :foreground "#2980B9")

            (set-face-attribute 'magit-branch-remote nil
                                :foreground "#27AE60")

            (set-face-attribute 'ivy-minibuffer-match-face-1 nil
                                :background "#F1C40F"
                                :foreground "white")

            (set-face-attribute 'ivy-minibuffer-match-face-2 nil
                                :background "#F1C40F"
                                :foreground "white")

            (set-face-attribute 'ivy-minibuffer-match-face-3 nil
                                :background "#F1C40F"
                                :foreground "white")

            (set-face-attribute 'ivy-minibuffer-match-face-4 nil
                                :background "#F1C40F"
                                :foreground "white")

            (set-face-attribute 'ivy-current-match nil
                                :background "#9B59B6"
                                :foreground "white")

            (setq org-todo-keyword-faces '(("TODO"        . (:foreground "#e74c3c" :weight bold))
                                           ("DOING"       . (:foreground "#2980b9" :weight bold))
                                           ("WAITING"     . (:foreground "#8e44ad" :weight bold))
                                           ("DONE"        . (:foreground "green" :weight bold))))

            (setq evil-emacs-state-cursor    '("red" box))
            (setq evil-normal-state-cursor   '("#1abc9c" box))
            (setq evil-visual-state-cursor   '("orange" box))
            (setq evil-insert-state-cursor   '("#9b59b6" box))
            (setq evil-replace-state-cursor  '("red" box))
            (setq evil-operator-state-cursor '("red" box))
            (set-face-attribute 'mode-line nil
                                :background "#dfe4ea"
                                :box nil)
            (set-face-attribute 'mode-line-inactive nil
                                :box nil
                                :background "#ecf0f1")
            (set-face-attribute 'magit-diff-context nil
                                :background "grey20")
            )))

  ;; Add the default theme in the load path
  (add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/default-theme-clean")
#+END_SRC

*** Modeline
**** DISABLED powerline
[[https://github.com/milkypostman/powerline][Github]]
[[https://github.com/AnthonyDiGirolamo/airline-themes][Airline Themes]]

Favorite dark themes:
- simple
- serene
- dark
- behelit

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (use-package airline-themes
      :ensure t
      :config
      (setq light-theme-modeline-var 'airline-silver)
      ;; (setq dark-theme-modeline-var 'airline-behelit)
      (setq dark-theme-modeline-var 'airline-doom-molokai)
      ))
#+END_SRC
**** DISABLED telephone-line
[[https://github.com/dbordak/telephone-line][Github]]

#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-right
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    (setq telephone-line-height 24
          telephone-line-evil-use-short-tag t)
    (telephone-line-evil-config))
#+END_SRC
**** DISABLED spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
#+END_SRC
**** Custom Modeline
#+begin_src emacs-lisp
  (load-file "~/.dotfiles/emacs.d.symlink/lisp/custom-modeline.el")
#+end_src
*** Theme Functions
#+BEGIN_SRC emacs-lisp
  (defun switch-theme (theme)
    "This interactive call is taken from `load-theme'
    Seen at: https://www.reddit.com/r/emacs/comments/30b67j/how_can_you_reset_emacs_to_the_default_theme/cprkyl0/
    It first loads the default clean Emacs theme, then disables all themes, and loads the specified THEME."
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapcar 'symbol-name
                                       (custom-available-themes))))))
    ;; (load-theme 'default-theme-clean)
    (mapcar #'disable-theme custom-enabled-themes)
    (load-theme theme t))

  (defun toggle-light-dark-theme ()
    "Toggle between the selected dark and light themes."
    (interactive)
    (if (get 'toggle-light-dark-theme 'light-theme-loaded)
        (load-dark-theme)
      (load-light-theme))
    (put 'toggle-light-dark-theme 'light-theme-loaded (not (get 'toggle-light-dark-theme 'light-theme-loaded))))

  (defun load-dark-theme ()
    "Load the specified dark theme.  It uses the variables dark-theme-var, dark-theme-modeline-var.
      Also sets some faces for org-checkbox, strings, org TODO items and evil mode cursors. "
    (if dark-theme-var (switch-theme dark-theme-var))
    (if dark-theme-modeline-var (load-theme dark-theme-modeline-var))
    (if (not (eq dark-theme-overrides-var nil)) (mapcar 'eval dark-theme-overrides-var))

    (set-face-attribute 'org-agenda-date-weekend nil
                        :weight 'normal)

    (setq org-priority-faces '((?A . (:foreground "#ff6c6b" :weight bold))
                               (?B . (:foreground "orange"))
                               (?C . (:foreground "yellow"))
                               (?D . (:foreground "green"))))

    (set-face-attribute 'org-agenda-date          nil :height 1.1)
    (set-face-attribute 'org-agenda-date-today    nil :height 1.1)
    (set-face-attribute 'org-agenda-date-weekend  nil :height 1.1)
    (set-face-attribute 'org-agenda-structure     nil :height 1.1)

    (setq evil-emacs-state-cursor    '("red" box))
    (setq evil-normal-state-cursor   '("white" box))
    (setq evil-visual-state-cursor   '("orange" box))
    (setq evil-insert-state-cursor   '("cyan" box))
    (setq evil-replace-state-cursor  '("red" box))
    (setq evil-operator-state-cursor '("red" box))

    (set-face-attribute 'font-lock-comment-face nil :foreground "#7D7F81" )

    (set-face-attribute 'font-lock-string-face nil :background "#050505" )
    (set-face-attribute 'font-lock-keyword-face nil :background "#050505" ))


  (defun load-light-theme ()
    "Load the specified light theme.
          It uses the variables light-theme-var, light-theme-modeline-var.
          Also sets some faces for org-checkbox, strings, org TODO items and evil
          mode cursors."
    (if light-theme-var (switch-theme light-theme-var))
    (if light-theme-modeline-var (load-theme light-theme-modeline-var))
    (if (not (eq light-theme-overrides-var nil)) (mapcar 'eval light-theme-overrides-var)))
#+END_SRC
*** Load Theme
#+BEGIN_SRC emacs-lisp
  (load-dark-theme)
#+END_SRC

*** whiteroom-mode
https://github.com/joostkremers/writeroom-mode

#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t)
#+end_src
* Custom Functions
** Call with prefix
#+begin_src emacs-lisp
  (defun hbournis/call-with-prefix (func &optional prefix)
    (interactive)
    (let ((current-prefix-arg (or prefix '(1))))
      (call-interactively func)))
#+end_src
** Toggle Window Split
Toggle between horizontal and vertical split. [[https://www.emacswiki.org/emacs/ToggleWindowSplit][Source]]

#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    ;; Toggle the placement of windows between horizontal and vertical split
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
             (car next-win-edges))
               (<= (cadr this-win-edges)
             (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
           (car (window-edges (next-window))))
        'split-window-horizontally
      'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))
#+END_SRC
** Align org mode tags on the right
I want to align the org mode tags on the right of the screen, which is a
relative value. However, org-align-all-tags depends on the org-tags-column variable.
For some reason setting org-tags-column in the init file does not work. Although the code
is valid, when I check the value of the variable it is -80. However, if evaluate
the block and check again, the value is set correctly. At the moment I see no
workaround except to set org-tags-column immediatelly before calling
org-align-all-tags. This also means that it will be relative to the window
width at the moment I want to align them, and not at startup.

#+BEGIN_SRC emacs-lisp
  (defun org-align-all-tags-right ()
    ;; Align org tags to the right of the screen. Calculates it according to the
    ;; window-total-width property.
    (interactive)
    (setq org-tags-column (+ 5 (- (window-total-width))))
    (org-align-all-tags))
#+END_SRC
** Copy to clipboard
#+begin_src emacs-lisp
  (defun hbournis/copy-to-clipboard (string)
    (kill-new string)
    (message (concat "Copied to clipboard: " string)))
#+end_src
** Copy file name to clipboard
#+begin_src emacs-lisp
  (defun hbournis/copy-filename-to-clipboard ()
    (interactive)
    (hbournis/copy-to-clipboard (format "%s" buffer-file-name)))
#+end_src
** Check if cliboard data is a URL
Helper function for ~hbournis/insert-url-as-org-link~ and
~hbournis/org-make-word-link-from-clipboard.~ Returns true if url is a valid
URL. Returns false if it is not a URL, or if it is an org-mode formatted link.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/cliboard-contains-url-p (url)
    ;; Returns true if url is a valid URL. Returns false
    ;; if it is not a URL, or if it is an org-mode formatted
    ;; link.
    (let ((url-pattern  "\\(http[s]?://\\|www\\.\\)")
          (url-org-pattern "\\([[]+\\)"))
      (and (not (string-match url-org-pattern url)) (string-match url-pattern url))))
#+END_SRC
** Paste URL from clipboard in org mode format
Insert a URL from clipboard in org mode format and place the cursor in insert
mode to complete the link text. Originally seen [[https://emacs.stackexchange.com/a/3287][here]]. The original snippet
matched URLs that were already formatted as org mode links, leading to really
broken links being inserted. This is a common case since when you delete a link
it is stored in the register. I added a second regular expression that checks
whether the URL in the clipboard starts with ~[~.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/insert-url-as-org-link ()
    "If there's a URL on the clipboard, insert it as an org-mode
  link in the form of [[url][*]], leave point at * and enter insert mode."
    (interactive)
    (let ((link (substring-no-properties (x-get-selection 'CLIPBOARD))))
      (save-match-data
        (if (hbournis/cliboard-contains-url-p link)
            (progn
              (insert (concat "[[" link "][]]"))
              (backward-char 2)
              (evil-insert 1))
          (error "No URL on the clipboard")))))
#+END_SRC
** Paste URL from clipboard using the word at point as link text
Takes the word that the cursor in on, and replaces it with an org-mode link to
the URL in the clipboard. If there is no word at the cursor point, it inserts
the link with the URL as text. Returns an error if there is no URL at the
clipboard. I wanted to make it work with visual selection, but I maybe in the
future.

#+BEGIN_SRC emacs-lisp
  (defun hbournis/org-make-word-link-from-clipboard ()
    ;; Takes the word that the cursor in on, and replaces it with an org-mode
    ;; link to the URL in the clipboard. If there is no word at the cursor point,
    ;; it inserts the link with the URL as text. Returns an error if there is
    ;; no URL at the clipboard.
    (interactive)
    (let ((link (substring-no-properties (x-get-selection 'CLIPBOARD)))
          ;; Specify the bounds of the region in order to delete it
          (bounds (if (use-region-p)
                      (cons (region-beginning) (region-end))
                    (bounds-of-thing-at-point 'symbol)))
          ;; If there is no word at point, then use the link as URL
          (text (or (thing-at-point 'symbol) link)))

      ;; Check if link is a URL and that it is not already in org mode format,
      ;; else throw an error
      (if (hbournis/cliboard-contains-url-p link)
          (progn
            ;; If bounds exist, delete the word to replace it with the link
            (if bounds
                (delete-region (car bounds) (cdr bounds)))

            ;; Insert the link with the text in org mode link format
            (insert (concat "[[" link "][" text "]]")))
        (error "There is no URL at the clipboard."))))
#+END_SRC
** Copy to clipboard link to current file and current line
#+BEGIN_SRC emacs-lisp
  (defun hbournis-position-to-kill-ring ()
    "Copy to the kill ring a string in the format \"file-name:line-number\"
      for the current buffer's file name, and the line number at point.
      Originally seen: https://stackoverflow.com/a/10682397"
    (interactive)
    (let ((linum (save-restriction (widen) (line-number-at-pos))))
      (kill-new
       (format "[[file:%s::%d][⮴\"%s\":%d]]"
               (buffer-file-name)
               linum
               (file-name-nondirectory (buffer-file-name))
               linum))
      (message "Copied link to position")))
#+END_SRC
** Smartparens wrap-with- functions
For each pair character, generate a function called ~wrap-with-<pair name>~. [[https://ebzzry.io/en/emacs-pairs/][Source]]
#+BEGIN_SRC emacs-lisp
  ;; Source: https://ebzzry.io/en/emacs-pairs/
  (defmacro def-pairs (pairs)
    `(progn
       ,@(cl-loop for (key . val) in pairs
                  collect
                  `(defun ,(read (concat
                                  "wrap-with-"
                                  (prin1-to-string key)
                                  "s"))
                       (&optional arg)
                     (interactive "p")
                     (sp-wrap-with-pair ,val)))))

  (def-pairs ((paren . "(")
              (bracket . "[")
              (brace . "{")
              (single-quote . "'")
              (double-quote . "\"")
              (back-quote . "`")))
#+END_SRC
** Transform org date to simple year-month-day string
#+BEGIN_SRC emacs-lisp
  (defun hbournis/org-date-to-simple-string (date)
    "Transform an org date to a simple year-month-day format"
    (substring (format "%S" date) 1 11))
#+END_SRC
** Recreate scratch buffer
A simple function from [[https://www.emacswiki.org/emacs/RecreateScratchBuffer][Emacs wiki]] to recreate the scratch buffer

#+BEGIN_SRC emacs-lisp
  (defun hbournis/create-scratch-buffer nil
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
#+END_SRC
** Hide ^M in files with DOS line endings
[[https://stackoverflow.com/a/750933][Source]]

#+BEGIN_SRC emacs-lisp
  (defun remove-dos-eol ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))
#+END_SRC
** DISABLED org-fancy-priorities development
For development only.
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p (concat user-emacs-directory "lisp/org-fancy-priorities/org-fancy-priorities.el"))
      (progn
        (add-to-list 'load-path "~/.emacs.d/lisp/org-fancy-priorities/")
        (require 'org-fancy-priorities)
        (setq org-fancy-priorities-list '((?A . "❗")
                                          (?B . "⬆")
                                          (?C . "⬇")
                                          (?D . "☕")
                                          (?1 . "❗")
                                          (?2 . "⮬")
                                          (?3 . "⮮")
                                          (?4 . "☠")))
        (add-hook 'org-mode-hook 'org-fancy-priorities-mode)
        (diminish 'org-fancy-priorities-mode)))
#+END_SRC
** Terminal Notifier
[[https://zhongweiy.github.io/blog/2016/02/03/solve-error-emacs-not-compiled-with-dbus-support/][Source]]

#+BEGIN_SRC emacs-lisp
  ;; Terminal notifier
  ;; requires 'brew install terminal-notifier'
  ;; stolen from erc-notifier

  (defvar terminal-notifier-command (executable-find "terminal-notifier") "The path to terminal-notifier.")

  ;; (terminal-notifier-notify "Emacs notification" "Something amusing happened")

  (defun terminal-notifier-notify (title message)
    "Show a message with
  terminal-notifier-command
  ."
    (start-process "terminal-notifier"
                   "terminal-notifier"
                   terminal-notifier-command
                   "-title" title
                   "-message" message
                   "-sound" "default"
                   "-activate" "org.gnu.Emacs"))

  (defun timed-notification (time msg)
    (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
    (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Emacs" msg)) msg))

  (setq org-show-notification-handler
        (lambda (msg) (timed-notification nil msg)))
#+END_SRC
** DISABLED Refresh agenda when files change on disk
#+BEGIN_SRC emacs-lisp
  (defun inform-revert-modified-file (&optional p1 p2)
    "bdimych custom function"
    (let ((revert-buffer-function nil))
      (revert-buffer p1 p2)
      (message (concat "buffer file name is: " buffer-file-name))
      ;; (if (member buffer-file-name)
      ;;     )
      (if (get-buffer "*Org Agenda*")
          (with-current-buffer "*Org Agenda*"
            (org-agenda-redo)))))

  (setq revert-buffer-function 'inform-revert-modified-file)
#+END_SRC
** Delete empty sections in org agenda
[[https://lists.gnu.org/archive/html/emacs-orgmode/2015-06/msg00266.html][Source]]

#+BEGIN_SRC emacs-lisp
  (defun org-agenda-delete-empty-blocks ()
    "Remove empty agenda blocks.
  A block is identified as empty if there are fewer than 2
  non-empty lines in the block (excluding the line with
  `org-agenda-block-separator' characters)."
    (when org-agenda-compact-blocks
      (user-error "Cannot delete empty compact blocks"))
    (setq buffer-read-only nil)
    (save-excursion
      (goto-char (point-min))
      (let* ((blank-line-re "^\\s-*$")
             (content-line-count (if (looking-at-p blank-line-re) 0 1))
             (start-pos (point))
             (block-re (format "%c\\{10,\\}" org-agenda-block-separator)))
        (while (and (not (eobp)) (forward-line))
          (cond
           ((looking-at-p block-re)
            (when (< content-line-count 2)
              (delete-region start-pos (1+ (point-at-bol))))
            (setq start-pos (point))
            (forward-line)
            (setq content-line-count (if (looking-at-p blank-line-re) 0 1)))
           ((not (looking-at-p blank-line-re))
            (setq content-line-count (1+ content-line-count)))))
        (when (< content-line-count 2)
          (delete-region start-pos (point-max)))
        (goto-char (point-min))
        ;; The above strategy can leave a separator line at the beginning
        ;; of the buffer.
        (when (looking-at-p block-re)
          (delete-region (point) (1+ (point-at-eol))))))
    (setq buffer-read-only t))

  (add-hook 'org-agenda-finalize-hook #'org-agenda-delete-empty-blocks)
#+END_SRC
** Open file in an external program
[[http://batsov.com/articles/2011/11/12/emacs-tip-number-2-open-file-in-external-program/][Source]]

#+BEGIN_SRC emacs-lisp
  (defun prelude-open-with ()
    "Simple function that allows us to open the underlying
  file of a buffer in an external program."
    (interactive)
    (when buffer-file-name
      (shell-command (concat
                      (if (eq system-type 'darwin)
                          "open"
                        (read-shell-command "Open current file with: "))
                      " "
                      buffer-file-name))))

  (global-set-key (kbd "C-c o") 'prelude-open-with)
#+END_SRC
** Insert current time stamp
Just a simple function for when I want the current time stamp inside an org file

#+BEGIN_SRC emacs-lisp
  (defun hbournis/insert-timestamp ()
    "Inserts inactive timestamp with time"
    (interactive)
    (newline-and-indent)
    (insert "⏱⏱⏱ --- ")
    (org-insert-time-stamp (current-time) t t)
    (insert " --- ⏱⏱⏱\n------------------------------------------")
    (newline-and-indent))
#+END_SRC
** kill-window-and-its-windows
[[https://www.emacswiki.org/emacs/misc-cmds.el][Source]]

#+BEGIN_SRC emacs-lisp
  ;; Candidate as a replacement for `kill-buffer', at least when used interactively.
  ;; For example: (define-key global-map [remap kill-buffer] 'kill-buffer-and-its-windows)
  ;;
  ;; We cannot just redefine `kill-buffer', because some programs count on a
  ;; specific other buffer taking the place of the killed buffer (in the window).
  (defun kill-buffer-and-its-windows (buffer)
    "Kill BUFFER and delete its windows.  Default is `current-buffer'.
  BUFFER may be either a buffer or its name (a string)."
    (interactive (list (read-buffer "Kill buffer: " (current-buffer) 'existing)))
    (setq buffer  (get-buffer buffer))
    (if (buffer-live-p buffer)            ; Kill live buffer only.
        (let ((wins  (get-buffer-window-list buffer nil t))) ; On all frames.
          (when (and (buffer-modified-p buffer)
                     (fboundp '1on1-flash-ding-minibuffer-frame))
            (1on1-flash-ding-minibuffer-frame t)) ; Defined in `oneonone.el'.
          (when (kill-buffer buffer)      ; Only delete windows if buffer killed.
            (dolist (win  wins)           ; (User might keep buffer if modified.)
              (when (window-live-p win)
                ;; Ignore error, in particular,
                ;; "Attempt to delete the sole visible or iconified frame".
                (condition-case nil (delete-window win) (error nil))))))
      (when (interactive-p)
        (error "Cannot kill buffer.  Not a live buffer: `%s'" buffer))))
#+END_SRC
** Toggle between workspace 1 and 2
#+BEGIN_SRC emacs-lisp
  (defun hbournis/toggle-workspaces-1-2 ()
    "Change between workspace 1 and 2 using the eyebrowse package"
    (interactive)
    (let ((current (eyebrowse--get 'current-slot)))
      (cond ((eql current 1) (eyebrowse-switch-to-window-config-2))
            ((eql current 2) (eyebrowse-switch-to-window-config-1))
            (t (eyebrowse-switch-to-window-config-1)))))
#+END_SRC
** toggle modeline

#+BEGIN_SRC emacs-lisp
  (defun hbournis/toggle-modeline ()
    "Show/hide modeline"
    (interactive)
    (if (get 'hbournis/toggle-modeline 'modeline-status)
        (progn
          (setq mode-line-format (get 'hbournis/toggle-modeline 'modeline-status))
          (put 'hbournis/toggle-modeline 'modeline-status nil))
      (progn
        (put 'hbournis/toggle-modeline 'modeline-status mode-line-format)
        (setq mode-line-format nil)))
    (redraw-frame))
#+END_SRC
** Split and switch to new frame
#+BEGIN_SRC emacs-lisp
  (defun split-window-horizontally-and-switch ()
    (interactive)
    (split-window-horizontally)
    (other-window 1))

  (defun split-window-vertically-and-switch ()
    (interactive)
    (split-window-vertically)
    (other-window 1))

  (defun split-window-below-and-switch ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun split-window-right-and-switch ()
    (interactive)
    (split-window-right)
    (other-window 1))
#+END_SRC
** Copy file name to clipboard
 [[https://stackoverflow.com/a/2417617][Source]]
#+BEGIN_SRC emacs-lisp
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC
** dired create file
[[https://stackoverflow.com/a/18885461][Source]]

#+BEGIN_SRC emacs-lisp
  (defun hbournis/dired-create-file (file)
    "Create a file called FILE. If FILE already exists, signal an error."
    (interactive
     (list (read-file-name "Create file: " (dired-current-directory))))
    (let* ((expanded (expand-file-name file))
           (try expanded)
           (dir (directory-file-name (file-name-directory expanded)))
           new)
      (if (file-exists-p expanded)
          (error "Cannot create file %s: file exists" expanded))
      ;; Find the topmost nonexistent parent dir (variable `new')
      (while (and try (not (file-exists-p try)) (not (equal new try)))
        (setq new try
              try (directory-file-name (file-name-directory try))))
      (when (not (file-exists-p dir))
        (make-directory dir t))
      (write-region "" nil expanded t)
      (when new
        (dired-add-file new)
        (dired-move-to-filename))))
#+END_SRC
** ssh
:PROPERTIES:
:VISIBILITY: folded
:END:
*** ssh to osmc
#+begin_src emacs-lisp
(defun hbournis/ssh-ranger-omsc ()
  "open ranger through ssh to local osmc"
  (interactive)
  (ranger "/scp:osmc:~"))
#+end_src
** read-only .log files
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.log\\'" . read-only-mode))
#+end_src
** Tail current ranger file
Run itail on the currently highlighted file in ranger.

#+begin_src emacs-lisp
  (defun hbournis/tail-file-at-point ()
    "Run itail on the current ranger file."
    (interactive)
    (let ((file-path (ranger-copy-absolute-file-paths)))
      (itail file-path)))
#+end_src
** Open org-file if not at work
#+begin_src emacs-lisp
  (defun hbournis/open-org-file (file)
    "Open org file conditionally. Avoid opening them by mistake."
    (cond ((not WORK?)
           (find-file file))
          ((and WORK? (eq file hbournis/org-work-file)) (find-file file))))
#+end_src
** Call Language-function according to file_extension
#+begin_src emacs-lisp
  (setq hbournis/test-at-point-map
        #s(hash-table size 6 test eq data (
                                           rspec-mode      rspec-verify-single
                                           minitest-mode   minitest-verify-single
                                           js-mode         mocha-test-at-point
                                           typescript-mode mocha-test-at-point
                                           web-mode        mocha-test-at-point
                                           clojure-mode    cider-test-run-test)))

  (setq hbournis/test-file-map
        #s(hash-table size 6 test eq data (
                                           rspec-mode      rspec-verify
                                           minitest-mode   minitest-verify
                                           js-mode         mocha-test-file
                                           typescript-mode mocha-test-file
                                           web-mode        mocha-test-file
                                           clojure-mode    cider-test-run-ns-tests)))

  (setq hbournis/test-all-map
        #s(hash-table size 6 test eq data (
                                           rspec-mode      rspec-verify-all
                                           minitest-mode   minitest-verify-all
                                           js-mode         mocha-test-project
                                           typescript-mode mocha-test-project
                                           web-mode        mocha-test-project
                                           clojure-mode    cider-test-run-project-tests)))

  (setq hbournis/find-definition-map
        #s(hash-table size 2 test eq data (
                                           ruby-mode       lsp-find-definition
                                           typescript-mode dumb-jump-go
                                           java-mode       dumb-jump-go
                                           web-mode        dumb-jump-go)))

  (setq hbournis/open-doc-map
        #s(hash-table size 3 test eq data (
                                           rspec-mode      robe-doc
                                           minitest-mode   robe-doc
                                           clojure-mode    cider-doc)))

  (setq hbournis/show-repl-map
        #s(hash-table size 1 test eq data (
                                           clojure-mode    cider-switch-to-repl-buffer)))

  (defun hbournis/get-generic-lookup-mode ()
    (let ((is-ruby (eq major-mode 'ruby-mode))
          (filename (buffer-file-name)))
      (if is-ruby
          (cond ((string-match-p ".*_spec\\.rb" filename) 'rspec-mode)
                ((string-match-p ".*_test\\.rb" filename) 'minitest-mode)
                (t 'ruby-mode))
        major-mode)))

  (defun hbournis/call-interactively-generic-func (map)
    (if-let ((result (gethash (hbournis/get-generic-lookup-mode) map)))
        (call-interactively result)))

  (defun hbournis/generic-run-test-at-point ()
    "Call the appropriate run test at point function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/test-at-point-map))

  (defun hbournis/generic-run-test-file ()
    "Call the appropriate run test file function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/test-file-map))

  (defun hbournis/generic-run-test-all ()
    "Call the appropriate run all tests function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/test-all-map))

  (defun hbournis/generic-find-definition ()
    "Call the appropriate run all tests function depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/find-definition-map))

  (defun hbournis/generic-open-doc ()
    "Show the function documentation depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/open-doc-map))

  (defun hbournis/generic-show-repl ()
    "Show the repl depending on major mode."
    (interactive)
    (hbournis/call-interactively-generic-func hbournis/show-repl-map))
#+end_src
** init rest-client
#+begin_src emacs-lisp
(defun hbournis/init-rest-client ()
  "Adds the basics to use emacs rest client."
  (interactive)
  (insert
   ":url = http://localhost:8080

:headers = <<
Cache-Control: no-cache
Authorization: Bearer
Content-Type: application/json
#

# GET
GET :url/api/
:headers
{
}
"))
#+end_src
** TDD mode
#+begin_src emacs-lisp
  (defun hbournis/ruby-test-file-p (&optional file)
    "Returns true if file is a ruby spec file"
    (interactive)
    (let ((filename (or file (buffer-file-name)))
          (ruby-test-suffix "spec.rb"))
      (string-suffix-p ruby-test-suffix filename)))

  (defun hbournis/tdd-split ()
    "Split screen for TDD"
    (interactive)
    (let ((current-file (buffer-file-name))
          (spec-name (rspec-spec-file-for (buffer-file-name)))
          (file-name (rspec-target-file-for (buffer-file-name))))
      (delete-other-windows)
      (if (hbournis/ruby-test-file-p current-file)
          (projectile-rails-find-current-spec))
      (split-window-horizontally)
      (projectile-rails-find-current-spec)
      (hbournis/generic-run-test-file)
      (other-window 1)
      (split-window-below-and-switch)
      (find-file file-name)
      (other-window 1)))
#+end_src
** Kill all buffers except those starting with asterisk
#+begin_src emacs-lisp
  (defun hbournis/kill-buffer-unless-asterisk (buffer)
    "Returns true if the buffer should be killed."
    (unless (string-prefix-p "*" (buffer-name buffer))
      (kill-buffer buffer)))

  (defun hbournis/kill-all-file-buffers ()
    "Kill all buffers if unless they start with asterisk."
    (interactive)
    (mapcar 'hbournis/kill-buffer-unless-asterisk (buffer-list))
    (message "Buffers killed."))
#+end_src
* Shortcuts
global shortcuts

#+BEGIN_SRC emacs-lisp
  (global-set-key   (kbd "C-c w")  'browser-url-at-point)
  (global-unset-key (kbd "C-k"))
  (global-unset-key (kbd "C-S-k"))
  (global-set-key   (kbd "C-S-k")  (lambda () (interactive) (kill-this-buffer) (delete-other-windows)))
  (global-set-key   (kbd "C-c a")  'org-agenda)
  (global-set-key   (kbd "C-1")  'eyebrowse-switch-to-window-config-1)
  (global-set-key   (kbd "C-2")  'eyebrowse-switch-to-window-config-2)
  (global-set-key   (kbd "C-3")  'eyebrowse-switch-to-window-config-3)
  (global-set-key   (kbd "C-4")  'eyebrowse-switch-to-window-config-4)
#+END_SRC
* ENV variables

#+BEGIN_SRC emacs-lisp
  ;; For pdf-tools to work in mac
  (setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
#+END_SRC
* Autostart Org Agenda
Reload all agenda files before before showing the agenda, since they might
have been edited from the mobile app.

If eyebrowse is installed, switch to the 1st window config, to avoid overriding
the last opened window config.

#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice (lambda ()
                                (dolist (file-name org-agenda-files)
                                  (let ((buf (find-buffer-visiting file-name)))
                                    (if buf
                                        (with-current-buffer buf
                                          (when (buffer-file-name)
                                            (revert-buffer :ignore-auto :noconfirm))))))
                                (if (fboundp 'eyebrowse-switch-to-window-config-1)
                                    (eyebrowse-switch-to-window-config-1))
                                (if WORK?
                                    (org-agenda nil "w")
                                  (org-agenda nil "c"))
                                (get-buffer "*Org Agenda*")
                                (beginning-of-buffer)
                                ;; (run-at-time "20 sec" nil 'org-agenda nil "c")
                                ))
  (delete-other-windows)
#+END_SRC
* Start emacs server
Start an emacs server so you can open files from the command line using
emacsclient

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))

  (require 'org-protocol)
#+END_SRC
* Start fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
